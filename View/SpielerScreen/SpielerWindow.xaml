<Window
    x:Class="MeisterGeister.View.SpielerScreen.SpielerWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Kampf="clr-namespace:MeisterGeister.ViewModel.Kampf.Logic"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:ViewGeneral="clr-namespace:MeisterGeister.View.General"
    xmlns:KampfManöver="clr-namespace:MeisterGeister.ViewModel.Kampf.Logic.Manöver"
    xmlns:model="clr-namespace:MeisterGeister.ViewModel.Bodenplan.Logic"
    xmlns:s="clr-namespace:MeisterGeister.View.SpielerScreen"
    Title="DSA MeisterGeister - Spieler Informationen"
    Width="850"
    Height="559"
    Background="Black"
    Closed="Window_Closed"
    KeyDown="Window_KeyDown"
    Loaded="Window_Loaded"
    MouseDoubleClick="Window_MouseDoubleClick"
    Topmost="True"
    WindowStyle="None">
    <Window.Resources>
        <System:Double x:Key="gridSize">30</System:Double>
        <ViewGeneral:EnumItemsSource x:Key="PositionenValues" Type="{x:Type Kampf:Position}" />
        <ViewGeneral:EqualsMultiConverter x:Key="equalsMultiConverter" />
        <ViewGeneral:IsEqualOrGreaterThanConverter x:Key="IsEqualOrGreaterThanConverter1" />
        <model:PositionToImageConverter x:Key="PositionToImageConverter1" />
        <Kampf:DataTypeConverter x:Key="DataTypeConverter1" />

        <Style TargetType="ProgressBar">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Grid x:Name="Root">
                            <Border
                                Name="PART_Track"
                                Background="LightGray"
                                BorderBrush="Gray"
                                BorderThickness="1"
                                CornerRadius="2" />
                            <Border
                                Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="#FF1FF31F"
                                BorderBrush="Gray"
                                BorderThickness="1"
                                CornerRadius="1">
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--  Getting vertical style working using technique described here: http://stackoverflow.com/a/6849237/7532  -->
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter TargetName="Root" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="270" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Root" Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}" />
                                <Setter TargetName="Root" Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <ViewGeneral:ImagePathConverter x:Key="ImagePathConverter" />
        </Grid.Resources>

        <Grid Name="grdStandard">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding BodenplanActive, UpdateSourceTrigger=PropertyChanged}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <TextBlock
                Margin="15"
                Padding="10"
                Background="{StaticResource BackgroundPergamentQuer}"
                FontSize="22"
                FontWeight="Bold"
                Text="In diesem Fenster können Informationen für die Spieler gezeigt werden, falls ein zweiter Bildschirm verwendet wird."
                TextAlignment="Center"
                TextWrapping="Wrap" />
            <Border
                Grid.Row="1"
                Width="400"
                Height="250"
                Padding="20"
                Background="{StaticResource BackgroundPergamentQuer}">
                <Image Source="/Images/Logos/MG_Logo.png" Stretch="Uniform" />
            </Border>
        </Grid>

        <Grid
            Name="grdBodenplan"
            Background="{Binding BackgroundBrush, UpdateSourceTrigger=PropertyChanged}"
            Visibility="Collapsed">
            <Grid.LayoutTransform>
                <ScaleTransform ScaleX="{Binding ScaleSpielerGrid, UpdateSourceTrigger=PropertyChanged}" ScaleY="{Binding ScaleSpielerGrid, UpdateSourceTrigger=PropertyChanged}" />
            </Grid.LayoutTransform>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding TilePathData, Converter={StaticResource IsNullOrEmptyConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid
                Name="PlayerArenaGridTop"
                Margin="{Binding PlayerOffsetGridMargin, UpdateSourceTrigger=PropertyChanged}"
                HorizontalAlignment="Left"
                VerticalAlignment="Top">
                <Image
                    Name="imgbtnBGStoppen2"
                    Width="{Binding BackgroundOffsetSize, UpdateSourceTrigger=PropertyChanged}"
                    Margin="{Binding OffsetBackgroudMargin, UpdateSourceTrigger=PropertyChanged}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Source="{Binding BackgroundImage}" />
                <MediaElement                            
                        x:Name="MP4BattlemapBackgroundSpieler"
                        Width="{Binding BackgroundOffsetSize, UpdateSourceTrigger=PropertyChanged}"
                        Margin="{Binding OffsetBackgroudMargin, UpdateSourceTrigger=PropertyChanged}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Opacity="{Binding BackgroundMp4Opacity}"
                        RenderTransformOrigin="0.5,0.5"
                        Source="{Binding BackgroundImage, UpdateSourceTrigger=PropertyChanged}"
                        IsMuted="{Binding BackgroundMp4Mute, UpdateSourceTrigger=PropertyChanged}"
                        MediaOpened="MP4BattlemapBackgroundSpieler_MediaOpened"
                        MediaEnded="MP4BattlemapBackgroundSpieler_MediaEnded" >
                </MediaElement>
                <ListBox
                    Name="ArenaGrid2"
                    Width="10000"
                    Height="10000"
                    ItemsSource="{Binding BattlegroundObjects}"
                    SelectedItem="{Binding SelectedObject, Mode=TwoWay}"
                    SelectionMode="Single">
                    <ListBox.Resources>
                        <!-- Datatemplate Turn Marker  -->
                        <DataTemplate DataType="{x:Type model:TurnMarker}">
                            <Thumb DragDelta="Thumb_Drag" >
                                <Thumb.Template>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Canvas IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" 
                                                        Visibility="{Binding Visible}">
                                            <Image
                                                x:Name="turnmarkerImage"     
                                                Canvas.Left="{Binding MarkerPositionX}"
                                                Canvas.Top="{Binding MarkerPositionY}"
                                                Height="{Binding TurnMarkerDurchmesser, FallbackValue=200, TargetNullValue=200}" 
                                                Width="{Binding TurnMarkerDurchmesser, FallbackValue=200, TargetNullValue=200}" 
                                                VerticalAlignment="Top"
                                                Opacity="{Binding Opacity}"
                                                RenderTransformOrigin="0.5,0.5"
                                                Source="{Binding PictureUrl}" >
                                                <Image.RenderTransform>
                                                    <RotateTransform Angle="{Binding RotateAngle}" />
                                                </Image.RenderTransform>

                                                <Image.Triggers>
                                                    <EventTrigger RoutedEvent="Image.Loaded">
                                                        <BeginStoryboard>
                                                            <Storyboard BeginTime="00:00:00" RepeatBehavior="Forever">
                                                                <DoubleAnimation AutoReverse="False"                          
                                                                            Duration="0:0:10"
                                                                            From="0" 
                                                                            To="360"                                            
                                                                            RepeatBehavior="Forever"
                                                                            Storyboard.TargetName="turnmarkerImage"
                                                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </EventTrigger>
                                                </Image.Triggers>
                                            </Image>
                                        </Canvas>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>
                        <!--  Datatemplate BattlegroundCreature (Hero & Enemy)  -->
                        <DataTemplate DataType="{x:Type model:BattlegroundCreature}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <!--  SightArea  -->
                                            <Path
                                                Data="{Binding SightAreaGeometryData}"
                                                Fill="Yellow"
                                                IsHitTestVisible="False"
                                                Opacity="0.2"
                                                Stroke="Yellow"
                                                StrokeThickness="1">
                                                <Path.Style>
                                                    <Style TargetType="Path">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DataContext.ShowSightArea, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}" Value="True" />
                                                                    <Condition Binding="{Binding ki.IstUnsichtbar}" Value="False" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding IsMoving}" Value="True">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Path.Style>
                                            </Path>

                                            <!--  Lichtquelle  -->
                                            <Ellipse
                                                Canvas.Left="{Binding ki.LightCreatureX, UpdateSourceTrigger=PropertyChanged}"
                                                Canvas.Top="{Binding ki.LightCreatureY, UpdateSourceTrigger=PropertyChanged}"
                                                Width="{Binding ki.LichtquellePixelRadius}"
                                                Height="{Binding ki.LichtquellePixelRadius}"
                                                Opacity="0.25"
                                                Stroke="#FFF0FC00"
                                                StrokeThickness="2">
                                                <Ellipse.Fill>
                                                    <RadialGradientBrush>
                                                        <GradientStop Offset="1" Color="Transparent" />
                                                        <GradientStop Offset=".8" Color="#FFF0FC00" />
                                                    </RadialGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Style>
                                                    <Style TargetType="{x:Type Ellipse}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding ki.LichtquellePixel}" Value="0">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Ellipse.Style>
                                            </Ellipse>

                                            <!--  Frame for Heroe Picture  -->
                                            <Border  x:Name="brdCreaturePic"
                                                        Canvas.Left="{Binding CreatureXPic, UpdateSourceTrigger=PropertyChanged}"
                                                        Canvas.Top="{Binding CreatureYPic, UpdateSourceTrigger=PropertyChanged}"
                                                        Width="{Binding CreatureWidthPic, UpdateSourceTrigger=PropertyChanged}"
                                                        Height="{Binding CreatureHeightPic, UpdateSourceTrigger=PropertyChanged}">
                                                <Border.RenderTransform>
                                                    <RotateTransform 
                                                    CenterX="{Binding RotateImageCenterXY, UpdateSourceTrigger=PropertyChanged}" 
                                                    CenterY="{Binding RotateImageCenterXY, UpdateSourceTrigger=PropertyChanged}"
                                                    Angle="{Binding RotateImageDegrees, UpdateSourceTrigger=PropertyChanged}" />
                                                </Border.RenderTransform>
                                                <Border.Background>
                                                    <ImageBrush Opacity="{Binding Opacity}" Stretch="Fill" >
                                                        <ImageBrush.ImageSource>
                                                            <Binding 
                                                                Converter="{StaticResource ImagePathConverter}"
                                                                IsAsync="True" 
                                                                Mode="OneWay"
                                                                Path="BattleToken">
                                                                <Binding.FallbackValue>
                                                                    <ImageSource>
                                                                        /DSA MeisterGeister;component/Images/Icons/General/fragezeichen.png
                                                                    </ImageSource>
                                                                </Binding.FallbackValue>
                                                                <Binding.TargetNullValue>
                                                                    <ImageSource>
                                                                        /DSA MeisterGeister;component/Images/Icons/General/fragezeichen.png
                                                                    </ImageSource>
                                                                </Binding.TargetNullValue>
                                                            </Binding>
                                                        </ImageBrush.ImageSource>
                                                    </ImageBrush>
                                                </Border.Background>
                                            </Border>
                                            <Rectangle
                                                        Canvas.Left="{Binding CreatureX, UpdateSourceTrigger=PropertyChanged}"
                                                        Canvas.Top="{Binding CreatureY, UpdateSourceTrigger=PropertyChanged}"
                                                        Width="{Binding CreatureWidth, UpdateSourceTrigger=PropertyChanged}"
                                                        Height="{Binding CreatureHeight, UpdateSourceTrigger=PropertyChanged}"
                                                        RadiusX="12"
                                                        RadiusY="12"
                                                        Stroke="#FF5D5757"
                                                        ToolTip="{Binding Name}">
                                            </Rectangle>

                                            <TextBlock
                                                Canvas.Left="{Binding ZDisplayX}"
                                                Canvas.Top="{Binding ZDisplayY}"
                                                Width="60"
                                                FontSize="10"
                                                FontWeight="Bold"
                                                IsHitTestVisible="False"
                                                Text="{Binding ZLevel}"
                                                TextAlignment="Center"
                                                Visibility="{Binding DataContext.ShowZ, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}" />

                                            <!--  HinweisText  -->
                                            <TextBlock
                                                Canvas.Left="{Binding CreatureNameX}"
                                                Canvas.Top="{Binding CreatureNameY}"
                                                Width="140"
                                                Margin="0,-220,0,0"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Bottom"
                                                Background="White"
                                                FontSize="14"
                                                FontStyle="Italic"
                                                TextAlignment="Center"
                                                TextWrapping="Wrap">
                                                <TextBlock.Style>
                                                    <Style TargetType="{x:Type TextBlock}">
                                                        <Setter Property="Text" Value="{Binding HinweisText, UpdateSourceTrigger=PropertyChanged}" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding HinweisText}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsMoving}" Value="True">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>

                                            <!--  Kämpfer-Name  -->
                                            <TextBlock
                                                Canvas.Left="{Binding CreatureNameX}"
                                                Canvas.Top="{Binding CreatureNameY}"
                                                Width="160"
                                                FontSize="17"
                                                FontWeight="Normal"
                                                IsHitTestVisible="False"
                                                Opacity="{Binding Opacity}"
                                                TextAlignment="Center"
                                                Visibility="{Binding DataContext.ShowCreatureName, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="Text" Value="{Binding KurzTempname}" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsHeld}" Value="True">
                                                                <Setter Property="Text" Value="{Binding Kurzname}" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsMoving}" Value="True">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>

                                            <!--  Lebensbalken  -->
                                            <ProgressBar
                                                Canvas.Left="{Binding CreatureX}"
                                                Canvas.Top="{Binding CreatureY}"
                                                Width="10"
                                                Height="{Binding CreatureHeight}"
                                                Margin="-12,0,0,0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top"
                                                Background="#FF3DD81A"
                                                Maximum="{Binding LebensenergieMax}"
                                                Minimum="0"
                                                Opacity="{Binding Opacity}"
                                                Orientation="Vertical"
                                                Visibility="{Binding ShowLebensbalken, Converter={StaticResource BooleanToVisibilityConverter1}, UpdateSourceTrigger=PropertyChanged}"
                                                Value="{Binding LebensenergieAktuell}" />

                                            <!--  Anführer-Krone  -->
                                            <Image
                                                Canvas.Left="{Binding CreatureNameX}"
                                                Canvas.Top="{Binding CreatureNameY}"
                                                Width="40"
                                                Height="40"
                                                Margin="0,-32,0,0"
                                                Opacity="{Binding Opacity}"
                                                Source="/DSA%20MeisterGeister;component/Images/Icons/Krone.png"
                                                Visibility="{Binding ki.IstAnführer, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter1}}">
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ki.IstAnführer}" Value="True" />
                                                                    <Condition Binding="{Binding IsMoving}" Value="False" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>

                                            <!--  Position  -->
                                            <Image
                                                Canvas.Left="{Binding CreatureNameX}"
                                                Canvas.Top="{Binding CreatureNameY}"
                                                Width="50"
                                                Height="50"
                                                Opacity="{Binding Opacity}"
                                                Source="{Binding Position, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource PositionToImageConverter1}}">
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsMoving}" Value="True">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>

                                            <!--  Wunden - Icon  -->
                                            <Image
                                                Canvas.Left="{Binding ZDisplayX}"
                                                Canvas.Top="{Binding ZDisplayY}"
                                                Width="40"
                                                Height="40"
                                                Margin="-35,30,0,0"
                                                Opacity="{Binding Opacity}"
                                                Source="/DSA MeisterGeister;component/Images/Icons/Schaden.png">
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Wunden, Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Unlokalisiert], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Kopf], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Brust], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[ArmR], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[ArmL], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Bauch], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[BeinR], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[BeinL], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsMoving}" Value="True">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>


                                            <!-- Längerfristige Handlungen -->
                                            <Grid 
                                                Margin="{Binding MarginCreatureLangAkt}"
                                                Canvas.Left="{Binding CreatureX, UpdateSourceTrigger=PropertyChanged}"
                                                Canvas.Top="{Binding CreatureY, UpdateSourceTrigger=PropertyChanged}"    
                                                HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="40" Height="20" Background="#FFE0E07C" >
                                                <Grid.Style>
                                                    <Style TargetType="Grid">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition 
                                                                                Binding="{Binding AktManöverInfo.Manöver.VerbleibendeDauer, 
                                                                            UpdateSourceTrigger=PropertyChanged, 
                                                                            Converter={StaticResource IsEqualOrGreaterThanConverter1}, 
                                                                            ConverterParameter='1'}" Value="True"/>
                                                                    <Condition 
                                                                                Binding="{Binding AktManöverInfo.DauerInKampfaktionen, 
                                                                                Converter={StaticResource IsEqualOrGreaterThanConverter1},
                                                                                ConverterParameter='1'}" Value="True"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                                <Image Margin="-1" HorizontalAlignment="Left">
                                                    <Image.Style>
                                                        <Style TargetType="Image">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding AktManöverInfo.Manöver, Converter={StaticResource DataTypeConverter1}, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="{x:Type KampfManöver:FernkampfManöver}">
                                                                    <Setter Property="Source" Value="/DSA MeisterGeister;component/Images/Icons/Fernkampf.png" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding AktManöverInfo.Manöver, Converter={StaticResource DataTypeConverter1}, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="{x:Type KampfManöver:Zauber}">
                                                                    <Setter Property="Source" Value="/DSA MeisterGeister;component/Images/Icons/Magie.png" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding AktManöverInfo.Manöver, Converter={StaticResource DataTypeConverter1}, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="{x:Type KampfManöver:SonstigesManöver}">
                                                                    <Setter Property="Source" Value="/DSA MeisterGeister;component/Images/Icons/Kalender.png" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Image.Style>
                                                </Image>

                                                <TextBlock  
                                                    Margin="10,0,0,0"         
                                                    HorizontalAlignment="Left" 
                                                    VerticalAlignment="Center"    
                                                    Padding="8,0"
                                                    Text="{Binding AktManöverInfo.Manöver.VerbleibendeDauer, UpdateSourceTrigger=PropertyChanged}"                                                             
                                                    Width="28" 
                                                    FontSize="18" 
                                                    FontWeight="Bold" />
                                            </Grid>                                            
                                        <Canvas.Effect>
                                                <DropShadowEffect
                                                    BlurRadius="20"
                                                    ShadowDepth="10"
                                                    Color="{Binding DataContext.Farbmarkierung, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, UpdateSourceTrigger=PropertyChanged}" />
                                            </Canvas.Effect>
                                        </Canvas>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <!--  Datatemplate PATHLINE  -->
                        <DataTemplate DataType="{x:Type model:PathLine}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Path
                                                x:Name="PathLine"
                                                Data="{Binding PathGeometryData}"
                                                Opacity="{Binding Opacity}"
                                                Stroke="{Binding ObjectColor}"
                                                StrokeThickness="{Binding StrokeThickness}" />
                                            <TextBlock
                                                Canvas.Left="{Binding ZDisplayX}"
                                                Canvas.Top="{Binding ZDisplayY}"
                                                Width="60"
                                                FontSize="10"
                                                FontWeight="Bold"
                                                IsHitTestVisible="False"
                                                Text="{Binding ZLevel}"
                                                TextAlignment="Center"
                                                Visibility="{Binding DataContext.ShowZ, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}" />
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe}" Value="True">
                                                <Setter TargetName="PathLine" Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect
                                                            BlurRadius="35"
                                                            ShadowDepth="10"
                                                            Color="#FFC0FCFF" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <DataTemplate DataType="{x:Type model:FilledPathLine}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Path
                                                x:Name="FilledPathLine"
                                                Data="{Binding FilledPathGeometryData}"
                                                Opacity="{Binding Opacity}"
                                                Stroke="{Binding ObjectColor}"
                                                StrokeThickness="{Binding StrokeThickness}">
                                                <Path.Fill>
                                                    <SolidColorBrush Color="{Binding FillColor}" />
                                                </Path.Fill>
                                            </Path>
                                            <TextBlock
                                                Canvas.Left="{Binding ZDisplayX}"
                                                Canvas.Top="{Binding ZDisplayY}"
                                                Width="60"
                                                FontSize="10"
                                                FontWeight="Bold"
                                                IsHitTestVisible="False"
                                                Text="{Binding ZLevel}"
                                                TextAlignment="Center"
                                                Visibility="{Binding DataContext.ShowZ, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}" />
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe}" Value="True">
                                                <Setter TargetName="FilledPathLine" Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect
                                                            BlurRadius="35"
                                                            ShadowDepth="10"
                                                            Color="#FFC0FCFF" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <!--  Datatemplate IMAGEOBJECT  -->
                        <DataTemplate DataType="{x:Type model:ImageObject}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Image
                                                Name="ImageObject1"
                                                Canvas.Left="{Binding ImagePositionX}"
                                                Canvas.Top="{Binding ImagePositionY}"
                                                Width="{Binding ImageWidth}"
                                                Height="{Binding ImageHeight}"
                                                VerticalAlignment="Top"
                                                Opacity="{Binding Opacity}"
                                                RenderTransformOrigin="0.5,0.5"
                                                Source="{Binding PictureUrl}"
                                                Stretch="Fill">
                                                <Image.RenderTransform>
                                                    <RotateTransform Angle="{Binding RotateAngle}" />
                                                </Image.RenderTransform>
                                            </Image>
                                            <TextBlock
                                                Canvas.Left="{Binding ZDisplayX}"
                                                Canvas.Top="{Binding ZDisplayY}"
                                                Width="60"
                                                FontSize="10"
                                                FontWeight="Bold"
                                                IsHitTestVisible="False"
                                                Text="{Binding ZLevel}"
                                                TextAlignment="Center"
                                                Visibility="{Binding DataContext.ShowZ, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}" />
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe}" Value="True">
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect
                                                            BlurRadius="35"
                                                            ShadowDepth="10"
                                                            Color="#FFC0FCFF" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <!--  Datatemplate TextLabel Bewegungslänge  -->
                        <DataTemplate DataType="{x:Type model:TextLabel}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Canvas IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Label
                                                Canvas.Left="{Binding LabelPositionX}"
                                                Canvas.Top="{Binding LabelPositionY}"
                                                Width="{Binding LabelWidth}"
                                                Height="{Binding LabelHeight}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                HorizontalContentAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                Background="Transparent"
                                                Content="{Binding TextInLabel, UpdateSourceTrigger=PropertyChanged}"
                                                FontSize="30"
                                                Foreground="White"  
                                                Opacity="{Binding Opacity}"
                                                />
                                        </Canvas>

                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect
                                                            BlurRadius="25"
                                                            ShadowDepth="10"
                                                            Color="Yellow" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <DataTemplate DataType="{x:Type model:MP4Object}" />

                        <!--  Datatemplate RECTANGLE-OBJECT  -->
                        <DataTemplate DataType="{x:Type model:RectangleObject}"/>
                    </ListBox.Resources>

                    <ListBox.Background>
                        <VisualBrush
                            TileMode="Tile"
                            Viewport="{Binding TileViewPort}"
                            ViewportUnits="Absolute">
                            <VisualBrush.Visual>
                                <Path
                                    Data="{Binding TilePathData}"
                                    StrokeDashArray="5 3">
                                    <Path.Style>
                                        <Style TargetType="Path">
                                            <Setter Property="StrokeThickness" Value="3"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RechteckGrid}" Value="true">
                                                    <Setter Property="StrokeThickness" Value="6"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                    <Path.Stroke>
                                        <SolidColorBrush Color="{Binding GridColor, UpdateSourceTrigger=PropertyChanged}" />
                                    </Path.Stroke>
                                </Path>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </ListBox.Background>

                    <ListBox.Template>
                        <ControlTemplate TargetType="ListBox">
                            <Border Background="{TemplateBinding Background}">
                                <ItemsPresenter />
                            </Border>
                        </ControlTemplate>
                    </ListBox.Template>
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas Background="Transparent" IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                </ListBox>
                <Image
                    Name="imgFog2"
                    Width="10000"
                    Height="10000"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Source="{Binding FogImage}"
                    Visibility="{Binding useFog, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter1}}" />
                <s:SpielerPointer Margin="{Binding PointerMargin}" Visibility="{Binding IsPointerVisible, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>
        </Grid>
    </Grid>
</Window>
