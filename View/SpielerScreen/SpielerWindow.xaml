<Window x:Class="MeisterGeister.View.SpielerScreen.SpielerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:System="clr-namespace:System;assembly=mscorlib" 
        xmlns:vmBoden="clr-namespace:MeisterGeister.ViewModel.Bodenplan"
        xmlns:model="clr-namespace:MeisterGeister.ViewModel.Bodenplan.Logic"
        xmlns:kampfInfo="clr-namespace:MeisterGeister.View.Kampf"
        xmlns:Kampf="clr-namespace:MeisterGeister.ViewModel.Kampf.Logic"
        xmlns:ViewGeneral="clr-namespace:MeisterGeister.View.General"
             
        Title="DSA MeisterGeister - Spieler Informationen" Height="559" Width="850" Background="Black" Loaded="Window_Loaded" WindowStyle="None" Topmost="True" KeyDown="Window_KeyDown" Closed="Window_Closed" MouseDoubleClick="Window_MouseDoubleClick">
    <Window.Resources>
        <System:Double x:Key="gridSize">30</System:Double>
        <ViewGeneral:EnumItemsSource x:Key="PositionenValues" Type="{x:Type Kampf:Position}" />
        <ViewGeneral:EqualsMultiConverter x:Key="equalsMultiConverter"/>
        <ViewGeneral:IsEqualOrGreaterThanConverter x:Key="IsEqualOrGreaterThanConverter1"/>
        <model:PositionToImageConverter x:Key="PositionToImageConverter1" />

        <Style TargetType="ProgressBar">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar" >
                        <Grid x:Name="Root">
                            <Border Name="PART_Track" CornerRadius="2" Background="LightGray" BorderBrush="Gray" BorderThickness="1" />
                            <Border Name="PART_Indicator" CornerRadius="1" Background="#FF1FF31F" BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" >
                                <!--<Border.Background>
                                    <LinearGradientBrush  >
                                        <GradientStop Color="Red" Offset="0"/>
                                        <GradientStop Color="Yellow" Offset="0.2"/>
                                        <GradientStop Color="#FF1FF31F" Offset="0.867"/>
                                    </LinearGradientBrush>
                                </Border.Background>-->
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Getting vertical style working using technique described here: http://stackoverflow.com/a/6849237/7532 -->
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter TargetName="Root" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="270" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Root" Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}" />
                                <Setter TargetName="Root" Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
            <ViewGeneral:ImagePathConverter x:Key="ImagePathConverter" />
        </Grid.Resources>
        
        <Grid Name="grdStandard">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding BodenplanActive, UpdateSourceTrigger=PropertyChanged}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <TextBlock Text="In diesem Fenster können Informationen für die Spieler gezeigt werden, falls ein zweiter Bildschirm verwendet wird." FontSize="22" FontWeight="Bold" TextAlignment="Center" TextWrapping="Wrap" Margin="15" Padding="10" Background="{StaticResource BackgroundPergamentQuer}" />
            <Border Grid.Row="1" Background="{StaticResource BackgroundPergamentQuer}" Width="400" Height="250" Padding="20">
                <Image Source="/Images/Logos/MG_Logo.png" Stretch="Uniform" />
            </Border>
        </Grid>


        <Grid Background="#FF367536" Name="grdBodenplan" Visibility="Collapsed">
            <Grid.LayoutTransform>
                <ScaleTransform ScaleX="{Binding ScaleSpielerGrid,UpdateSourceTrigger=PropertyChanged}" ScaleY="{Binding ScaleSpielerGrid,UpdateSourceTrigger=PropertyChanged}" />
            </Grid.LayoutTransform>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding TilePathData, Converter={StaticResource IsNullOrEmptyConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid Name="PlayerArenaGridTop" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="{Binding PlayerOffsetGridMargin, UpdateSourceTrigger=PropertyChanged}">
                <Image Name="imgbtnBGStoppen2" Source="{Binding BackgroundImage}" VerticalAlignment="Top" HorizontalAlignment="Left" 
                               Width="{Binding BackgroundOffsetSize, UpdateSourceTrigger=PropertyChanged}" 
                               Margin="{Binding OffsetBackgroudMargin, UpdateSourceTrigger=PropertyChanged}" />

                <ListBox ItemsSource="{Binding BattlegroundObjects}" SelectedItem="{Binding SelectedObject, Mode=TwoWay}" Name="ArenaGrid2"                              
                                    Height="10000" Width="10000" SelectionMode="Single" >
                    <ListBox.Resources>
                        <!--Datatemplate BattlegroundCreature (Hero & Enemy)-->
                        <DataTemplate DataType="{x:Type model:BattlegroundCreature}">
                            <Thumb DragDelta="Thumb_Drag" 
                                            IsEnabled="{Binding IsSelected,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                                            <!--SightArea-->
                                            <Path IsHitTestVisible="False" StrokeThickness="1" Data="{Binding SightAreaGeometryData}" Opacity="0.2">
                                                <!--Visibility="{Binding , Converter={StaticResource BoolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"-->
                                                <Path.Style>
                                                    <Style TargetType="Path">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                        <Setter Property="Fill" Value="Yellow"/>
                                                        <Setter Property="Stroke" Value="Yellow" />
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DataContext.ShowSightArea, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, UpdateSourceTrigger=PropertyChanged}" Value="True" />
                                                                    <Condition Binding="{Binding ki.IstUnsichtbar}" Value="False" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding ki.Kämpfer.IsHeld}" Value="False">
                                                                <Setter Property="Fill" Value="DarkOrange"/>
                                                                <Setter Property="Stroke" Value="DarkOrange" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Path.Style>
                                            </Path>

                                            <!--Lichtquelle-->
                                            <Ellipse Opacity="0.4" Stroke="#FFF0FC00" StrokeThickness="2" 
                                                Width="{Binding ki.LichtquellePixelRadius}" Height="{Binding ki.LichtquellePixelRadius}"
                                                Canvas.Left="{Binding ki.MidCreatureX}" Canvas.Top="{Binding ki.MidCreatureY}">
                                                <Ellipse.Fill>
                                                    <RadialGradientBrush >
                                                        <GradientStop Color="Transparent" Offset="1"/>
                                                        <GradientStop Color="#FFF0FC00" Offset=".8"/>
                                                    </RadialGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Style>
                                                    <Style TargetType="{x:Type Ellipse}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding ki.LichtquellePixel}" Value="0">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Ellipse.Style>
                                            </Ellipse>

                                            <!--Frame for Heroe Picture-->
                                            <Rectangle RadiusX="12" RadiusY="12" Canvas.Top="{Binding CreatureY}" Canvas.Left="{Binding CreatureX}" Width="{Binding CreatureWidth}" Height="{Binding CreatureHeight}" ToolTip="{Binding Name}">
                                                <Rectangle.Fill>
                                                    <ImageBrush ImageSource="{Binding DataContext.CreaturePictureUrl, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Converter={StaticResource ImagePathConverter}}" Opacity="{Binding Opacity}" Stretch="Fill"/>
                                                </Rectangle.Fill>
                                            </Rectangle>

                                            <Image Source="{Binding CreaturePictureUrl}" Opacity="{Binding Opacity}" Name="ImageObject1" Canvas.Top="{Binding CreatureY}" Canvas.Left="{Binding CreatureX}" Width="{Binding CreatureWidth}" Height="{Binding CreatureHeight}" Stretch="Fill" VerticalAlignment="Top" />

                                            <TextBlock Canvas.Top="{Binding ZDisplayY}" Canvas.Left="{Binding ZDisplayX}" Width="60" TextAlignment="Center" Text="{Binding ZLevel}" FontWeight="Bold" IsHitTestVisible="False" FontSize="10" 
                                                Visibility="{Binding DataContext.ShowZ, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}"/>

                                            <!--HinweisText-->
                                            <TextBlock TextAlignment="Center" FontSize="14" TextWrapping="Wrap" FontStyle="Italic" Background="White" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="140"
                                                               Canvas.Top="{Binding CreatureNameY}" Canvas.Left="{Binding CreatureNameX}"  Margin="0,-220,0,0">
                                                <TextBlock.Style>
                                                    <Style TargetType="{x:Type TextBlock}">
                                                        <Setter Property="Text" Value="{Binding HinweisText, UpdateSourceTrigger=PropertyChanged}" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding HinweisText}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>

                                            <!--Kämpfer-Name-->
                                            <TextBlock Canvas.Top="{Binding CreatureNameY}" Canvas.Left="{Binding CreatureNameX}" Width="160" TextAlignment="Center" FontWeight="Normal" IsHitTestVisible="False" FontSize="17" 
                                                Visibility="{Binding DataContext.ShowCreatureName, RelativeSource={RelativeSource FindAncestor, AncestorType=Window},
                                                            Converter={StaticResource BoolToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                                                Opacity="{Binding Opacity}">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="Text" Value="{Binding KämpferTempName}" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsHeld}" Value="True">
                                                                <Setter Property="Text" Value="{Binding Kurzname}" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>

                                            <!--Lebensbalken-->
                                            <ProgressBar Canvas.Top="{Binding CreatureY}" Canvas.Left="{Binding CreatureX}" Opacity="{Binding Opacity}"
                                                        Height="{Binding CreatureHeight}" Width="10" HorizontalAlignment="Left" Margin="-12,0,0,0"
                                                        Maximum="{Binding LebensenergieMax}" Minimum="0" VerticalAlignment="Top" 
                                                        Value="{Binding LebensenergieAktuell}" Orientation="Vertical" Background="#FF3DD81A" />

                                            <!--Anführer-Krone-->
                                            <Image Width="40" Height="40" Margin="0,-32,0, 0" Source="/DSA%20MeisterGeister;component/Images/Icons/Krone.png"
                                                    Visibility="{Binding ki.IstAnführer, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter1}}"
                                                    Opacity="{Binding Opacity}" Canvas.Top="{Binding CreatureNameY}" Canvas.Left="{Binding CreatureNameX}" />

                                            <!--Position-->
                                            <Image Width="50" Height="50" Source="{Binding Position, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource PositionToImageConverter1}}" 
                                                   Opacity="{Binding Opacity}" Canvas.Top="{Binding CreatureNameY}" Canvas.Left="{Binding CreatureNameX}" />

                                            <!--Wunden - Icon-->
                                            <Image Canvas.Top="{Binding ZDisplayY}" Canvas.Left="{Binding ZDisplayX}" Width="40" Height="40" Source="/DSA MeisterGeister;component/Images/Icons/Schaden.png"
                                                  Opacity="{Binding Opacity}" Margin="-35,30,0,0" >
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Wunden, Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Unlokalisiert], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Kopf], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Brust], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[ArmR], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[ArmL], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[Bauch], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[BeinR], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding WundenByZone[BeinL], Converter={StaticResource IsEqualOrGreaterThanConverter1}, ConverterParameter=1}" Value="True" >
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>

                                            <Canvas.Effect>
                                                <DropShadowEffect Color="{Binding DataContext.Farbmarkierung, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, UpdateSourceTrigger=PropertyChanged}" ShadowDepth="10" BlurRadius="20" />
                                            </Canvas.Effect>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe }" Value="True">
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="#FFC0FCFF" ShadowDepth="10" BlurRadius="35" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <!-- Datatemplate PATHLINE -->
                        <DataTemplate DataType="{x:Type model:PathLine}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}" IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                            <Path Stroke="{Binding ObjectColor}" StrokeThickness="{Binding StrokeThickness}" Data="{Binding PathGeometryData}" x:Name="PathLine" Opacity="{Binding Opacity}" >

                                            </Path>
                                            <TextBlock Canvas.Top="{Binding ZDisplayY}" Canvas.Left="{Binding ZDisplayX}" Width="60" TextAlignment="Center" Text="{Binding ZLevel}" FontWeight="Bold" FontSize="10" 
                                           IsHitTestVisible="False" 
                                           Visibility="{Binding DataContext.ShowZ, 
                                                                    RelativeSource={RelativeSource FindAncestor, AncestorType=Window},
                                                                    Converter={StaticResource BoolToVisibilityConverter}}"/>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe }" Value="True">
                                                <!--IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}-->
                                                <Setter Property="Effect" TargetName="PathLine">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="#FFC0FCFF" ShadowDepth="10" BlurRadius="35" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <DataTemplate DataType="{x:Type model:FilledPathLine}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}" IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                            <Path Stroke="{Binding ObjectColor}" StrokeThickness="{Binding StrokeThickness}" Data="{Binding FilledPathGeometryData}" x:Name="FilledPathLine" Opacity="{Binding Opacity}">
                                                <Path.Fill>
                                                    <SolidColorBrush Color="{Binding FillColor}" />
                                                </Path.Fill>
                                            </Path>
                                            <TextBlock Canvas.Top="{Binding ZDisplayY}" Canvas.Left="{Binding ZDisplayX}" Width="60" TextAlignment="Center" Text="{Binding ZLevel}" FontWeight="Bold" IsHitTestVisible="False" FontSize="10" 
                                           Visibility="{Binding DataContext.ShowZ, 
                                                                    RelativeSource={RelativeSource FindAncestor, AncestorType=Window},
                                                                    Converter={StaticResource BoolToVisibilityConverter}}"/>
                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe }" Value="True">
                                                <!--IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}-->
                                                <Setter Property="Effect" TargetName="FilledPathLine">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="#FFC0FCFF" ShadowDepth="10" BlurRadius="35" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>

                        <!-- Datatemplate IMAGEOBJECT -->
                        <DataTemplate DataType="{x:Type model:ImageObject}">
                            <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Canvas Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}" IsHitTestVisible="{Binding DataContext.IsEditorModeEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                            <Image RenderTransformOrigin="0.5,0.5" Source="{Binding PictureUrl}" Opacity="{Binding Opacity}" Name="ImageObject1" Canvas.Top="{Binding ImagePositionY}" Canvas.Left="{Binding ImagePositionX}" Width="{Binding ImageWidth}" Height="{Binding ImageHeight}" Stretch="Fill" VerticalAlignment="Top" >
                                                <Image.RenderTransform>
                                                    <RotateTransform Angle="{Binding RotateAngle}" />
                                                </Image.RenderTransform>
                                            </Image>
                                            <TextBlock Canvas.Top="{Binding ZDisplayY}" Canvas.Left="{Binding ZDisplayX}" Width="60" TextAlignment="Center" Text="{Binding ZLevel}" FontWeight="Bold" IsHitTestVisible="False" FontSize="10" 
                                                                    Visibility="{Binding DataContext.ShowZ, 
                                                                    RelativeSource={RelativeSource FindAncestor, AncestorType=Window},
                                                                    Converter={StaticResource BoolToVisibilityConverter}}"/>

                                        </Canvas>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsAnDerReihe }" Value="True">
                                                <!--IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}-->
                                                <Setter Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="#FFC0FCFF" ShadowDepth="10" BlurRadius="35" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>
                    </ListBox.Resources>


                    <ListBox.Background>
                        <!--<Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" Opacity=".3">
                                            <GradientStop Color="White" Offset="0" />
                                            <GradientStop Color="GhostWhite" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>-->

                        <!-- Hexgrid -->
                        <VisualBrush TileMode="Tile" Viewport="{Binding TileViewPort}" ViewportUnits="Absolute">
                            <VisualBrush.Visual>
                                <Path StrokeThickness="3" StrokeDashArray="5 3" Data="{Binding TilePathData}">
                                    <Path.Stroke>
                                        <SolidColorBrush Color="{Binding GridColor, UpdateSourceTrigger=PropertyChanged}" />
                                    </Path.Stroke>
                                </Path>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </ListBox.Background>

                    <ListBox.Template>
                        <ControlTemplate TargetType="ListBox">
                            <Border Background="{TemplateBinding Background}">
                                <ItemsPresenter/>
                            </Border>
                        </ControlTemplate>
                    </ListBox.Template>
                    <!--<ListBox.Template>
                        <ControlTemplate>
                            <Border>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" Opacity=".3">
                                        <GradientStop Color="White" Offset="0" />
                                        <GradientStop Color="GhostWhite" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border>
                                    <Border.Background>
                                        -->
                    <!-- Hexgrid -->
                    <!--
                                        <VisualBrush TileMode="Tile" Viewport="0,0,200,200" ViewportUnits="Absolute">
                                            <VisualBrush.Visual>
                                                -->
                    <!--<Rectangle Stroke="Darkgray" StrokeThickness="1" Height="50" Width="50" StrokeDashArray="5 3" />-->
                    <!--
                                                <Path StrokeThickness="3" StrokeDashArray="5 3" Data="{Binding TilePathData}" 
                                                        Stroke="{Binding GridColor, UpdateSourceTrigger=PropertyChanged}" />
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.Background>
                                    <ItemsPresenter />
                                </Border>
                            </Border>
                        </ControlTemplate>
                    </ListBox.Template>-->
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas IsItemsHost="True" Background="Transparent"></Canvas>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                </ListBox>
                <Image Name="imgFog2" Source="{Binding FogImage}" VerticalAlignment="Top" HorizontalAlignment="Left" Width="10000" Height="10000"
                                Visibility="{Binding useFog, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter1}}"/>
            </Grid>
        </Grid>
    </Grid>
</Window>
