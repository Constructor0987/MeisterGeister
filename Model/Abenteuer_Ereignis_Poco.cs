//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Abenteuer_Ereignis : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid EreignisGUID
        {
            get { return _ereignisGUID; }
            set
    		{ 
    			_ereignisGUID = value;
    			NotifyPropertyChanged("EreignisGUID");
    		}
    
        }
        private System.Guid _ereignisGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid SzeneGUID
        {
            get { return _szeneGUID; }
            set
            {
                if (_szeneGUID != value)
                {
                    if (Abenteuer_Szene != null && Abenteuer_Szene.SzeneGUID != value)
                    {
                        Abenteuer_Szene = null;
                    }
                    _szeneGUID = value;
                }
            }
    
        }
        private System.Guid _szeneGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			_name = value;
    			NotifyPropertyChanged("Name");
    		}
    
        }
        private string _name;

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual Abenteuer_Szene Abenteuer_Szene
        {
            get { return _abenteuer_Szene; }
            set
            {
                if (!ReferenceEquals(_abenteuer_Szene, value))
                {
                    var previousValue = _abenteuer_Szene;
                    _abenteuer_Szene = value;
                    FixupAbenteuer_Szene(previousValue);
                }
            }
        }
        private Abenteuer_Szene _abenteuer_Szene;
    
    	[DataMember]
        public virtual ICollection<Abenteuer_Verweis> Abenteuer_Verweis
        {
            get
            {
                if (_abenteuer_Verweis == null)
                {
                    var newCollection = new FixupCollection<Abenteuer_Verweis>();
                    newCollection.CollectionChanged += FixupAbenteuer_Verweis;
                    _abenteuer_Verweis = newCollection;
                }
                return _abenteuer_Verweis;
            }
            set
            {
                if (!ReferenceEquals(_abenteuer_Verweis, value))
                {
                    var previousValue = _abenteuer_Verweis as FixupCollection<Abenteuer_Verweis>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAbenteuer_Verweis;
                    }
                    _abenteuer_Verweis = value;
                    var newValue = value as FixupCollection<Abenteuer_Verweis>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAbenteuer_Verweis;
                    }
                }
            }
        }
        private ICollection<Abenteuer_Verweis> _abenteuer_Verweis;
    
    	[DataMember]
        public virtual ICollection<Abenteuer_Verweis> Abenteuer_Verweis1
        {
            get
            {
                if (_abenteuer_Verweis1 == null)
                {
                    var newCollection = new FixupCollection<Abenteuer_Verweis>();
                    newCollection.CollectionChanged += FixupAbenteuer_Verweis1;
                    _abenteuer_Verweis1 = newCollection;
                }
                return _abenteuer_Verweis1;
            }
            set
            {
                if (!ReferenceEquals(_abenteuer_Verweis1, value))
                {
                    var previousValue = _abenteuer_Verweis1 as FixupCollection<Abenteuer_Verweis>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAbenteuer_Verweis1;
                    }
                    _abenteuer_Verweis1 = value;
                    var newValue = value as FixupCollection<Abenteuer_Verweis>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAbenteuer_Verweis1;
                    }
                }
            }
        }
        private ICollection<Abenteuer_Verweis> _abenteuer_Verweis1;

        #endregion
        #region Association Fixup
    
        private void FixupAbenteuer_Szene(Abenteuer_Szene previousValue)
        {
    		NotifyPropertyChanged("Abenteuer_Szene");
            if (previousValue != null && previousValue.Abenteuer_Ereignis.Contains(this))
            {
                previousValue.Abenteuer_Ereignis.Remove(this);
            }
    
            if (Abenteuer_Szene != null)
            {
                if (!Abenteuer_Szene.Abenteuer_Ereignis.Contains(this))
                {
                    Abenteuer_Szene.Abenteuer_Ereignis.Add(this);
                }
                if (SzeneGUID != Abenteuer_Szene.SzeneGUID)
                {
                    SzeneGUID = Abenteuer_Szene.SzeneGUID;
                }
            }
        }
    
        private void FixupAbenteuer_Verweis(object sender, NotifyCollectionChangedEventArgs e)
        {
    		NotifyPropertyChanged("Abenteuer_Verweis");
            if (e.NewItems != null)
            {
                foreach (Abenteuer_Verweis item in e.NewItems)
                {
                    item.Abenteuer_Ereignis = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Abenteuer_Verweis item in e.OldItems)
                {
                    if (ReferenceEquals(item.Abenteuer_Ereignis, this))
                    {
                        item.Abenteuer_Ereignis = null;
                    }
                }
            }
        }
    
        private void FixupAbenteuer_Verweis1(object sender, NotifyCollectionChangedEventArgs e)
        {
    		NotifyPropertyChanged("Abenteuer_Verweis1");
            if (e.NewItems != null)
            {
                foreach (Abenteuer_Verweis item in e.NewItems)
                {
                    item.Abenteuer_Ereignis1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Abenteuer_Verweis item in e.OldItems)
                {
                    if (ReferenceEquals(item.Abenteuer_Ereignis1, this))
                    {
                        item.Abenteuer_Ereignis1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
