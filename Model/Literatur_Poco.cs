//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Literatur : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid LiteraturGUID
        {
            get { return _literaturGUID; }
            set
    		{ 
    			Set(ref _literaturGUID, value);
    		}
    
        }
        private System.Guid _literaturGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			Set(ref _name, value);
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Abkürzung
        {
            get { return _abkürzung; }
            set
    		{ 
    			Set(ref _abkürzung, value);
    		}
    
        }
        private string _abkürzung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Pfad
        {
            get { return _pfad; }
            set
    		{ 
    			Set(ref _pfad, value);
    		}
    
        }
        private string _pfad;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Seitenoffset
        {
            get { return _seitenoffset; }
            set
    		{ 
    			Set(ref _seitenoffset, value);
    		}
    
        }
        private int _seitenoffset;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Größe
        {
            get { return _größe; }
            set
    		{ 
    			Set(ref _größe, value);
    		}
    
        }
        private Nullable<double> _größe;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> GrößeKomprimiert
        {
            get { return _größeKomprimiert; }
            set
    		{ 
    			Set(ref _größeKomprimiert, value);
    		}
    
        }
        private Nullable<double> _größeKomprimiert;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string UrlPdf
        {
            get { return _urlPdf; }
            set
    		{ 
    			Set(ref _urlPdf, value);
    		}
    
        }
        private string _urlPdf;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string UrlPrint
        {
            get { return _urlPrint; }
            set
    		{ 
    			Set(ref _urlPrint, value);
    		}
    
        }
        private string _urlPrint;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Regelsystem
        {
            get { return _regelsystem; }
            set
    		{ 
    			Set(ref _regelsystem, value);
    		}
    
        }
        private int _regelsystem;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Nummer
        {
            get { return _nummer; }
            set
    		{ 
    			Set(ref _nummer, value);
    		}
    
        }
        private string _nummer;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Art
        {
            get { return _art; }
            set
    		{ 
    			Set(ref _art, value);
    		}
    
        }
        private string _art;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Reihe
        {
            get { return _reihe; }
            set
    		{ 
    			Set(ref _reihe, value);
    		}
    
        }
        private string _reihe;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Setting
        {
            get { return _setting; }
            set
    		{ 
    			Set(ref _setting, value);
    		}
    
        }
        private string _setting;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Box
        {
            get { return _box; }
            set
    		{ 
    			Set(ref _box, value);
    		}
    
        }
        private string _box;

        #endregion

    }
}
