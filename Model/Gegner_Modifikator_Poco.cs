//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Gegner_Modifikator : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long Id
        {
            get { return _id; }
            set
    		{ 
    			Set(ref _id, value);
    		}
    
        }
        private long _id;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid GegnerGUID
        {
            get { return _gegnerGUID; }
            set
            {
                if (_gegnerGUID != value)
                {
                    if (Gegner != null && Gegner.GegnerGUID != value)
                    {
                        Gegner = null;
                    }
                    _gegnerGUID = value;
                }
            }
    
        }
        private System.Guid _gegnerGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid ModifikatorGUID
        {
            get { return _modifikatorGUID; }
            set
            {
                if (_modifikatorGUID != value)
                {
                    if (Modifikator != null && Modifikator.ModifikatorGUID != value)
                    {
                        Modifikator = null;
                    }
                    _modifikatorGUID = value;
                }
            }
    
        }
        private System.Guid _modifikatorGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Wert1
        {
            get { return _wert1; }
            set
    		{ 
    			Set(ref _wert1, value);
    		}
    
        }
        private Nullable<int> _wert1;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Wert2
        {
            get { return _wert2; }
            set
    		{ 
    			Set(ref _wert2, value);
    		}
    
        }
        private Nullable<int> _wert2;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Wert3
        {
            get { return _wert3; }
            set
    		{ 
    			Set(ref _wert3, value);
    		}
    
        }
        private Nullable<int> _wert3;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.DateTime Erstellt
        {
            get { return _erstellt; }
            set
    		{ 
    			Set(ref _erstellt, value);
    		}
    
        }
        private System.DateTime _erstellt;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Gegner Gegner
        {
            get { return _gegner; }
            set
            {
                if (!ReferenceEquals(_gegner, value))
                {
                    var previousValue = _gegner;
                    _gegner = value;
                    FixupGegner(previousValue);
                }
            }
        }
        private Gegner _gegner;
    
    	[DataMember]
        public virtual Modifikator Modifikator
        {
            get { return _modifikator; }
            set
            {
                if (!ReferenceEquals(_modifikator, value))
                {
                    var previousValue = _modifikator;
                    _modifikator = value;
                    FixupModifikator(previousValue);
                }
            }
        }
        private Modifikator _modifikator;

        #endregion

        #region Association Fixup
    
        private void FixupGegner(Gegner previousValue)
        {
    		OnChanged("Gegner");
            if (previousValue != null && previousValue.Gegner_Modifikator.Contains(this))
            {
                previousValue.Gegner_Modifikator.Remove(this);
            }
    
            if (Gegner != null)
            {
                if (!Gegner.Gegner_Modifikator.Contains(this))
                {
                    Gegner.Gegner_Modifikator.Add(this);
                }
                if (GegnerGUID != Gegner.GegnerGUID)
                {
                    GegnerGUID = Gegner.GegnerGUID;
                }
            }
        }
    
        private void FixupModifikator(Modifikator previousValue)
        {
    		OnChanged("Modifikator");
            if (previousValue != null && previousValue.Gegner_Modifikator.Contains(this))
            {
                previousValue.Gegner_Modifikator.Remove(this);
            }
    
            if (Modifikator != null)
            {
                if (!Modifikator.Gegner_Modifikator.Contains(this))
                {
                    Modifikator.Gegner_Modifikator.Add(this);
                }
                if (ModifikatorGUID != Modifikator.ModifikatorGUID)
                {
                    ModifikatorGUID = Modifikator.ModifikatorGUID;
                }
            }
        }

        #endregion

    }
}
