//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Zauberzeichen : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid ZauberzeichenGUID
        {
            get { return _zauberzeichenGUID; }
            set
    		{ 
    			Set(ref _zauberzeichenGUID, value);
    		}
    
        }
        private System.Guid _zauberzeichenGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			Set(ref _name, value);
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Typ
        {
            get { return _typ; }
            set
    		{ 
    			Set(ref _typ, value);
    		}
    
        }
        private string _typ;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid SonderfertigkeitGUID
        {
            get { return _sonderfertigkeitGUID; }
            set
            {
                if (_sonderfertigkeitGUID != value)
                {
                    if (Sonderfertigkeit != null && Sonderfertigkeit.SonderfertigkeitGUID != value)
                    {
                        Sonderfertigkeit = null;
                    }
                    _sonderfertigkeitGUID = value;
                }
            }
    
        }
        private System.Guid _sonderfertigkeitGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Lernkosten
        {
            get { return _lernkosten; }
            set
    		{ 
    			Set(ref _lernkosten, value);
    		}
    
        }
        private int _lernkosten;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Komplexit채t
        {
            get { return _komplexit채t; }
            set
    		{ 
    			Set(ref _komplexit채t, value);
    		}
    
        }
        private int _komplexit채t;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Merkmal
        {
            get { return _merkmal; }
            set
    		{ 
    			Set(ref _merkmal, value);
    		}
    
        }
        private string _merkmal;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual double ReichweitenDivisor
        {
            get { return _reichweitenDivisor; }
            set
    		{ 
    			Set(ref _reichweitenDivisor, value);
    		}
    
        }
        private double _reichweitenDivisor;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			Set(ref _bemerkung, value);
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Komponenten
        {
            get { return _komponenten; }
            set
    		{ 
    			Set(ref _komponenten, value);
    		}
    
        }
        private string _komponenten;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			Set(ref _literatur, value);
    		}
    
        }
        private string _literatur;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Sonderfertigkeit Sonderfertigkeit
        {
            get { return _sonderfertigkeit; }
            set
            {
                if (!ReferenceEquals(_sonderfertigkeit, value))
                {
                    var previousValue = _sonderfertigkeit;
                    _sonderfertigkeit = value;
                    FixupSonderfertigkeit(previousValue);
                }
            }
        }
        private Sonderfertigkeit _sonderfertigkeit;
    
    	[DataMember]
        public virtual ICollection<Zauberzeichen_Setting> Zauberzeichen_Setting
        {
            get
            {
                if (_zauberzeichen_Setting == null)
                {
                    var newCollection = new FixupCollection<Zauberzeichen_Setting>();
                    newCollection.CollectionChanged += FixupZauberzeichen_Setting;
                    _zauberzeichen_Setting = newCollection;
                }
                return _zauberzeichen_Setting;
            }
            set
            {
                if (!ReferenceEquals(_zauberzeichen_Setting, value))
                {
                    var previousValue = _zauberzeichen_Setting as FixupCollection<Zauberzeichen_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupZauberzeichen_Setting;
                    }
                    _zauberzeichen_Setting = value;
                    var newValue = value as FixupCollection<Zauberzeichen_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupZauberzeichen_Setting;
                    }
                }
            }
        }
        private ICollection<Zauberzeichen_Setting> _zauberzeichen_Setting;

        #endregion

        #region Association Fixup
    
        private void FixupSonderfertigkeit(Sonderfertigkeit previousValue)
        {
    		OnChanged("Sonderfertigkeit");
            if (previousValue != null && previousValue.Zauberzeichen.Contains(this))
            {
                previousValue.Zauberzeichen.Remove(this);
            }
    
            if (Sonderfertigkeit != null)
            {
                if (!Sonderfertigkeit.Zauberzeichen.Contains(this))
                {
                    Sonderfertigkeit.Zauberzeichen.Add(this);
                }
                if (SonderfertigkeitGUID != Sonderfertigkeit.SonderfertigkeitGUID)
                {
                    SonderfertigkeitGUID = Sonderfertigkeit.SonderfertigkeitGUID;
                }
            }
        }
    
        private void FixupZauberzeichen_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Zauberzeichen_Setting");
            if (e.NewItems != null)
            {
                foreach (Zauberzeichen_Setting item in e.NewItems)
                {
                    item.Zauberzeichen = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Zauberzeichen_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Zauberzeichen, this))
                    {
                        item.Zauberzeichen = null;
                    }
                }
            }
        }

        #endregion

    }
}
