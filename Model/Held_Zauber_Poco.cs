//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Held_Zauber : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid HeldGUID
        {
            get { return _heldGUID; }
            set
            {
                if (_heldGUID != value)
                {
                    if (Held != null && Held.HeldGUID != value)
                    {
                        Held = null;
                    }
                    _heldGUID = value;
                }
            }
    
        }
        private System.Guid _heldGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int ZauberID
        {
            get { return _zauberID; }
            set
            {
                if (_zauberID != value)
                {
                    if (Zauber != null && Zauber.ZauberID != value)
                    {
                        Zauber = null;
                    }
                    _zauberID = value;
                }
            }
    
        }
        private int _zauberID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> ZfW
        {
            get { return _zfW; }
            set
    		{ 
    			_zfW = value;
    			NotifyPropertyChanged("ZfW");
    		}
    
        }
        private Nullable<int> _zfW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Repräsentation
        {
            get { return _repräsentation; }
            set
    		{ 
    			_repräsentation = value;
    			NotifyPropertyChanged("Repräsentation");
    		}
    
        }
        private string _repräsentation;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			_bemerkung = value;
    			NotifyPropertyChanged("Bemerkung");
    		}
    
        }
        private string _bemerkung;

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual Held Held
        {
            get { return _held; }
            set
            {
                if (!ReferenceEquals(_held, value))
                {
                    var previousValue = _held;
                    _held = value;
                    FixupHeld(previousValue);
                }
            }
        }
        private Held _held;
    
    	[DataMember]
        public virtual Zauber Zauber
        {
            get { return _zauber; }
            set
            {
                if (!ReferenceEquals(_zauber, value))
                {
                    var previousValue = _zauber;
                    _zauber = value;
                    FixupZauber(previousValue);
                }
            }
        }
        private Zauber _zauber;

        #endregion
        #region Association Fixup
    
        private void FixupHeld(Held previousValue)
        {
    		NotifyPropertyChanged("Held");
            if (previousValue != null && previousValue.Held_Zauber.Contains(this))
            {
                previousValue.Held_Zauber.Remove(this);
            }
    
            if (Held != null)
            {
                if (!Held.Held_Zauber.Contains(this))
                {
                    Held.Held_Zauber.Add(this);
                }
                if (HeldGUID != Held.HeldGUID)
                {
                    HeldGUID = Held.HeldGUID;
                }
            }
        }
    
        private void FixupZauber(Zauber previousValue)
        {
    		NotifyPropertyChanged("Zauber");
            if (previousValue != null && previousValue.Held_Zauber.Contains(this))
            {
                previousValue.Held_Zauber.Remove(this);
            }
    
            if (Zauber != null)
            {
                if (!Zauber.Held_Zauber.Contains(this))
                {
                    Zauber.Held_Zauber.Add(this);
                }
                if (ZauberID != Zauber.ZauberID)
                {
                    ZauberID = Zauber.ZauberID;
                }
            }
        }

        #endregion
    }
}
