//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Strecke : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long ID
        {
            get { return _iD; }
            set
    		{ 
    			Set(ref _iD, value);
    		}
    
        }
        private long _iD;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long Start
        {
            get { return _start; }
            set
            {
                if (_start != value)
                {
                    if (StartOrt != null && StartOrt.ID != value)
                    {
                        StartOrt = null;
                    }
                    _start = value;
                }
            }
    
        }
        private long _start;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long Ziel
        {
            get { return _ziel; }
            set
            {
                if (_ziel != value)
                {
                    if (ZielOrt != null && ZielOrt.ID != value)
                    {
                        ZielOrt = null;
                    }
                    _ziel = value;
                }
            }
    
        }
        private long _ziel;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual double Strecke1
        {
            get { return _strecke1; }
            set
    		{ 
    			Set(ref _strecke1, value);
    		}
    
        }
        private double _strecke1;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Typ
        {
            get { return _typ; }
            set
            {
                if (_typ != value)
                {
                    if (Wegtyp != null && Wegtyp.ID != value)
                    {
                        Wegtyp = null;
                    }
                    _typ = value;
                }
            }
    
        }
        private int _typ;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Ort StartOrt
        {
            get { return _startOrt; }
            set
            {
                if (!ReferenceEquals(_startOrt, value))
                {
                    var previousValue = _startOrt;
                    _startOrt = value;
                    FixupStartOrt(previousValue);
                }
            }
        }
        private Ort _startOrt;
    
    	[DataMember]
        public virtual Ort ZielOrt
        {
            get { return _zielOrt; }
            set
            {
                if (!ReferenceEquals(_zielOrt, value))
                {
                    var previousValue = _zielOrt;
                    _zielOrt = value;
                    FixupZielOrt(previousValue);
                }
            }
        }
        private Ort _zielOrt;
    
    	[DataMember]
        public virtual Wegtyp Wegtyp
        {
            get { return _wegtyp; }
            set
            {
                if (!ReferenceEquals(_wegtyp, value))
                {
                    var previousValue = _wegtyp;
                    _wegtyp = value;
                    FixupWegtyp(previousValue);
                }
            }
        }
        private Wegtyp _wegtyp;
    
    	[DataMember]
        public virtual ICollection<Weg> Weg
        {
            get
            {
                if (_weg == null)
                {
                    var newCollection = new FixupCollection<Weg>();
                    newCollection.CollectionChanged += FixupWeg;
                    _weg = newCollection;
                }
                return _weg;
            }
            set
            {
                if (!ReferenceEquals(_weg, value))
                {
                    var previousValue = _weg as FixupCollection<Weg>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWeg;
                    }
                    _weg = value;
                    var newValue = value as FixupCollection<Weg>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWeg;
                    }
                }
            }
        }
        private ICollection<Weg> _weg;

        #endregion

        #region Association Fixup
    
        private void FixupStartOrt(Ort previousValue)
        {
    		OnChanged("StartOrt");
            if (previousValue != null && previousValue.StartStrecke.Contains(this))
            {
                previousValue.StartStrecke.Remove(this);
            }
    
            if (StartOrt != null)
            {
                if (!StartOrt.StartStrecke.Contains(this))
                {
                    StartOrt.StartStrecke.Add(this);
                }
                if (Start != StartOrt.ID)
                {
                    Start = StartOrt.ID;
                }
            }
        }
    
        private void FixupZielOrt(Ort previousValue)
        {
    		OnChanged("ZielOrt");
            if (previousValue != null && previousValue.ZielStrecke.Contains(this))
            {
                previousValue.ZielStrecke.Remove(this);
            }
    
            if (ZielOrt != null)
            {
                if (!ZielOrt.ZielStrecke.Contains(this))
                {
                    ZielOrt.ZielStrecke.Add(this);
                }
                if (Ziel != ZielOrt.ID)
                {
                    Ziel = ZielOrt.ID;
                }
            }
        }
    
        private void FixupWegtyp(Wegtyp previousValue)
        {
    		OnChanged("Wegtyp");
            if (previousValue != null && previousValue.Strecke.Contains(this))
            {
                previousValue.Strecke.Remove(this);
            }
    
            if (Wegtyp != null)
            {
                if (!Wegtyp.Strecke.Contains(this))
                {
                    Wegtyp.Strecke.Add(this);
                }
                if (Typ != Wegtyp.ID)
                {
                    Typ = Wegtyp.ID;
                }
            }
        }
    
        private void FixupWeg(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Weg");
            if (e.NewItems != null)
            {
                foreach (Weg item in e.NewItems)
                {
                    item.Strecke1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Weg item in e.OldItems)
                {
                    if (ReferenceEquals(item.Strecke1, this))
                    {
                        item.Strecke1 = null;
                    }
                }
            }
        }

        #endregion

    }
}
