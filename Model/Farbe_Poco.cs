//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Farbe : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(String propertyName, object currentValue, object newValue)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long FarbeID
        {
            get { return _farbeID; }
            set
    		{ 
    			OnValidatePropertyChanging("FarbeID",_farbeID, value);
    			_farbeID = value;
    			OnChanged("FarbeID");
    		}
    
        }
        private long _farbeID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			OnValidatePropertyChanging("Name",_name, value);
    			_name = value;
    			OnChanged("Name");
    		}
    
        }
        private string _name;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Rasse_Farbe> Rasse_Farbe
        {
            get
            {
                if (_rasse_Farbe == null)
                {
                    var newCollection = new FixupCollection<Rasse_Farbe>();
                    newCollection.CollectionChanged += FixupRasse_Farbe;
                    _rasse_Farbe = newCollection;
                }
                return _rasse_Farbe;
            }
            set
            {
                if (!ReferenceEquals(_rasse_Farbe, value))
                {
                    var previousValue = _rasse_Farbe as FixupCollection<Rasse_Farbe>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRasse_Farbe;
                    }
                    _rasse_Farbe = value;
                    var newValue = value as FixupCollection<Rasse_Farbe>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRasse_Farbe;
                    }
                }
            }
        }
        private ICollection<Rasse_Farbe> _rasse_Farbe;

        #endregion

        #region Association Fixup
    
        private void FixupRasse_Farbe(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Rasse_Farbe");
            if (e.NewItems != null)
            {
                foreach (Rasse_Farbe item in e.NewItems)
                {
                    item.Farbe = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rasse_Farbe item in e.OldItems)
                {
                    if (ReferenceEquals(item.Farbe, this))
                    {
                        item.Farbe = null;
                    }
                }
            }
        }

        #endregion

    }
}
