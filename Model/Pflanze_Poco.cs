//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Pflanze : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid PflanzeGUID
        {
            get { return _pflanzeGUID; }
            set
    		{ 
    			Set(ref _pflanzeGUID, value);
    		}
    
        }
        private System.Guid _pflanzeGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual short Bestimmung
        {
            get { return _bestimmung; }
            set
    		{ 
    			Set(ref _bestimmung, value);
    		}
    
        }
        private short _bestimmung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> AusnahmeVon
        {
            get { return _ausnahmeVon; }
            set
    		{ 
    			Set(ref _ausnahmeVon, value);
    		}
    
        }
        private Nullable<double> _ausnahmeVon;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> AusnahmeBis
        {
            get { return _ausnahmeBis; }
            set
    		{ 
    			Set(ref _ausnahmeBis, value);
    		}
    
        }
        private Nullable<double> _ausnahmeBis;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			Set(ref _name, value);
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			Set(ref _bemerkung, value);
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			Set(ref _literatur, value);
    		}
    
        }
        private string _literatur;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<short> BestimmungAusname2
        {
            get { return _bestimmungAusname2; }
            set
    		{ 
    			Set(ref _bestimmungAusname2, value);
    		}
    
        }
        private Nullable<short> _bestimmungAusname2;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Ausnahme2Grund
        {
            get { return _ausnahme2Grund; }
            set
    		{ 
    			Set(ref _ausnahme2Grund, value);
    		}
    
        }
        private string _ausnahme2Grund;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Ausnahme2Von
        {
            get { return _ausnahme2Von; }
            set
    		{ 
    			Set(ref _ausnahme2Von, value);
    		}
    
        }
        private Nullable<double> _ausnahme2Von;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Ausnahme2Bis
        {
            get { return _ausnahme2Bis; }
            set
    		{ 
    			Set(ref _ausnahme2Bis, value);
    		}
    
        }
        private Nullable<double> _ausnahme2Bis;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string AusnameGrund
        {
            get { return _ausnameGrund; }
            set
    		{ 
    			Set(ref _ausnameGrund, value);
    		}
    
        }
        private string _ausnameGrund;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<short> BestimmungAusnahme
        {
            get { return _bestimmungAusnahme; }
            set
    		{ 
    			Set(ref _bestimmungAusnahme, value);
    		}
    
        }
        private Nullable<short> _bestimmungAusnahme;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Held_Pflanze> Held_Pflanze
        {
            get
            {
                if (_held_Pflanze == null)
                {
                    var newCollection = new FixupCollection<Held_Pflanze>();
                    newCollection.CollectionChanged += FixupHeld_Pflanze;
                    _held_Pflanze = newCollection;
                }
                return _held_Pflanze;
            }
            set
            {
                if (!ReferenceEquals(_held_Pflanze, value))
                {
                    var previousValue = _held_Pflanze as FixupCollection<Held_Pflanze>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHeld_Pflanze;
                    }
                    _held_Pflanze = value;
                    var newValue = value as FixupCollection<Held_Pflanze>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHeld_Pflanze;
                    }
                }
            }
        }
        private ICollection<Held_Pflanze> _held_Pflanze;
    
    	[DataMember]
        public virtual ICollection<Pflanze_Ernte> Pflanze_Ernte
        {
            get
            {
                if (_pflanze_Ernte == null)
                {
                    var newCollection = new FixupCollection<Pflanze_Ernte>();
                    newCollection.CollectionChanged += FixupPflanze_Ernte;
                    _pflanze_Ernte = newCollection;
                }
                return _pflanze_Ernte;
            }
            set
            {
                if (!ReferenceEquals(_pflanze_Ernte, value))
                {
                    var previousValue = _pflanze_Ernte as FixupCollection<Pflanze_Ernte>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPflanze_Ernte;
                    }
                    _pflanze_Ernte = value;
                    var newValue = value as FixupCollection<Pflanze_Ernte>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPflanze_Ernte;
                    }
                }
            }
        }
        private ICollection<Pflanze_Ernte> _pflanze_Ernte;
    
    	[DataMember]
        public virtual ICollection<Pflanze_Typ> Pflanze_Typ
        {
            get
            {
                if (_pflanze_Typ == null)
                {
                    var newCollection = new FixupCollection<Pflanze_Typ>();
                    newCollection.CollectionChanged += FixupPflanze_Typ;
                    _pflanze_Typ = newCollection;
                }
                return _pflanze_Typ;
            }
            set
            {
                if (!ReferenceEquals(_pflanze_Typ, value))
                {
                    var previousValue = _pflanze_Typ as FixupCollection<Pflanze_Typ>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPflanze_Typ;
                    }
                    _pflanze_Typ = value;
                    var newValue = value as FixupCollection<Pflanze_Typ>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPflanze_Typ;
                    }
                }
            }
        }
        private ICollection<Pflanze_Typ> _pflanze_Typ;
    
    	[DataMember]
        public virtual ICollection<Pflanze_Verbreitung> Pflanze_Verbreitung
        {
            get
            {
                if (_pflanze_Verbreitung == null)
                {
                    var newCollection = new FixupCollection<Pflanze_Verbreitung>();
                    newCollection.CollectionChanged += FixupPflanze_Verbreitung;
                    _pflanze_Verbreitung = newCollection;
                }
                return _pflanze_Verbreitung;
            }
            set
            {
                if (!ReferenceEquals(_pflanze_Verbreitung, value))
                {
                    var previousValue = _pflanze_Verbreitung as FixupCollection<Pflanze_Verbreitung>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPflanze_Verbreitung;
                    }
                    _pflanze_Verbreitung = value;
                    var newValue = value as FixupCollection<Pflanze_Verbreitung>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPflanze_Verbreitung;
                    }
                }
            }
        }
        private ICollection<Pflanze_Verbreitung> _pflanze_Verbreitung;
    
    	[DataMember]
        public virtual ICollection<Gebiet> Gebiet
        {
            get
            {
                if (_gebiet == null)
                {
                    var newCollection = new FixupCollection<Gebiet>();
                    newCollection.CollectionChanged += FixupGebiet;
                    _gebiet = newCollection;
                }
                return _gebiet;
            }
            set
            {
                if (!ReferenceEquals(_gebiet, value))
                {
                    var previousValue = _gebiet as FixupCollection<Gebiet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGebiet;
                    }
                    _gebiet = value;
                    var newValue = value as FixupCollection<Gebiet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGebiet;
                    }
                }
            }
        }
        private ICollection<Gebiet> _gebiet;

        #endregion

        #region Association Fixup
    
        private void FixupHeld_Pflanze(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Held_Pflanze");
            if (e.NewItems != null)
            {
                foreach (Held_Pflanze item in e.NewItems)
                {
                    item.Pflanze = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Held_Pflanze item in e.OldItems)
                {
                    if (ReferenceEquals(item.Pflanze, this))
                    {
                        item.Pflanze = null;
                    }
                }
            }
        }
    
        private void FixupPflanze_Ernte(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Pflanze_Ernte");
            if (e.NewItems != null)
            {
                foreach (Pflanze_Ernte item in e.NewItems)
                {
                    item.Pflanze = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pflanze_Ernte item in e.OldItems)
                {
                    if (ReferenceEquals(item.Pflanze, this))
                    {
                        item.Pflanze = null;
                    }
                }
            }
        }
    
        private void FixupPflanze_Typ(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Pflanze_Typ");
            if (e.NewItems != null)
            {
                foreach (Pflanze_Typ item in e.NewItems)
                {
                    item.Pflanze = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pflanze_Typ item in e.OldItems)
                {
                    if (ReferenceEquals(item.Pflanze, this))
                    {
                        item.Pflanze = null;
                    }
                }
            }
        }
    
        private void FixupPflanze_Verbreitung(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Pflanze_Verbreitung");
            if (e.NewItems != null)
            {
                foreach (Pflanze_Verbreitung item in e.NewItems)
                {
                    item.Pflanze = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pflanze_Verbreitung item in e.OldItems)
                {
                    if (ReferenceEquals(item.Pflanze, this))
                    {
                        item.Pflanze = null;
                    }
                }
            }
        }
    
        private void FixupGebiet(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Gebiet");
            if (e.NewItems != null)
            {
                foreach (Gebiet item in e.NewItems)
                {
                    if (!item.Pflanze.Contains(this))
                    {
                        item.Pflanze.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Gebiet item in e.OldItems)
                {
                    if (item.Pflanze.Contains(this))
                    {
                        item.Pflanze.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
