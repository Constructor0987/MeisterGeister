//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class GegnerBase_Zauber : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid GegnerBaseGUID
        {
            get { return _gegnerBaseGUID; }
            set
            {
                if (_gegnerBaseGUID != value)
                {
                    if (GegnerBase != null && GegnerBase.GegnerBaseGUID != value)
                    {
                        GegnerBase = null;
                    }
                    _gegnerBaseGUID = value;
                }
            }
    
        }
        private System.Guid _gegnerBaseGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid ZauberGUID
        {
            get { return _zauberGUID; }
            set
            {
                if (_zauberGUID != value)
                {
                    if (Zauber != null && Zauber.ZauberGUID != value)
                    {
                        Zauber = null;
                    }
                    _zauberGUID = value;
                }
            }
    
        }
        private System.Guid _zauberGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> ZfW
        {
            get { return _zfW; }
            set
    		{ 
    			Set(ref _zfW, value);
    		}
    
        }
        private Nullable<int> _zfW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> E1TW
        {
            get { return _e1TW; }
            set
    		{ 
    			Set(ref _e1TW, value);
    		}
    
        }
        private Nullable<int> _e1TW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> E2TW
        {
            get { return _e2TW; }
            set
    		{ 
    			Set(ref _e2TW, value);
    		}
    
        }
        private Nullable<int> _e2TW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> E3TW
        {
            get { return _e3TW; }
            set
    		{ 
    			Set(ref _e3TW, value);
    		}
    
        }
        private Nullable<int> _e3TW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			Set(ref _bemerkung, value);
    		}
    
        }
        private string _bemerkung;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual GegnerBase GegnerBase
        {
            get { return _gegnerBase; }
            set
            {
                if (!ReferenceEquals(_gegnerBase, value))
                {
                    var previousValue = _gegnerBase;
                    _gegnerBase = value;
                    FixupGegnerBase(previousValue);
                }
            }
        }
        private GegnerBase _gegnerBase;
    
    	[DataMember]
        public virtual Zauber Zauber
        {
            get { return _zauber; }
            set
            {
                if (!ReferenceEquals(_zauber, value))
                {
                    var previousValue = _zauber;
                    _zauber = value;
                    FixupZauber(previousValue);
                }
            }
        }
        private Zauber _zauber;

        #endregion

        #region Association Fixup
    
        private void FixupGegnerBase(GegnerBase previousValue)
        {
    		OnChanged("GegnerBase");
            if (previousValue != null && previousValue.GegnerBase_Zauber.Contains(this))
            {
                previousValue.GegnerBase_Zauber.Remove(this);
            }
    
            if (GegnerBase != null)
            {
                if (!GegnerBase.GegnerBase_Zauber.Contains(this))
                {
                    GegnerBase.GegnerBase_Zauber.Add(this);
                }
                if (GegnerBaseGUID != GegnerBase.GegnerBaseGUID)
                {
                    GegnerBaseGUID = GegnerBase.GegnerBaseGUID;
                }
            }
        }
    
        private void FixupZauber(Zauber previousValue)
        {
    		OnChanged("Zauber");
            if (previousValue != null && previousValue.GegnerBase_Zauber.Contains(this))
            {
                previousValue.GegnerBase_Zauber.Remove(this);
            }
    
            if (Zauber != null)
            {
                if (!Zauber.GegnerBase_Zauber.Contains(this))
                {
                    Zauber.GegnerBase_Zauber.Add(this);
                }
                if (ZauberGUID != Zauber.ZauberGUID)
                {
                    ZauberGUID = Zauber.ZauberGUID;
                }
            }
        }

        #endregion

    }
}
