//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Rüstung : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid RüstungGUID
        {
            get { return _rüstungGUID; }
            set
            {
                if (_rüstungGUID != value)
                {
                    if (Ausrüstung != null && Ausrüstung.AusrüstungGUID != value)
                    {
                        Ausrüstung = null;
                    }
                    _rüstungGUID = value;
                }
            }
    
        }
        private System.Guid _rüstungGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Gruppe
        {
            get { return _gruppe; }
            set
    		{ 
    			Set(ref _gruppe, value);
    		}
    
        }
        private string _gruppe;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Verarbeitung
        {
            get { return _verarbeitung; }
            set
    		{ 
    			Set(ref _verarbeitung, value);
    		}
    
        }
        private Nullable<int> _verarbeitung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Art
        {
            get { return _art; }
            set
    		{ 
    			Set(ref _art, value);
    		}
    
        }
        private string _art;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Kopf
        {
            get { return _kopf; }
            set
    		{ 
    			Set(ref _kopf, value);
    		}
    
        }
        private Nullable<int> _kopf;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Brust
        {
            get { return _brust; }
            set
    		{ 
    			Set(ref _brust, value);
    		}
    
        }
        private Nullable<int> _brust;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Rücken
        {
            get { return _rücken; }
            set
    		{ 
    			Set(ref _rücken, value);
    		}
    
        }
        private Nullable<int> _rücken;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Bauch
        {
            get { return _bauch; }
            set
    		{ 
    			Set(ref _bauch, value);
    		}
    
        }
        private Nullable<int> _bauch;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> LArm
        {
            get { return _lArm; }
            set
    		{ 
    			Set(ref _lArm, value);
    		}
    
        }
        private Nullable<int> _lArm;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RArm
        {
            get { return _rArm; }
            set
    		{ 
    			Set(ref _rArm, value);
    		}
    
        }
        private Nullable<int> _rArm;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> LBein
        {
            get { return _lBein; }
            set
    		{ 
    			Set(ref _lBein, value);
    		}
    
        }
        private Nullable<int> _lBein;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RBein
        {
            get { return _rBein; }
            set
    		{ 
    			Set(ref _rBein, value);
    		}
    
        }
        private Nullable<int> _rBein;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RS
        {
            get { return _rS; }
            set
    		{ 
    			Set(ref _rS, value);
    		}
    
        }
        private Nullable<int> _rS;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> BE
        {
            get { return _bE; }
            set
    		{ 
    			Set(ref _bE, value);
    		}
    
        }
        private Nullable<int> _bE;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Steif
        {
            get { return _steif; }
            set
    		{ 
    			Set(ref _steif, value);
    		}
    
        }
        private bool _steif;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Ausrüstung Ausrüstung
        {
            get { return _ausrüstung; }
            set
            {
                if (!ReferenceEquals(_ausrüstung, value))
                {
                    var previousValue = _ausrüstung;
                    _ausrüstung = value;
                    FixupAusrüstung(previousValue);
                }
            }
        }
        private Ausrüstung _ausrüstung;
    
    	[DataMember]
        public virtual ICollection<Held_Rüstung> Held_Rüstung
        {
            get
            {
                if (_held_Rüstung == null)
                {
                    var newCollection = new FixupCollection<Held_Rüstung>();
                    newCollection.CollectionChanged += FixupHeld_Rüstung;
                    _held_Rüstung = newCollection;
                }
                return _held_Rüstung;
            }
            set
            {
                if (!ReferenceEquals(_held_Rüstung, value))
                {
                    var previousValue = _held_Rüstung as FixupCollection<Held_Rüstung>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHeld_Rüstung;
                    }
                    _held_Rüstung = value;
                    var newValue = value as FixupCollection<Held_Rüstung>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHeld_Rüstung;
                    }
                }
            }
        }
        private ICollection<Held_Rüstung> _held_Rüstung;

        #endregion

        #region Association Fixup
    
        private void FixupAusrüstung(Ausrüstung previousValue)
        {
    		OnChanged("Ausrüstung");
            if (previousValue != null && ReferenceEquals(previousValue.Rüstung, this))
            {
                previousValue.Rüstung = null;
            }
    
            if (Ausrüstung != null)
            {
                Ausrüstung.Rüstung = this;
                if (RüstungGUID != Ausrüstung.AusrüstungGUID)
                {
                    RüstungGUID = Ausrüstung.AusrüstungGUID;
                }
            }
        }
    
        private void FixupHeld_Rüstung(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Held_Rüstung");
            if (e.NewItems != null)
            {
                foreach (Held_Rüstung item in e.NewItems)
                {
                    item.Rüstung = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Held_Rüstung item in e.OldItems)
                {
                    if (ReferenceEquals(item.Rüstung, this))
                    {
                        item.Rüstung = null;
                    }
                }
            }
        }

        #endregion

    }
}
