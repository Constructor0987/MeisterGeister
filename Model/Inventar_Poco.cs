//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Inventar : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(String propertyName, object currentValue, object newValue)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid InventarGUID
        {
            get { return _inventarGUID; }
            set
    		{ 
    			OnValidatePropertyChanging("InventarGUID",_inventarGUID, value);
    			_inventarGUID = value;
    			OnChanged("InventarGUID");
    		}
    
        }
        private System.Guid _inventarGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			OnValidatePropertyChanging("Name",_name, value);
    			_name = value;
    			OnChanged("Name");
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Preis
        {
            get { return _preis; }
            set
    		{ 
    			OnValidatePropertyChanging("Preis",_preis, value);
    			_preis = value;
    			OnChanged("Preis");
    		}
    
        }
        private string _preis;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Gewicht
        {
            get { return _gewicht; }
            set
    		{ 
    			OnValidatePropertyChanging("Gewicht",_gewicht, value);
    			_gewicht = value;
    			OnChanged("Gewicht");
    		}
    
        }
        private Nullable<double> _gewicht;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string ME
        {
            get { return _mE; }
            set
    		{ 
    			OnValidatePropertyChanging("ME",_mE, value);
    			_mE = value;
    			OnChanged("ME");
    		}
    
        }
        private string _mE;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Kategorie
        {
            get { return _kategorie; }
            set
    		{ 
    			OnValidatePropertyChanging("Kategorie",_kategorie, value);
    			_kategorie = value;
    			OnChanged("Kategorie");
    		}
    
        }
        private string _kategorie;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Tags
        {
            get { return _tags; }
            set
    		{ 
    			OnValidatePropertyChanging("Tags",_tags, value);
    			_tags = value;
    			OnChanged("Tags");
    		}
    
        }
        private string _tags;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			OnValidatePropertyChanging("Bemerkung",_bemerkung, value);
    			_bemerkung = value;
    			OnChanged("Bemerkung");
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			OnValidatePropertyChanging("Literatur",_literatur, value);
    			_literatur = value;
    			OnChanged("Literatur");
    		}
    
        }
        private string _literatur;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<System.Guid> HandelsgutGUID
        {
            get { return _handelsgutGUID; }
            set
    		{ 
    			OnValidatePropertyChanging("HandelsgutGUID",_handelsgutGUID, value);
    			_handelsgutGUID = value;
    			OnChanged("HandelsgutGUID");
    		}
    
        }
        private Nullable<System.Guid> _handelsgutGUID;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Held_Inventar> Held_Inventar
        {
            get
            {
                if (_held_Inventar == null)
                {
                    var newCollection = new FixupCollection<Held_Inventar>();
                    newCollection.CollectionChanged += FixupHeld_Inventar;
                    _held_Inventar = newCollection;
                }
                return _held_Inventar;
            }
            set
            {
                if (!ReferenceEquals(_held_Inventar, value))
                {
                    var previousValue = _held_Inventar as FixupCollection<Held_Inventar>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHeld_Inventar;
                    }
                    _held_Inventar = value;
                    var newValue = value as FixupCollection<Held_Inventar>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHeld_Inventar;
                    }
                }
            }
        }
        private ICollection<Held_Inventar> _held_Inventar;

        #endregion

        #region Association Fixup
    
        private void FixupHeld_Inventar(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Held_Inventar");
            if (e.NewItems != null)
            {
                foreach (Held_Inventar item in e.NewItems)
                {
                    item.Inventar = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Held_Inventar item in e.OldItems)
                {
                    if (ReferenceEquals(item.Inventar, this))
                    {
                        item.Inventar = null;
                    }
                }
            }
        }

        #endregion

    }
}
