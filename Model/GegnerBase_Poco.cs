//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class GegnerBase : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid GegnerBaseGUID
        {
            get { return _gegnerBaseGUID; }
            set
    		{ 
    			Set(ref _gegnerBaseGUID, value);
    		}
    
        }
        private System.Guid _gegnerBaseGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			Set(ref _name, value);
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Typ
        {
            get { return _typ; }
            set
    		{ 
    			Set(ref _typ, value);
    		}
    
        }
        private string _typ;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bild
        {
            get { return _bild; }
            set
    		{ 
    			Set(ref _bild, value);
    		}
    
        }
        private string _bild;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int INIBasis
        {
            get { return _iNIBasis; }
            set
    		{ 
    			Set(ref _iNIBasis, value);
    		}
    
        }
        private int _iNIBasis;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string INIZufall
        {
            get { return _iNIZufall; }
            set
    		{ 
    			Set(ref _iNIZufall, value);
    		}
    
        }
        private string _iNIZufall;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Aktionen
        {
            get { return _aktionen; }
            set
    		{ 
    			Set(ref _aktionen, value);
    		}
    
        }
        private int _aktionen;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int PA
        {
            get { return _pA; }
            set
    		{ 
    			Set(ref _pA, value);
    		}
    
        }
        private int _pA;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int LE
        {
            get { return _lE; }
            set
    		{ 
    			Set(ref _lE, value);
    		}
    
        }
        private int _lE;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int AU
        {
            get { return _aU; }
            set
    		{ 
    			Set(ref _aU, value);
    		}
    
        }
        private int _aU;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int AE
        {
            get { return _aE; }
            set
    		{ 
    			Set(ref _aE, value);
    		}
    
        }
        private int _aE;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int KE
        {
            get { return _kE; }
            set
    		{ 
    			Set(ref _kE, value);
    		}
    
        }
        private int _kE;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int KO
        {
            get { return _kO; }
            set
    		{ 
    			Set(ref _kO, value);
    		}
    
        }
        private int _kO;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int MRGeist
        {
            get { return _mRGeist; }
            set
    		{ 
    			Set(ref _mRGeist, value);
    		}
    
        }
        private int _mRGeist;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> MRKörper
        {
            get { return _mRKörper; }
            set
    		{ 
    			Set(ref _mRKörper, value);
    		}
    
        }
        private Nullable<int> _mRKörper;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual double GS
        {
            get { return _gS; }
            set
    		{ 
    			Set(ref _gS, value);
    		}
    
        }
        private double _gS;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> GS2
        {
            get { return _gS2; }
            set
    		{ 
    			Set(ref _gS2, value);
    		}
    
        }
        private Nullable<double> _gS2;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> GS3
        {
            get { return _gS3; }
            set
    		{ 
    			Set(ref _gS3, value);
    		}
    
        }
        private Nullable<double> _gS3;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSKopf
        {
            get { return _rSKopf; }
            set
    		{ 
    			Set(ref _rSKopf, value);
    		}
    
        }
        private int _rSKopf;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSBrust
        {
            get { return _rSBrust; }
            set
    		{ 
    			Set(ref _rSBrust, value);
    		}
    
        }
        private int _rSBrust;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSRücken
        {
            get { return _rSRücken; }
            set
    		{ 
    			Set(ref _rSRücken, value);
    		}
    
        }
        private int _rSRücken;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSArmL
        {
            get { return _rSArmL; }
            set
    		{ 
    			Set(ref _rSArmL, value);
    		}
    
        }
        private int _rSArmL;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSArmR
        {
            get { return _rSArmR; }
            set
    		{ 
    			Set(ref _rSArmR, value);
    		}
    
        }
        private int _rSArmR;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSBauch
        {
            get { return _rSBauch; }
            set
    		{ 
    			Set(ref _rSBauch, value);
    		}
    
        }
        private int _rSBauch;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSBeinL
        {
            get { return _rSBeinL; }
            set
    		{ 
    			Set(ref _rSBeinL, value);
    		}
    
        }
        private int _rSBeinL;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int RSBeinR
        {
            get { return _rSBeinR; }
            set
    		{ 
    			Set(ref _rSBeinR, value);
    		}
    
        }
        private int _rSBeinR;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> GW
        {
            get { return _gW; }
            set
    		{ 
    			Set(ref _gW, value);
    		}
    
        }
        private Nullable<int> _gW;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Jagd
        {
            get { return _jagd; }
            set
    		{ 
    			Set(ref _jagd, value);
    		}
    
        }
        private Nullable<int> _jagd;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Beschwörung
        {
            get { return _beschwörung; }
            set
    		{ 
    			Set(ref _beschwörung, value);
    		}
    
        }
        private Nullable<int> _beschwörung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Kontrolle
        {
            get { return _kontrolle; }
            set
    		{ 
    			Set(ref _kontrolle, value);
    		}
    
        }
        private Nullable<int> _kontrolle;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Beschwörungskosten
        {
            get { return _beschwörungskosten; }
            set
    		{ 
    			Set(ref _beschwörungskosten, value);
    		}
    
        }
        private Nullable<int> _beschwörungskosten;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Tags
        {
            get { return _tags; }
            set
    		{ 
    			Set(ref _tags, value);
    		}
    
        }
        private string _tags;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			Set(ref _bemerkung, value);
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			Set(ref _literatur, value);
    		}
    
        }
        private string _literatur;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Setting
        {
            get { return _setting; }
            set
    		{ 
    			Set(ref _setting, value);
    		}
    
        }
        private string _setting;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Verbreitung
        {
            get { return _verbreitung; }
            set
    		{ 
    			Set(ref _verbreitung, value);
    		}
    
        }
        private string _verbreitung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Jagdreaktion
        {
            get { return _jagdreaktion; }
            set
    		{ 
    			Set(ref _jagdreaktion, value);
    		}
    
        }
        private string _jagdreaktion;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Beute
        {
            get { return _beute; }
            set
    		{ 
    			Set(ref _beute, value);
    		}
    
        }
        private string _beute;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Auftreten
        {
            get { return _auftreten; }
            set
    		{ 
    			Set(ref _auftreten, value);
    		}
    
        }
        private string _auftreten;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int AT
        {
            get { return _aT; }
            set
    		{ 
    			Set(ref _aT, value);
    		}
    
        }
        private int _aT;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int FK
        {
            get { return _fK; }
            set
    		{ 
    			Set(ref _fK, value);
    		}
    
        }
        private int _fK;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Gegner> Gegner
        {
            get
            {
                if (_gegner == null)
                {
                    var newCollection = new FixupCollection<Gegner>();
                    newCollection.CollectionChanged += FixupGegner;
                    _gegner = newCollection;
                }
                return _gegner;
            }
            set
            {
                if (!ReferenceEquals(_gegner, value))
                {
                    var previousValue = _gegner as FixupCollection<Gegner>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGegner;
                    }
                    _gegner = value;
                    var newValue = value as FixupCollection<Gegner>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGegner;
                    }
                }
            }
        }
        private ICollection<Gegner> _gegner;
    
    	[DataMember]
        public virtual ICollection<GegnerBase_Angriff> GegnerBase_Angriff
        {
            get
            {
                if (_gegnerBase_Angriff == null)
                {
                    var newCollection = new FixupCollection<GegnerBase_Angriff>();
                    newCollection.CollectionChanged += FixupGegnerBase_Angriff;
                    _gegnerBase_Angriff = newCollection;
                }
                return _gegnerBase_Angriff;
            }
            set
            {
                if (!ReferenceEquals(_gegnerBase_Angriff, value))
                {
                    var previousValue = _gegnerBase_Angriff as FixupCollection<GegnerBase_Angriff>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGegnerBase_Angriff;
                    }
                    _gegnerBase_Angriff = value;
                    var newValue = value as FixupCollection<GegnerBase_Angriff>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGegnerBase_Angriff;
                    }
                }
            }
        }
        private ICollection<GegnerBase_Angriff> _gegnerBase_Angriff;
    
    	[DataMember]
        public virtual ICollection<GegnerBase_Kampfregel> GegnerBase_Kampfregel
        {
            get
            {
                if (_gegnerBase_Kampfregel == null)
                {
                    var newCollection = new FixupCollection<GegnerBase_Kampfregel>();
                    newCollection.CollectionChanged += FixupGegnerBase_Kampfregel;
                    _gegnerBase_Kampfregel = newCollection;
                }
                return _gegnerBase_Kampfregel;
            }
            set
            {
                if (!ReferenceEquals(_gegnerBase_Kampfregel, value))
                {
                    var previousValue = _gegnerBase_Kampfregel as FixupCollection<GegnerBase_Kampfregel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGegnerBase_Kampfregel;
                    }
                    _gegnerBase_Kampfregel = value;
                    var newValue = value as FixupCollection<GegnerBase_Kampfregel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGegnerBase_Kampfregel;
                    }
                }
            }
        }
        private ICollection<GegnerBase_Kampfregel> _gegnerBase_Kampfregel;

        #endregion

        #region Association Fixup
    
        private void FixupGegner(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Gegner");
            if (e.NewItems != null)
            {
                foreach (Gegner item in e.NewItems)
                {
                    item.GegnerBase = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Gegner item in e.OldItems)
                {
                    if (ReferenceEquals(item.GegnerBase, this))
                    {
                        item.GegnerBase = null;
                    }
                }
            }
        }
    
        private void FixupGegnerBase_Angriff(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("GegnerBase_Angriff");
            if (e.NewItems != null)
            {
                foreach (GegnerBase_Angriff item in e.NewItems)
                {
                    item.GegnerBase = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GegnerBase_Angriff item in e.OldItems)
                {
                    if (ReferenceEquals(item.GegnerBase, this))
                    {
                        item.GegnerBase = null;
                    }
                }
            }
        }
    
        private void FixupGegnerBase_Kampfregel(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("GegnerBase_Kampfregel");
            if (e.NewItems != null)
            {
                foreach (GegnerBase_Kampfregel item in e.NewItems)
                {
                    item.GegnerBase = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GegnerBase_Kampfregel item in e.OldItems)
                {
                    if (ReferenceEquals(item.GegnerBase, this))
                    {
                        item.GegnerBase = null;
                    }
                }
            }
        }

        #endregion

    }
}
