//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class GegnerBase_Angriff : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid GegnerBaseGUID
        {
            get { return _gegnerBaseGUID; }
            set
            {
                if (_gegnerBaseGUID != value)
                {
                    if (GegnerBase != null && GegnerBase.GegnerBaseGUID != value)
                    {
                        GegnerBase = null;
                    }
                    _gegnerBaseGUID = value;
                }
            }
    
        }
        private System.Guid _gegnerBaseGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			_name = value;
    			OnChanged("Name");
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int TPWürfel
        {
            get { return _tPWürfel; }
            set
    		{ 
    			_tPWürfel = value;
    			OnChanged("TPWürfel");
    		}
    
        }
        private int _tPWürfel;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int TPWürfelAnzahl
        {
            get { return _tPWürfelAnzahl; }
            set
    		{ 
    			_tPWürfelAnzahl = value;
    			OnChanged("TPWürfelAnzahl");
    		}
    
        }
        private int _tPWürfelAnzahl;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int TPBonus
        {
            get { return _tPBonus; }
            set
    		{ 
    			_tPBonus = value;
    			OnChanged("TPBonus");
    		}
    
        }
        private int _tPBonus;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int AT
        {
            get { return _aT; }
            set
    		{ 
    			_aT = value;
    			OnChanged("AT");
    		}
    
        }
        private int _aT;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string DK
        {
            get { return _dK; }
            set
    		{ 
    			_dK = value;
    			OnChanged("DK");
    		}
    
        }
        private string _dK;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Reichweite
        {
            get { return _reichweite; }
            set
    		{ 
    			_reichweite = value;
    			OnChanged("Reichweite");
    		}
    
        }
        private Nullable<int> _reichweite;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			_bemerkung = value;
    			OnChanged("Bemerkung");
    		}
    
        }
        private string _bemerkung;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual GegnerBase GegnerBase
        {
            get { return _gegnerBase; }
            set
            {
                if (!ReferenceEquals(_gegnerBase, value))
                {
                    var previousValue = _gegnerBase;
                    _gegnerBase = value;
                    FixupGegnerBase(previousValue);
                }
            }
        }
        private GegnerBase _gegnerBase;

        #endregion

        #region Association Fixup
    
        private void FixupGegnerBase(GegnerBase previousValue)
        {
    		OnChanged("GegnerBase");
            if (previousValue != null && previousValue.GegnerBase_Angriff.Contains(this))
            {
                previousValue.GegnerBase_Angriff.Remove(this);
            }
    
            if (GegnerBase != null)
            {
                if (!GegnerBase.GegnerBase_Angriff.Contains(this))
                {
                    GegnerBase.GegnerBase_Angriff.Add(this);
                }
                if (GegnerBaseGUID != GegnerBase.GegnerBaseGUID)
                {
                    GegnerBaseGUID = GegnerBase.GegnerBaseGUID;
                }
            }
        }

        #endregion

    }
}
