//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Held_Rüstung : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid HeldAusrüstungGUID
        {
            get { return _heldAusrüstungGUID; }
            set
            {
                if (_heldAusrüstungGUID != value)
                {
                    if (Held_Ausrüstung != null && Held_Ausrüstung.HeldAusrüstungGUID != value)
                    {
                        Held_Ausrüstung = null;
                    }
                    _heldAusrüstungGUID = value;
                }
            }
    
        }
        private System.Guid _heldAusrüstungGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid RüstungGUID
        {
            get { return _rüstungGUID; }
            set
            {
                if (_rüstungGUID != value)
                {
                    if (Rüstung != null && Rüstung.RüstungGUID != value)
                    {
                        Rüstung = null;
                    }
                    _rüstungGUID = value;
                }
            }
    
        }
        private System.Guid _rüstungGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int Strukturpunkte
        {
            get { return _strukturpunkte; }
            set
    		{ 
    			Set(ref _strukturpunkte, value);
    		}
    
        }
        private int _strukturpunkte;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int StartStrukturpunkte
        {
            get { return _startStrukturpunkte; }
            set
    		{ 
    			Set(ref _startStrukturpunkte, value);
    		}
    
        }
        private int _startStrukturpunkte;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Held_Ausrüstung Held_Ausrüstung
        {
            get { return _held_Ausrüstung; }
            set
            {
                if (!ReferenceEquals(_held_Ausrüstung, value))
                {
                    var previousValue = _held_Ausrüstung;
                    _held_Ausrüstung = value;
                    FixupHeld_Ausrüstung(previousValue);
                }
            }
        }
        private Held_Ausrüstung _held_Ausrüstung;
    
    	[DataMember]
        public virtual Rüstung Rüstung
        {
            get { return _rüstung; }
            set
            {
                if (!ReferenceEquals(_rüstung, value))
                {
                    var previousValue = _rüstung;
                    _rüstung = value;
                    FixupRüstung(previousValue);
                }
            }
        }
        private Rüstung _rüstung;

        #endregion

        #region Association Fixup
    
        private void FixupHeld_Ausrüstung(Held_Ausrüstung previousValue)
        {
    		OnChanged("Held_Ausrüstung");
            if (previousValue != null && ReferenceEquals(previousValue.Held_Rüstung, this))
            {
                previousValue.Held_Rüstung = null;
            }
    
            if (Held_Ausrüstung != null)
            {
                Held_Ausrüstung.Held_Rüstung = this;
                if (HeldAusrüstungGUID != Held_Ausrüstung.HeldAusrüstungGUID)
                {
                    HeldAusrüstungGUID = Held_Ausrüstung.HeldAusrüstungGUID;
                }
            }
        }
    
        private void FixupRüstung(Rüstung previousValue)
        {
    		OnChanged("Rüstung");
            if (previousValue != null && previousValue.Held_Rüstung.Contains(this))
            {
                previousValue.Held_Rüstung.Remove(this);
            }
    
            if (Rüstung != null)
            {
                if (!Rüstung.Held_Rüstung.Contains(this))
                {
                    Rüstung.Held_Rüstung.Add(this);
                }
                if (RüstungGUID != Rüstung.RüstungGUID)
                {
                    RüstungGUID = Rüstung.RüstungGUID;
                }
            }
        }

        #endregion

    }
}
