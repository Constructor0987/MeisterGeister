//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Setting : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid SettingGUID
        {
            get { return _settingGUID; }
            set
    		{ 
    			_settingGUID = value;
    			OnChanged("SettingGUID");
    		}
    
        }
        private System.Guid _settingGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			_name = value;
    			OnChanged("Name");
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Aktiv
        {
            get { return _aktiv; }
            set
    		{ 
    			_aktiv = value;
    			OnChanged("Aktiv");
    		}
    
        }
        private bool _aktiv;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Alchimierezept_Setting> Alchimierezept_Setting
        {
            get
            {
                if (_alchimierezept_Setting == null)
                {
                    var newCollection = new FixupCollection<Alchimierezept_Setting>();
                    newCollection.CollectionChanged += FixupAlchimierezept_Setting;
                    _alchimierezept_Setting = newCollection;
                }
                return _alchimierezept_Setting;
            }
            set
            {
                if (!ReferenceEquals(_alchimierezept_Setting, value))
                {
                    var previousValue = _alchimierezept_Setting as FixupCollection<Alchimierezept_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlchimierezept_Setting;
                    }
                    _alchimierezept_Setting = value;
                    var newValue = value as FixupCollection<Alchimierezept_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlchimierezept_Setting;
                    }
                }
            }
        }
        private ICollection<Alchimierezept_Setting> _alchimierezept_Setting;
    
    	[DataMember]
        public virtual ICollection<Ausrüstung_Setting> Ausrüstung_Setting
        {
            get
            {
                if (_ausrüstung_Setting == null)
                {
                    var newCollection = new FixupCollection<Ausrüstung_Setting>();
                    newCollection.CollectionChanged += FixupAusrüstung_Setting;
                    _ausrüstung_Setting = newCollection;
                }
                return _ausrüstung_Setting;
            }
            set
            {
                if (!ReferenceEquals(_ausrüstung_Setting, value))
                {
                    var previousValue = _ausrüstung_Setting as FixupCollection<Ausrüstung_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAusrüstung_Setting;
                    }
                    _ausrüstung_Setting = value;
                    var newValue = value as FixupCollection<Ausrüstung_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAusrüstung_Setting;
                    }
                }
            }
        }
        private ICollection<Ausrüstung_Setting> _ausrüstung_Setting;
    
    	[DataMember]
        public virtual ICollection<Handelsgut_Setting> Handelsgut_Setting
        {
            get
            {
                if (_handelsgut_Setting == null)
                {
                    var newCollection = new FixupCollection<Handelsgut_Setting>();
                    newCollection.CollectionChanged += FixupHandelsgut_Setting;
                    _handelsgut_Setting = newCollection;
                }
                return _handelsgut_Setting;
            }
            set
            {
                if (!ReferenceEquals(_handelsgut_Setting, value))
                {
                    var previousValue = _handelsgut_Setting as FixupCollection<Handelsgut_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHandelsgut_Setting;
                    }
                    _handelsgut_Setting = value;
                    var newValue = value as FixupCollection<Handelsgut_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHandelsgut_Setting;
                    }
                }
            }
        }
        private ICollection<Handelsgut_Setting> _handelsgut_Setting;
    
    	[DataMember]
        public virtual ICollection<Sonderfertigkeit_Setting> Sonderfertigkeit_Setting
        {
            get
            {
                if (_sonderfertigkeit_Setting == null)
                {
                    var newCollection = new FixupCollection<Sonderfertigkeit_Setting>();
                    newCollection.CollectionChanged += FixupSonderfertigkeit_Setting;
                    _sonderfertigkeit_Setting = newCollection;
                }
                return _sonderfertigkeit_Setting;
            }
            set
            {
                if (!ReferenceEquals(_sonderfertigkeit_Setting, value))
                {
                    var previousValue = _sonderfertigkeit_Setting as FixupCollection<Sonderfertigkeit_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSonderfertigkeit_Setting;
                    }
                    _sonderfertigkeit_Setting = value;
                    var newValue = value as FixupCollection<Sonderfertigkeit_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSonderfertigkeit_Setting;
                    }
                }
            }
        }
        private ICollection<Sonderfertigkeit_Setting> _sonderfertigkeit_Setting;
    
    	[DataMember]
        public virtual ICollection<Zauber_Setting> Zauber_Setting
        {
            get
            {
                if (_zauber_Setting == null)
                {
                    var newCollection = new FixupCollection<Zauber_Setting>();
                    newCollection.CollectionChanged += FixupZauber_Setting;
                    _zauber_Setting = newCollection;
                }
                return _zauber_Setting;
            }
            set
            {
                if (!ReferenceEquals(_zauber_Setting, value))
                {
                    var previousValue = _zauber_Setting as FixupCollection<Zauber_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupZauber_Setting;
                    }
                    _zauber_Setting = value;
                    var newValue = value as FixupCollection<Zauber_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupZauber_Setting;
                    }
                }
            }
        }
        private ICollection<Zauber_Setting> _zauber_Setting;
    
    	[DataMember]
        public virtual ICollection<Zauberzeichen_Setting> Zauberzeichen_Setting
        {
            get
            {
                if (_zauberzeichen_Setting == null)
                {
                    var newCollection = new FixupCollection<Zauberzeichen_Setting>();
                    newCollection.CollectionChanged += FixupZauberzeichen_Setting;
                    _zauberzeichen_Setting = newCollection;
                }
                return _zauberzeichen_Setting;
            }
            set
            {
                if (!ReferenceEquals(_zauberzeichen_Setting, value))
                {
                    var previousValue = _zauberzeichen_Setting as FixupCollection<Zauberzeichen_Setting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupZauberzeichen_Setting;
                    }
                    _zauberzeichen_Setting = value;
                    var newValue = value as FixupCollection<Zauberzeichen_Setting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupZauberzeichen_Setting;
                    }
                }
            }
        }
        private ICollection<Zauberzeichen_Setting> _zauberzeichen_Setting;

        #endregion

        #region Association Fixup
    
        private void FixupAlchimierezept_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Alchimierezept_Setting");
            if (e.NewItems != null)
            {
                foreach (Alchimierezept_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Alchimierezept_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }
    
        private void FixupAusrüstung_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Ausrüstung_Setting");
            if (e.NewItems != null)
            {
                foreach (Ausrüstung_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ausrüstung_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }
    
        private void FixupHandelsgut_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Handelsgut_Setting");
            if (e.NewItems != null)
            {
                foreach (Handelsgut_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Handelsgut_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }
    
        private void FixupSonderfertigkeit_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Sonderfertigkeit_Setting");
            if (e.NewItems != null)
            {
                foreach (Sonderfertigkeit_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sonderfertigkeit_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }
    
        private void FixupZauber_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Zauber_Setting");
            if (e.NewItems != null)
            {
                foreach (Zauber_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Zauber_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }
    
        private void FixupZauberzeichen_Setting(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Zauberzeichen_Setting");
            if (e.NewItems != null)
            {
                foreach (Zauberzeichen_Setting item in e.NewItems)
                {
                    item.Setting = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Zauberzeichen_Setting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setting, this))
                    {
                        item.Setting = null;
                    }
                }
            }
        }

        #endregion

    }
}
