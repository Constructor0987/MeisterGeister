//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Fernkampfwaffe : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid FernkampfwaffeGUID
        {
            get { return _fernkampfwaffeGUID; }
            set
            {
                if (_fernkampfwaffeGUID != value)
                {
                    if (Ausrüstung != null && Ausrüstung.AusrüstungGUID != value)
                    {
                        Ausrüstung = null;
                    }
                    _fernkampfwaffeGUID = value;
                }
            }
    
        }
        private System.Guid _fernkampfwaffeGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Munitionspreis
        {
            get { return _munitionspreis; }
            set
    		{ 
    			Set(ref _munitionspreis, value);
    		}
    
        }
        private Nullable<double> _munitionspreis;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<double> Munitionsgewicht
        {
            get { return _munitionsgewicht; }
            set
    		{ 
    			Set(ref _munitionsgewicht, value);
    		}
    
        }
        private Nullable<double> _munitionsgewicht;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Munitionsart
        {
            get { return _munitionsart; }
            set
    		{ 
    			Set(ref _munitionsart, value);
    		}
    
        }
        private string _munitionsart;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Improvisiert
        {
            get { return _improvisiert; }
            set
    		{ 
    			Set(ref _improvisiert, value);
    		}
    
        }
        private bool _improvisiert;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPWürfel
        {
            get { return _tPWürfel; }
            set
    		{ 
    			Set(ref _tPWürfel, value);
    		}
    
        }
        private Nullable<int> _tPWürfel;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPWürfelAnzahl
        {
            get { return _tPWürfelAnzahl; }
            set
    		{ 
    			Set(ref _tPWürfelAnzahl, value);
    		}
    
        }
        private Nullable<int> _tPWürfelAnzahl;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPBonus
        {
            get { return _tPBonus; }
            set
    		{ 
    			Set(ref _tPBonus, value);
    		}
    
        }
        private Nullable<int> _tPBonus;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool AusdauerSchaden
        {
            get { return _ausdauerSchaden; }
            set
    		{ 
    			Set(ref _ausdauerSchaden, value);
    		}
    
        }
        private bool _ausdauerSchaden;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPKKSchwelle
        {
            get { return _tPKKSchwelle; }
            set
    		{ 
    			Set(ref _tPKKSchwelle, value);
    		}
    
        }
        private Nullable<int> _tPKKSchwelle;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPKKSchritt
        {
            get { return _tPKKSchritt; }
            set
    		{ 
    			Set(ref _tPKKSchritt, value);
    		}
    
        }
        private Nullable<int> _tPKKSchritt;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Verwundend
        {
            get { return _verwundend; }
            set
    		{ 
    			Set(ref _verwundend, value);
    		}
    
        }
        private bool _verwundend;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RWSehrNah
        {
            get { return _rWSehrNah; }
            set
    		{ 
    			Set(ref _rWSehrNah, value);
    		}
    
        }
        private Nullable<int> _rWSehrNah;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RWNah
        {
            get { return _rWNah; }
            set
    		{ 
    			Set(ref _rWNah, value);
    		}
    
        }
        private Nullable<int> _rWNah;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RWMittel
        {
            get { return _rWMittel; }
            set
    		{ 
    			Set(ref _rWMittel, value);
    		}
    
        }
        private Nullable<int> _rWMittel;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RWWeit
        {
            get { return _rWWeit; }
            set
    		{ 
    			Set(ref _rWWeit, value);
    		}
    
        }
        private Nullable<int> _rWWeit;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> RWSehrWeit
        {
            get { return _rWSehrWeit; }
            set
    		{ 
    			Set(ref _rWSehrWeit, value);
    		}
    
        }
        private Nullable<int> _rWSehrWeit;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPSehrNah
        {
            get { return _tPSehrNah; }
            set
    		{ 
    			Set(ref _tPSehrNah, value);
    		}
    
        }
        private Nullable<int> _tPSehrNah;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPNah
        {
            get { return _tPNah; }
            set
    		{ 
    			Set(ref _tPNah, value);
    		}
    
        }
        private Nullable<int> _tPNah;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPMittel
        {
            get { return _tPMittel; }
            set
    		{ 
    			Set(ref _tPMittel, value);
    		}
    
        }
        private Nullable<int> _tPMittel;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPWeit
        {
            get { return _tPWeit; }
            set
    		{ 
    			Set(ref _tPWeit, value);
    		}
    
        }
        private Nullable<int> _tPWeit;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> TPSehrWeit
        {
            get { return _tPSehrWeit; }
            set
    		{ 
    			Set(ref _tPSehrWeit, value);
    		}
    
        }
        private Nullable<int> _tPSehrWeit;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<int> Laden
        {
            get { return _laden; }
            set
    		{ 
    			Set(ref _laden, value);
    		}
    
        }
        private Nullable<int> _laden;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Pfad
        {
            get { return _pfad; }
            set
    		{ 
    			Set(ref _pfad, value);
    		}
    
        }
        private string _pfad;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Ausrüstung Ausrüstung
        {
            get { return _ausrüstung; }
            set
            {
                if (!ReferenceEquals(_ausrüstung, value))
                {
                    var previousValue = _ausrüstung;
                    _ausrüstung = value;
                    FixupAusrüstung(previousValue);
                }
            }
        }
        private Ausrüstung _ausrüstung;
    
    	[DataMember]
        public virtual ICollection<Held_Fernkampfwaffe> Held_Fernkampfwaffe
        {
            get
            {
                if (_held_Fernkampfwaffe == null)
                {
                    var newCollection = new FixupCollection<Held_Fernkampfwaffe>();
                    newCollection.CollectionChanged += FixupHeld_Fernkampfwaffe;
                    _held_Fernkampfwaffe = newCollection;
                }
                return _held_Fernkampfwaffe;
            }
            set
            {
                if (!ReferenceEquals(_held_Fernkampfwaffe, value))
                {
                    var previousValue = _held_Fernkampfwaffe as FixupCollection<Held_Fernkampfwaffe>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHeld_Fernkampfwaffe;
                    }
                    _held_Fernkampfwaffe = value;
                    var newValue = value as FixupCollection<Held_Fernkampfwaffe>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHeld_Fernkampfwaffe;
                    }
                }
            }
        }
        private ICollection<Held_Fernkampfwaffe> _held_Fernkampfwaffe;
    
    	[DataMember]
        public virtual ICollection<Held_Munition> Held_Munition
        {
            get
            {
                if (_held_Munition == null)
                {
                    var newCollection = new FixupCollection<Held_Munition>();
                    newCollection.CollectionChanged += FixupHeld_Munition;
                    _held_Munition = newCollection;
                }
                return _held_Munition;
            }
            set
            {
                if (!ReferenceEquals(_held_Munition, value))
                {
                    var previousValue = _held_Munition as FixupCollection<Held_Munition>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHeld_Munition;
                    }
                    _held_Munition = value;
                    var newValue = value as FixupCollection<Held_Munition>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHeld_Munition;
                    }
                }
            }
        }
        private ICollection<Held_Munition> _held_Munition;
    
    	[DataMember]
        public virtual ICollection<Talent> Talent
        {
            get
            {
                if (_talent == null)
                {
                    var newCollection = new FixupCollection<Talent>();
                    newCollection.CollectionChanged += FixupTalent;
                    _talent = newCollection;
                }
                return _talent;
            }
            set
            {
                if (!ReferenceEquals(_talent, value))
                {
                    var previousValue = _talent as FixupCollection<Talent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTalent;
                    }
                    _talent = value;
                    var newValue = value as FixupCollection<Talent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTalent;
                    }
                }
            }
        }
        private ICollection<Talent> _talent;

        #endregion

        #region Association Fixup
    
        private void FixupAusrüstung(Ausrüstung previousValue)
        {
    		OnChanged("Ausrüstung");
            if (previousValue != null && ReferenceEquals(previousValue.Fernkampfwaffe, this))
            {
                previousValue.Fernkampfwaffe = null;
            }
    
            if (Ausrüstung != null)
            {
                Ausrüstung.Fernkampfwaffe = this;
                if (FernkampfwaffeGUID != Ausrüstung.AusrüstungGUID)
                {
                    FernkampfwaffeGUID = Ausrüstung.AusrüstungGUID;
                }
            }
        }
    
        private void FixupHeld_Fernkampfwaffe(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Held_Fernkampfwaffe");
            if (e.NewItems != null)
            {
                foreach (Held_Fernkampfwaffe item in e.NewItems)
                {
                    item.Fernkampfwaffe = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Held_Fernkampfwaffe item in e.OldItems)
                {
                    if (ReferenceEquals(item.Fernkampfwaffe, this))
                    {
                        item.Fernkampfwaffe = null;
                    }
                }
            }
        }
    
        private void FixupHeld_Munition(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Held_Munition");
            if (e.NewItems != null)
            {
                foreach (Held_Munition item in e.NewItems)
                {
                    item.Fernkampfwaffe = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Held_Munition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Fernkampfwaffe, this))
                    {
                        item.Fernkampfwaffe = null;
                    }
                }
            }
        }
    
        private void FixupTalent(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Talent");
            if (e.NewItems != null)
            {
                foreach (Talent item in e.NewItems)
                {
                    if (!item.Fernkampfwaffe.Contains(this))
                    {
                        item.Fernkampfwaffe.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Talent item in e.OldItems)
                {
                    if (item.Fernkampfwaffe.Contains(this))
                    {
                        item.Fernkampfwaffe.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
