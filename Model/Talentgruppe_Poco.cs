//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Talentgruppe : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int TalentgruppeID
        {
            get { return _talentgruppeID; }
            set
    		{ 
    			_talentgruppeID = value;
    			OnChanged("TalentgruppeID");
    		}
    
        }
        private int _talentgruppeID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Gruppenname
        {
            get { return _gruppenname; }
            set
    		{ 
    			_gruppenname = value;
    			OnChanged("Gruppenname");
    		}
    
        }
        private string _gruppenname;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Kurzname
        {
            get { return _kurzname; }
            set
    		{ 
    			_kurzname = value;
    			OnChanged("Kurzname");
    		}
    
        }
        private string _kurzname;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Talent> Talent
        {
            get
            {
                if (_talent == null)
                {
                    var newCollection = new FixupCollection<Talent>();
                    newCollection.CollectionChanged += FixupTalent;
                    _talent = newCollection;
                }
                return _talent;
            }
            set
            {
                if (!ReferenceEquals(_talent, value))
                {
                    var previousValue = _talent as FixupCollection<Talent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTalent;
                    }
                    _talent = value;
                    var newValue = value as FixupCollection<Talent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTalent;
                    }
                }
            }
        }
        private ICollection<Talent> _talent;

        #endregion

        #region Association Fixup
    
        private void FixupTalent(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Talent");
            if (e.NewItems != null)
            {
                foreach (Talent item in e.NewItems)
                {
                    item.Talentgruppe = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Talent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Talentgruppe, this))
                    {
                        item.Talentgruppe = null;
                    }
                }
            }
        }

        #endregion

    }
}
