//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Audio_Playlist : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	/// <summary>
        /// Notifies listeners that a property value has changed.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        protected void OnChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(object currentValue, object newValue, [CallerMemberName] string propertyName = null)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Set
    	/// <summary>
        /// Checks if a property already matches a desired value.  Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners.  This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected bool Set<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
    		OnValidatePropertyChanging(storage, value, propertyName);
    		storage = value;
    		OnChanged(propertyName);
            return true;
        }

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid Audio_PlaylistGUID
        {
            get { return _audio_PlaylistGUID; }
            set
    		{ 
    			Set(ref _audio_PlaylistGUID, value);
    		}    
        }
        private System.Guid _audio_PlaylistGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			Set(ref _name, value);
    		}    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Hintergrundmusik
        {
            get { return _hintergrundmusik; }
            set
    		{ 
    			Set(ref _hintergrundmusik, value);
    		}    
        }
        private bool _hintergrundmusik;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual int MaxSongsParallel
        {
            get { return _maxSongsParallel; }
            set
    		{ 
    			Set(ref _maxSongsParallel, value);
    		}    
        }
        private int _maxSongsParallel;

        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual bool Fading
        {
            get { return _fading; }
            set
            {
                Set(ref _fading, value);
            }
        }
        private bool _fading;

        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual bool DoForce
        {
            get { return _doForce; }
            set
            {
                Set(ref _doForce, value);
            }

        }
        private bool _doForce;

        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual int ForceVolume
        {
            get { return _forceVol; }
            set
            {
                Set(ref _forceVol, value);
            }
        }
        private int _forceVol;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual double L채nge
        {
            get { return _l채nge; }
            set
    		{ 
    			Set(ref _l채nge, value);
    		}    
        }
        private double _l채nge;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Kategorie
        {
            get { return _kategorie; }
            set
    		{ 
    			Set(ref _kategorie, value);
    		}    
        }
        private string _kategorie;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Key
        {
            get { return _key; }
            set
    		{ 
    			Set(ref _key, value);
    		}    
        }
        private string _key;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Modifiers
        {
            get { return _modifiers; }
            set
    		{ 
    			Set(ref _modifiers, value);
    		}    
        }
        private string _modifiers;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Shuffle
        {
            get { return _shuffle; }
            set
    		{ 
    			Set(ref _shuffle, value);
    		}    
        }
        private bool _shuffle;

    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual Nullable<bool> Repeat
        {
            get { return _repeat; }
            set
    		{ 
    			Set(ref _repeat, value);
    		}    
        }
        private Nullable<bool> _repeat;

        
        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual bool WarteZeitAktiv
        {
            get { return _warteZeitAktiv; }
            set
            {
                Set(ref _warteZeitAktiv, value);
            }
        }
        private bool _warteZeitAktiv;

        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual long WarteZeit
        {
            get { return _warteZeit; }
            set
            {
                Set(ref _warteZeit, value);
            }
        }
        private long _warteZeit;
        
        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual bool WarteZeitChange
        {
            get { return _warteZeitChange; }
            set
            {
                Set(ref _warteZeitChange, value);
            }
        }
        private bool _warteZeitChange;
        
        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual long WarteZeitMin
        {
            get { return _warteZeitMin; }
            set
            {
                Set(ref _warteZeitMin, value);
            }
        }
        private long _warteZeitMin;

        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual long WarteZeitMax
        {
            get { return _warteZeitMax; }
            set
            {
                Set(ref _warteZeitMax, value);
            }
        }
        private long _warteZeitMax;
        ///<summary>Database persistent property</summary>
        [DataMember]
        public virtual int Reihenfolge
        {
            get { return _reihenfolge; }
            set
            {
                Set(ref _reihenfolge, value);
            }

        }
        private int _reihenfolge;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Audio_Playlist_Titel> Audio_Playlist_Titel
        {
            get
            {
                if (_audio_Playlist_Titel == null)
                {
                    var newCollection = new FixupCollection<Audio_Playlist_Titel>();
                    newCollection.CollectionChanged += FixupAudio_Playlist_Titel;
                    _audio_Playlist_Titel = newCollection;
                }
                return _audio_Playlist_Titel;
            }
            set
            {
                if (!ReferenceEquals(_audio_Playlist_Titel, value))
                {
                    var previousValue = _audio_Playlist_Titel as FixupCollection<Audio_Playlist_Titel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAudio_Playlist_Titel;
                    }
                    _audio_Playlist_Titel = value;
                    var newValue = value as FixupCollection<Audio_Playlist_Titel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAudio_Playlist_Titel;
                    }
                }
            }
        }
        private ICollection<Audio_Playlist_Titel> _audio_Playlist_Titel;
    
    	[DataMember]
        public virtual ICollection<Audio_Theme> Audio_Theme
        {
            get
            {
                if (_audio_Theme == null)
                {
                    var newCollection = new FixupCollection<Audio_Theme>();
                    newCollection.CollectionChanged += FixupAudio_Theme;
                    _audio_Theme = newCollection;
                }
                return _audio_Theme;
            }
            set
            {
                if (!ReferenceEquals(_audio_Theme, value))
                {
                    var previousValue = _audio_Theme as FixupCollection<Audio_Theme>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAudio_Theme;
                    }
                    _audio_Theme = value;
                    var newValue = value as FixupCollection<Audio_Theme>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAudio_Theme;
                    }
                }
            }
        }
        private ICollection<Audio_Theme> _audio_Theme;

        #endregion

        #region Association Fixup
    
        private void FixupAudio_Playlist_Titel(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Audio_Playlist_Titel");
            if (e.NewItems != null)
            {
                foreach (Audio_Playlist_Titel item in e.NewItems)
                {
                    item.Audio_Playlist = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Audio_Playlist_Titel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Audio_Playlist, this))
                    {
                        item.Audio_Playlist = null;
                    }
                }
            }
        }
    
        private void FixupAudio_Theme(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("Audio_Theme");
            if (e.NewItems != null)
            {
                foreach (Audio_Theme item in e.NewItems)
                {
                    if (!item.Audio_Playlist.Contains(this))
                    {
                        item.Audio_Playlist.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Audio_Theme item in e.OldItems)
                {
                    if (item.Audio_Playlist.Contains(this))
                    {
                        item.Audio_Playlist.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
