//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Held_Sonderfertigkeit : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(String propertyName, object currentValue, object newValue)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid HeldGUID
        {
            get { return _heldGUID; }
            set
            {
                if (_heldGUID != value)
                {
                    if (Held != null && Held.HeldGUID != value)
                    {
                        Held = null;
                    }
                    _heldGUID = value;
                }
            }
    
        }
        private System.Guid _heldGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid SonderfertigkeitGUID
        {
            get { return _sonderfertigkeitGUID; }
            set
            {
                if (_sonderfertigkeitGUID != value)
                {
                    if (Sonderfertigkeit != null && Sonderfertigkeit.SonderfertigkeitGUID != value)
                    {
                        Sonderfertigkeit = null;
                    }
                    _sonderfertigkeitGUID = value;
                }
            }
    
        }
        private System.Guid _sonderfertigkeitGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Wert
        {
            get { return _wert; }
            set
    		{ 
    			OnValidatePropertyChanging("Wert",_wert, value);
    			_wert = value;
    			OnChanged("Wert");
    		}
    
        }
        private string _wert;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual long Id
        {
            get { return _id; }
            set
    		{ 
    			OnValidatePropertyChanging("Id",_id, value);
    			_id = value;
    			OnChanged("Id");
    		}
    
        }
        private long _id;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual Held Held
        {
            get { return _held; }
            set
            {
                if (!ReferenceEquals(_held, value))
                {
                    var previousValue = _held;
                    _held = value;
                    FixupHeld(previousValue);
                }
            }
        }
        private Held _held;
    
    	[DataMember]
        public virtual Sonderfertigkeit Sonderfertigkeit
        {
            get { return _sonderfertigkeit; }
            set
            {
                if (!ReferenceEquals(_sonderfertigkeit, value))
                {
                    var previousValue = _sonderfertigkeit;
                    _sonderfertigkeit = value;
                    FixupSonderfertigkeit(previousValue);
                }
            }
        }
        private Sonderfertigkeit _sonderfertigkeit;

        #endregion

        #region Association Fixup
    
        private void FixupHeld(Held previousValue)
        {
    		OnChanged("Held");
            if (previousValue != null && previousValue.Held_Sonderfertigkeit.Contains(this))
            {
                previousValue.Held_Sonderfertigkeit.Remove(this);
            }
    
            if (Held != null)
            {
                if (!Held.Held_Sonderfertigkeit.Contains(this))
                {
                    Held.Held_Sonderfertigkeit.Add(this);
                }
                if (HeldGUID != Held.HeldGUID)
                {
                    HeldGUID = Held.HeldGUID;
                }
            }
        }
    
        private void FixupSonderfertigkeit(Sonderfertigkeit previousValue)
        {
    		OnChanged("Sonderfertigkeit");
            if (previousValue != null && previousValue.Held_Sonderfertigkeit.Contains(this))
            {
                previousValue.Held_Sonderfertigkeit.Remove(this);
            }
    
            if (Sonderfertigkeit != null)
            {
                if (!Sonderfertigkeit.Held_Sonderfertigkeit.Contains(this))
                {
                    Sonderfertigkeit.Held_Sonderfertigkeit.Add(this);
                }
                if (SonderfertigkeitGUID != Sonderfertigkeit.SonderfertigkeitGUID)
                {
                    SonderfertigkeitGUID = Sonderfertigkeit.SonderfertigkeitGUID;
                }
            }
        }

        #endregion

    }
}
