//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Kampfregel : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid KampfregelGUID
        {
            get { return _kampfregelGUID; }
            set
    		{ 
    			_kampfregelGUID = value;
    			NotifyPropertyChanged("KampfregelGUID");
    		}
    
        }
        private System.Guid _kampfregelGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			_name = value;
    			NotifyPropertyChanged("Name");
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Manöver
        {
            get { return _manöver; }
            set
    		{ 
    			_manöver = value;
    			NotifyPropertyChanged("Manöver");
    		}
    
        }
        private bool _manöver;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			_bemerkung = value;
    			NotifyPropertyChanged("Bemerkung");
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			_literatur = value;
    			NotifyPropertyChanged("Literatur");
    		}
    
        }
        private string _literatur;

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Gegner_Kampfregel> Gegner_Kampfregel
        {
            get
            {
                if (_gegner_Kampfregel == null)
                {
                    var newCollection = new FixupCollection<Gegner_Kampfregel>();
                    newCollection.CollectionChanged += FixupGegner_Kampfregel;
                    _gegner_Kampfregel = newCollection;
                }
                return _gegner_Kampfregel;
            }
            set
            {
                if (!ReferenceEquals(_gegner_Kampfregel, value))
                {
                    var previousValue = _gegner_Kampfregel as FixupCollection<Gegner_Kampfregel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGegner_Kampfregel;
                    }
                    _gegner_Kampfregel = value;
                    var newValue = value as FixupCollection<Gegner_Kampfregel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGegner_Kampfregel;
                    }
                }
            }
        }
        private ICollection<Gegner_Kampfregel> _gegner_Kampfregel;

        #endregion
        #region Association Fixup
    
        private void FixupGegner_Kampfregel(object sender, NotifyCollectionChangedEventArgs e)
        {
    		NotifyPropertyChanged("Gegner_Kampfregel");
            if (e.NewItems != null)
            {
                foreach (Gegner_Kampfregel item in e.NewItems)
                {
                    item.Kampfregel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Gegner_Kampfregel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Kampfregel, this))
                    {
                        item.Kampfregel = null;
                    }
                }
            }
        }

        #endregion
    }
}
