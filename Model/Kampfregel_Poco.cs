//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ComponentModel;

namespace MeisterGeister.Model
{
    [DataContract(IsReference=true)]
    public partial class Kampfregel : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged
    	public event PropertyChangedEventHandler PropertyChanged;
    	
    	public void OnChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion

        #region ValidatePropertyChanging
    	protected event Extensions.ValidatePropertyChangingEventHandler ValidatePropertyChanging;
    
    	protected void OnValidatePropertyChanging(String propertyName, object currentValue, object newValue)
    	{
    		if(ValidatePropertyChanging != null)
    		{
    			ValidatePropertyChanging(this, propertyName, currentValue, newValue);
    		}
    	}

        #endregion

        #region Primitive Properties
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual System.Guid KampfregelGUID
        {
            get { return _kampfregelGUID; }
            set
    		{ 
    			OnValidatePropertyChanging("KampfregelGUID",_kampfregelGUID, value);
    			_kampfregelGUID = value;
    			OnChanged("KampfregelGUID");
    		}
    
        }
        private System.Guid _kampfregelGUID;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
    		{ 
    			OnValidatePropertyChanging("Name",_name, value);
    			_name = value;
    			OnChanged("Name");
    		}
    
        }
        private string _name;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual bool Manöver
        {
            get { return _manöver; }
            set
    		{ 
    			OnValidatePropertyChanging("Manöver",_manöver, value);
    			_manöver = value;
    			OnChanged("Manöver");
    		}
    
        }
        private bool _manöver;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Bemerkung
        {
            get { return _bemerkung; }
            set
    		{ 
    			OnValidatePropertyChanging("Bemerkung",_bemerkung, value);
    			_bemerkung = value;
    			OnChanged("Bemerkung");
    		}
    
        }
        private string _bemerkung;
    	///<summary>Database persistent property</summary>
    	[DataMember]
        public virtual string Literatur
        {
            get { return _literatur; }
            set
    		{ 
    			OnValidatePropertyChanging("Literatur",_literatur, value);
    			_literatur = value;
    			OnChanged("Literatur");
    		}
    
        }
        private string _literatur;

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<GegnerBase_Kampfregel> GegnerBase_Kampfregel
        {
            get
            {
                if (_gegnerBase_Kampfregel == null)
                {
                    var newCollection = new FixupCollection<GegnerBase_Kampfregel>();
                    newCollection.CollectionChanged += FixupGegnerBase_Kampfregel;
                    _gegnerBase_Kampfregel = newCollection;
                }
                return _gegnerBase_Kampfregel;
            }
            set
            {
                if (!ReferenceEquals(_gegnerBase_Kampfregel, value))
                {
                    var previousValue = _gegnerBase_Kampfregel as FixupCollection<GegnerBase_Kampfregel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGegnerBase_Kampfregel;
                    }
                    _gegnerBase_Kampfregel = value;
                    var newValue = value as FixupCollection<GegnerBase_Kampfregel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGegnerBase_Kampfregel;
                    }
                }
            }
        }
        private ICollection<GegnerBase_Kampfregel> _gegnerBase_Kampfregel;

        #endregion

        #region Association Fixup
    
        private void FixupGegnerBase_Kampfregel(object sender, NotifyCollectionChangedEventArgs e)
        {
    		OnChanged("GegnerBase_Kampfregel");
            if (e.NewItems != null)
            {
                foreach (GegnerBase_Kampfregel item in e.NewItems)
                {
                    item.Kampfregel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GegnerBase_Kampfregel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Kampfregel, this))
                    {
                        item.Kampfregel = null;
                    }
                }
            }
        }

        #endregion

    }
}
