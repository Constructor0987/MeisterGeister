<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>Attribut, das in einer Eigenschaft abgelegt wird, um anzugeben, dass die Datenbankspalte, der die Eigenschaft zugeordnet ist, über einen Index verfügt.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>Erstellt eine neue <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" />-Instanz für einen Index, der gemäß der Konvention benannt wird, und für den keine Spaltenreihenfolge, Gruppierung oder Eindeutigkeit angegeben ist.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>Erstellt eine neue <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" />-Instanz für einen Index mit dem angegebenen Namen, für den keine Spaltenreihenfolge, Gruppierung oder Eindeutigkeit angegeben ist.</summary>
      <param name="name">Der Indexname.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>Erstellt eine neue <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" />-Instanz für einen Index mit dem angegebenen Namen, für den eine Spaltenreihenfolge, aber keine Gruppierung oder Eindeutigkeit angegeben ist.</summary>
      <param name="name">Der Indexname.</param>
      <param name="order">Eine Nummer, die verwendet wird, um die Spaltenreihenfolge für Indizes mit mehreren Spalten festzulegen.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Bestimmt, ob dieses Attribut den gleichen Namen und die gleiche Konfiguration angibt, wie das angegebene Attribut.</summary>
      <returns>true, wenn das andere Objekt gleich diesem Objekt ist; andernfalls false.</returns>
      <param name="other">Das zu vergleichende Attribut.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>Bestimmt, ob dieses Attribut den gleichen Namen und die gleiche Konfiguration angibt, wie das angegebene Attribut.</summary>
      <returns>true, wenn das andere Objekt gleich diesem Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Attribut.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>Ruft einen Wert ab, um anzugeben, ob der Index einen gruppierten Index definiert, oder legt den Wert fest.</summary>
      <returns>true, wenn der Index einen gruppierten Index definiert, false, wenn der Index einen nicht gruppierten Index definiert.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>Ruft ab oder legt fest, ob <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> auf einen Wert festgelegt wurde.</summary>
      <returns>true, wenn <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> auf einen Wert festgelegt wurde, andernfalls false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>Ruft einen Wert ab, um anzugeben, ob ein eindeutiger Index definiert werden soll, oder legt den Wert fest.</summary>
      <returns>true, um einen eindeutigen Index zu definieren; false, um einen nicht eindeutigen Index zu definieren.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>Ruft ab oder legt fest, ob <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> auf einen Wert festgelegt wurde.</summary>
      <returns>true, wenn <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> auf einen Wert festgelegt wurde, andernfalls false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>Ruft den Indexnamen ab oder legt diesen fest.</summary>
      <returns>Der Indexname.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>Ruft eine Zahl ab, die die Spaltenreihenfolge für Indizes mit mehreren Spalten festlegt, oder legt diese Zahl fest.Dies wird -1 sein, wenn keine Spaltenreihenfolge angegeben wurde.</summary>
      <returns>Eine Zahl, die die Spaltenreihenfolge für Indizes mit mehreren Spalten festlegt, oder -1, wenn keine Spaltenreihenfolge angegeben wurde.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>Gibt die Zeichenfolgendarstellung für diese Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung für diese Instanz.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>Ruft eine für jede Projektinstanz verschiedene ID ab, damit Typdeskriptoren nicht versuchen, alle IndexAttribute-Instanzen in einer einzigen Instanz zu kombinieren; oder legt eine solche ID fest.</summary>
      <returns>Eine für jede Projektinstanz verschiedene ID.</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Eine Implementierung von IDatabaseInitializer, die nur dann die Datenbank neu erstellt und optional erneut Startwerte für die Datenbank festlegt, wenn die Datenbank nicht vorhanden ist.Zum Seeding der Datenbank erstellen Sie eine abgeleitete Klasse und überschreiben die Seed-Methode.</summary>
      <typeparam name="TContext"> Der Typ des Kontexts. </typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context"> Der Kontext. </param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Eine Methode, die überschrieben werden soll, um dem Kontext tatsächlich Daten für das Seeding hinzuzufügen.Bei der Standardimplementierung wird keine Aktion ausgeführt.</summary>
      <param name="context"> Der Kontext für das Seeding. </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Eine Instanz dieser Klasse wird aus einem <see cref="T:System.Data.Entity.DbContext" />-Objekt abgerufen und kann zum Verwalten der Datenbank verwendet werden, die einen DbContext oder eine Verbindung unterstützt.Dies schließt das Erstellen, Löschen und Überprüfen auf Vorhandensein einer Datenbank ein.Beachten Sie, dass nur eine Verbindung erforderlich ist, um eine Datenbank zu löschen oder ihr Vorhandensein zu prüfen (alsoohne einen vollständigen Kontext), wenn Sie die statischen Methoden dieser Klasse verwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>Startet eine Transaktion für die zugrunde liegenden Speicherverbindung.</summary>
      <returns>ein <see cref="T:System.Data.Entity.DbContextTransaction" />-Objekt, das den Zugriff auf das zugrunde liegende Transaktionsobjekt des Speichers umschließt.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Startet mithilfe der angegebenen Isolationsstufe eine Transaktion für die zugrunde liegende Verbindung.</summary>
      <returns>ein <see cref="T:System.Data.Entity.DbContextTransaction" />-Objekt, das den Zugriff auf das zugrunde liegende Transaktionsobjekt des Speichers umschließt.</returns>
      <param name="isolationLevel">Die Datenbankisolationsstufe, mit der die zugrundeliegende Speichertransaktion erstellt wird.</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>Ruft den Timeoutwert in Sekunden für alle Operationen im Kontext ab oder legt diesen fest.Der Standardwert ist NULL, wobei NULL angibt, dass der Standardwert des zugrunde liegenden Anbieters verwendet wird.</summary>
      <returns>Der Timeout in Sekunden oder als NULL, um den Anbieterstandard zu verwenden.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Überprüft, ob die Datenbank mit dem aktuellen Code First-Modell kompatibel ist.</summary>
      <returns>TRUE, wenn der Modellhash im Kontext und der Modellhash in der Datenbank übereinstimmen, andernfalls FALSE.</returns>
      <param name="throwIfNoMetadata">Bei Festlegung auf true wird eine Ausnahme ausgelöst, wenn keine Modellmetadaten in der Datenbank gefunden werden.Wenn der Wert auf false festgelegt ist und keine Metadaten gefunden werden, gibt diese Methode true zurück.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Gibt die Verbindung zurück, die von diesem Kontext verwendet wird.Das kann zum Herstellen der Verbindung führen, wenn sie nicht bereits vorhanden ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Erstellt eine neue Datenbank auf dem Datenbankserver für das im Unterstützungskontext definierte Modell.Beachten Sie, dass das Ausführen dieser Strategie deaktiviert wird, wenn diese Methode aufgerufen wird, bevor die Datenbankinitialisierungsstrategie ausgeführt wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Erstellt eine neue Datenbank auf dem Datenbankserver für das im Unterstützungskontext definierte Modell, jedoch nur, wenn auf dem Server nicht bereits eine Datenbank mit dem gleichen Namen vorhanden ist.</summary>
      <returns>TRUE, wenn die Datenbank nicht vorhanden war und erstellt wurde, andernfalls FALSE.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>Ruft die Transaktion ab, in der die zugrundeliegende Verbindung aufgeführt ist.Ist möglicherweise NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Die Verbindungsfactory, die beim Erstellen einer <see cref="T:System.Data.Common.DbConnection" /> aus lediglich einem Datenbanknamen oder einer Verbindungszeichenfolge verwendet werden soll.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus.Durch das Aufrufen dieser Methode von außerhalb eines Initialisierers wird die Datenbank als nicht initialisiert markiert.Das bedeutet, dass bei dem Versuch, die Datenbank nach dem Löschen wieder zu verwenden, ein beliebiger Initialisierersatz erneut ausgeführt wird. Dies führt in der Regel dazu, dass versucht wird, die Datenbank automatisch erneut zu erstellen.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus.Die Verbindung mit der Datenbank wird wie in der Dokumentation für die <see cref="T:System.Data.Entity.DbContext" />-Klasse beschrieben mit dem angegebenen Datenbanknamen oder der angegebenen Verbindungszeichenfolge erstellt.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder eine Verbindungszeichenfolge für die Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Ermittelt, ob die angegebene Datenbank und die aktuelle Datenbank gleich sind.</summary>
      <returns>true, wenn die angegebene Datenbank gleich der aktuellen Datenbank ist; andernfalls false.</returns>
      <param name="obj">Die Datenbank, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Führt den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Das nach Ausführen des Befehls von der Datenbank zurückgegebene Ergebnis.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Führt den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Das nach Ausführen des Befehls von der Datenbank zurückgegebene Ergebnis.</returns>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Führt asynchron den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das Ergebnis, das von der Datenbank zurückgegeben wurde, nachdem der Befehl ausgeführt wurde.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt asynchron den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das Ergebnis, das von der Datenbank zurückgegeben wurde, nachdem der Befehl ausgeführt wurde.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>Führt asynchron den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das Ergebnis, das von der Datenbank zurückgegeben wurde, nachdem der Befehl ausgeführt wurde.</returns>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt asynchron den angegebenen DDL-/DML-Befehl für die Datenbank aus.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das Ergebnis, das von der Datenbank zurückgegeben wurde, nachdem der Befehl ausgeführt wurde.</returns>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist.Die Verbindung mit der Datenbank wird wie in der Dokumentation für die <see cref="T:System.Data.Entity.DbContext" />-Klasse beschrieben mit dem angegebenen Datenbanknamen oder der angegebenen Verbindungszeichenfolge erstellt.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder eine Verbindungszeichenfolge für die Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Gibt die Hashfunktion für diese Datenbank zurück.</summary>
      <returns>Die Hashfunktion für diese Datenbank.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Führt den registrierten <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> für diesen Kontext aus.Wenn der "force" auf TRUE festgelegt ist, wird der Initialisierer unabhängig davon ausgeführt, ob er zuvor ausgeführt wurde.Dies kann hilfreich sein, wenn eine Datenbank gelöscht wird, während eine Anwendung ausgeführt wird, und neu initialisiert werden muss.Wenn "force" auf FALSE festgelegt ist, wird der Initialisierer nur ausgeführt, wenn er noch nicht für diesen Kontext, dieses Modell und diese Verbindung in dieser Anwendungsdomäne ausgeführt wurde.Diese Methode wird in der Regel verwendet, wenn es erforderlich ist, dass die Datenbank vor dem Beginn eines Vorgangs erstellt und mit Startwerten versehen ist, wenn eine Verzögerung Probleme auslösen könnte, z. B. wenn der Vorgang Teil einer Transaktion ist.</summary>
      <param name="force">Bei Festlegung auf true wird der Initialisierer ausgeführt, auch wenn er bereits ausgeführt wurde.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>Legen Sie diese Eigenschaft fest, um den durch die <see cref="T:System.Data.Entity.DbContext" /> generierten SQL-Befehl für den gegebenen Delegat zu protokollieren.Um beispielsweise für die Konsole zu protokollieren, legen Sie diese Eigenschaft auf <see cref="M:System.Console.Write(System.String)" /> fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Legt den Datenbankinitialisierer fest, der für den angegebenen Kontexttyp verwendet werden soll.Der Datenbankinitialisierer wird aufgerufen, wenn der angegebene <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird, um zum ersten Mal auf eine Datenbank zuzugreifen.Die Standardstrategie für Code First-Kontexte ist eine Instanz von <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="strategy">Der zu verwendende Initialisierer oder NULL, um die Initialisierung für den angegebenen Kontexttyp zu deaktivieren.</param>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Elemente des angegebenen generischen Typs zurückgibt.Der Typ kann jeder Typ sein, der Eigenschaften aufweist, die mit den Namen der von der Abfrage zurückgegebenen Spalten übereinstimmen, oder es kann ein einfacher primitiver Typ sein.Der Typ muss kein Entitätstyp sein.Die Ergebnisse dieser Abfrage werden nie vom Kontext nachverfolgt, auch wenn der Typ des zurückgegebenen Objekts ein Entitätstyp ist.Verwenden Sie die <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />-Methode, um Entitäten zurückzugeben, die vom Kontext nachverfolgt werden.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Typ des von der Abfrage zurückgegebenen Objekts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Elemente des angegebenen Typs zurückgibt.Der Typ kann jeder Typ sein, der Eigenschaften aufweist, die mit den Namen der von der Abfrage zurückgegebenen Spalten übereinstimmen, oder es kann ein einfacher primitiver Typ sein.Der Typ muss kein Entitätstyp sein.Die Ergebnisse dieser Abfrage werden nie vom Kontext nachverfolgt, auch wenn der Typ des zurückgegebenen Objekts ein Entitätstyp ist.Verwenden Sie die <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />-Methode, um Entitäten zurückzugeben, die vom Kontext nachverfolgt werden.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="elementType">Der Typ des von der Abfrage zurückgegebenen Objekts.</param>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbank zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbank.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Ermöglicht dem Benutzer die Übergabe einer Datenbanktransaktion, die außerhalb des <see cref="T:System.Data.Entity.Database" />-Objekts erstellt wurde, wenn Sie möchten, dass Entity Framework Befehle innerhalb dieser externen Transaktion ausführt.Übergeben Sie alternativ NULL, um die Erinnerung des Frameworks an diese Transaktion zu löschen.</summary>
      <param name="transaction">die externe Transaktion</param>
      <exception cref="T:System.InvalidOperationException">Ausgelöst, wenn die Transaktion bereits abgeschlossen wurde.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Verbindung, die dem <see cref="T:System.Data.Entity.Database" />-Objekt zugeordnet ist, bereits in einer <see cref="T:System.Transactions.TransactionScope" />-Transaktion eingetragen ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Verbindung, die dem <see cref="T:System.Data.Entity.Database" />-Objekt zugeordnet ist, bereits an einer Transaktion teilnimmt.</exception>
      <exception cref="T:System.InvalidOperationException">Ausgelöst, wenn die Verbindung, die mit der Transaktion verknüpft ist, nicht der Verbindung von Entity Framework entspricht.</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>Eine Klasse, die von dieser Klasse abgeleitet ist, kann der gleichen Assembly wie eine Klasse hinzugefügt werden, die von <see cref="T:System.Data.Entity.DbContext" /> abgeleitet ist, um die Entity Framework-Konfiguration für eine Anwendung zu definieren.Die Konfiguration wird festgelegt, indem geschützte Methoden aufgerufen und geschützte Eigenschaften dieser Klasse im Konstruktor des abgeleiteten Typs festgelegt werden.Der zu verwendende Typ kann auch in der Konfigurationsdatei der Anwendung registriert werden.Weitere Informationen zur Entity Framework-Konfiguration finden Sie unter http://go.microsoft.com/fwlink/?LinkId=260883.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbConfiguration" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Fügt eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Instanz zur Verantwortungskette der Resolver hinzu, die verwendet werden, um Abhängigkeiten aufzulösen, die für Entity Framework erforderlich sind.</summary>
      <param name="resolver">Der hinzuzufügende Resolver.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Fügt eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Instanz zur Verantwortungskette der Resolver hinzu, die verwendet werden, um Abhängigkeiten aufzulösen, die für Entity Framework erforderlich sind.</summary>
      <param name="resolver">Der hinzuzufügende Resolver.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>Registriert einen <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" /> beim Anwendungsstart.Beachten Sie, dass Interceptors auch jederzeit über <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> hinzugefügt oder entfernt werden können.</summary>
      <param name="interceptor">Der Interceptor, der registriert werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Ruft den <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> ab, der verwendet wird, um Dienstabhängigkeiten in Entity Framework aufzulösen.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, der verwendet wird, um Dienstabhängigkeiten in Entity Framework aufzulösen.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>Versucht, die <see cref="T:System.Data.Entity.DbConfiguration" /> aus einer angegebenen Assembly zu finden und zu laden.Diese Methode sollte von Tools verwendet werden, um sicherzustellen, dass die korrekte Konfiguration in die Anwendungsdomäne geladen wird.Die Tools sollten diese Methode verwenden, bevor auf die <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />-Eigenschaft zugegriffen wird.Wenn die Tools den verwendeten <see cref="T:System.Data.Entity.DbContext" />-Typ kennen, dann sollte die <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" />-Methode verwendet werden, da hierbei die Chance größer ist, dass die korrekte Konfiguration gefunden wird.</summary>
      <param name="assemblyHint">Eine <see cref="T:System.Reflection.Assembly" />, das für die Konfigurationssuche verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>Versucht, die <see cref="T:System.Data.Entity.DbConfiguration" /> für den gegebenen <see cref="T:System.Data.Entity.DbContext" /> zu finden und zu laden.Diese Methode sollte von Tools verwendet werden, um sicherzustellen, dass die korrekte Konfiguration in die Anwendungsdomäne geladen wird.Die Tools sollten diese Methode verwenden, bevor auf die <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />-Eigenschaft zugegriffen wird.</summary>
      <param name="contextType">Ein <see cref="T:System.Data.Entity.DbContext" />-Typ, der für die Konfigurationssuche verwendet werden soll.</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>Tritt während der EF-Initialisierung auf, nachdem die DbConfiguration erstellt wurde, jedoch kurz bevor sie einsatzbereit ist und gesperrt wird. </summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen <see cref="T:System.Object" />.</summary>
      <returns>Eine flache Kopie des aktuellen <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>Die Sigletoninstanz von <see cref="T:System.Data.Entity.DbConfiguration" /> für diese Anwendungsdomäne.Dies kann beim Anwendungsstart festgelegt werden, bevor Entity Framework-Funktionen verwendet wurden. Anschließend muss sie als schreibgeschützt behandelt werden.</summary>
      <param name="configuration">Die Instanz der <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> die Erstellung von Instanzen eines Kontext zu erlauben, der keinen öffentlichen, parameterlosen Konstruktor hat.</summary>
      <param name="factory">Ein Delegat zur Erzeugung von Kontext-Instanzen.</param>
      <typeparam name="TContext">Der Kontexttyp, für den die Factory verwendet werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> die Erstellung von Instanzen eines Kontext zu erlauben, der keinen öffentlichen, parameterlosen Konstruktor hat.</summary>
      <param name="contextType">Der Kontexttyp, für den die Factory verwendet werden soll.</param>
      <param name="factory">Ein Delegat zur Erzeugung von Kontext-Instanzen.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um den Datenbankinitialisierer zur Verwendung mit dem angegebenen Kontexttyp festzulegen.Der Datenbankinitialisierer wird aufgerufen, wenn der angegebene <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird, um zum ersten Mal auf eine Datenbank zuzugreifen.Die Standardstrategie für Code First-Kontexte ist eine Instanz von <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="initializer">Der zu verwendende Initialisierer oder NULL, um die Initialisierung für den angegebenen Kontexttyp zu deaktivieren.</param>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Factory für den Typ von <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> zur Verwendung mit <see cref="P:System.Data.Entity.Database.Log" /> einzustellen.</summary>
      <param name="logFormatterFactory">Ein Delegat zur Erzeugung von Formatierer-Instanzen.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>Legt die <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> fest, die zum vereinbarungsgemäßen Erstellen von Verbindungen verwendet wird, wenn keine andere Verbindungszeichenfolge oder Verbindung an <see cref="T:System.Data.Entity.DbContext" /> übermittelt wird oder durch ihn ermittelt werden kann.Beachten Sie, dass eine standardmäßige Verbindungsfactory in der Datei "app.config" oder "web.config" festgelegt wird, wenn das EntityFramework NuGet-Paket installiert wird.Wie bei allen Konfigurationsdatei-Einstellungen hat die in der Konfigurationsdatei festgelegte Standardverbindungsfactory Vorrang vor den Einstellungen, die durch diese Methode vorgenommen werden.Daher muss die Einstellung aus der Konfigurationsdatei entfernt werden, bevor das Aufrufen dieser Methode wirksam werden kann.Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um die standardmäßig verwendete Verbindungsfactory zu ändern.</summary>
      <param name="connectionFactory">Die Verbindungsfactory.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um einen <see cref="T:System.Func`3" />-Delegaten festzulegen, der für die Erstellung des Standard-<see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> für beliebige <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> verwendet werden soll.Diese Standardfactory wird nur verwendet, wenn in der <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> keine Factory festgelegt ist und wenn keine Factory für den Anbieter mit der <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />-Methode registriert wurde.</summary>
      <param name="factory">Eine Factory zum Erstellen von <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />-Instanzen für eine angegebene <see cref="T:System.Data.Common.DbConnection" /> und einen <see cref="T:System.String" />, der das Standardschema darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um die globale Instanz von <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> festzulegen, die verwendet werden soll, wenn ein räumlicher Anbieter benötigt wird und kein anbieterspezifischer räumlicher Anbieter gefunden werden kann.Anbieterspezifische räumliche Anbieter werden normalerweise von einer <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />-Implementierung abgerufen, die wiederum beim Auflösen eines Dienstes für <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> mit Übergabe des invarianten Anbieternamens zurückgegeben wird.Dies funktioniert jedoch nicht für eigenständige Instanzen von <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> und <see cref="T:System.Data.Entity.Spatial.DbGeography" />, da in diesen Fällen der zu verwendende räumliche Anbieter nicht bekannt sein kann.Daher wird bei der Erzeugung von eigenständigen Instanzen von <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> und <see cref="T:System.Data.Entity.Spatial.DbGeography" /> immer der globale räumliche Anbieter verwendet.</summary>
      <param name="spatialProvider">Der räumliche Anbieter.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um einen <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> zu registrieren.</summary>
      <param name="transactionHandlerFactory">Eine Funktion, die eine neue Instanz eines Transaktionshandlers zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> zur Verwendung mit dem Anbieter zu registrieren, der vom angegebenen invarianten Namen dargestellt wird.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die diese Ausführungsstrategie verwendet wird.</param>
      <param name="getExecutionStrategy">Eine Funktion, die eine neue Instanz einer Ausführungsstrategie zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> zur Verwendung mit dem Anbieter zu registrieren, der vom angegebenen invarianten Namen und Servernamen dargestellt wird.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die diese Ausführungsstrategie verwendet wird.</param>
      <param name="getExecutionStrategy">Eine Funktion, die eine neue Instanz einer Ausführungsstrategie zurückgibt.</param>
      <param name="serverName">Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um einen <see cref="T:System.Func`3" />-Delegaten festzulegen, der die Erstellung eines benutzerdefinierten <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> für den angegebenen Anbieter für eine bestimmte <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> zulässt, für die keine Factory explizit festgelegt wurde.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, für den dieser Generator verwendet werden soll.</param>
      <param name="factory">Eine Factory zum Erstellen von <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />-Instanzen für eine angegebene <see cref="T:System.Data.Common.DbConnection" /> und einen <see cref="T:System.String" />, der das Standardschema darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet wird, um eine Implementierung von <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> festzulegen, die es ermöglicht, Anbietermanifesttoken von Verbindungen abzurufen, ohne dabei unbedingt eine Verbindung öffnen zu müssen.</summary>
      <param name="resolver">Der Manifesttokenresolver.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Factory für Implementierungen von <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> festzulegen, die die Serialisierung benutzerdefinierter Anmerkungen in Form von <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> von und nach EDMX-XML ermöglicht.</summary>
      <param name="annotationName">Der Name der benutzerdefinierten Anmerkung, die von diesem Serialisierer verarbeitet werden soll.</param>
      <param name="serializerFactory">Ein Delegat zur Erzeugung von Serialisierer-Instanzen.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> zur Verwendung mit dem Anbieter zu registrieren, der vom angegebenen invarianten Namen dargestellt wird.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, für den dieser Generator verwendet werden soll.</param>
      <param name="sqlGenerator">Ein Delegat, der bei jedem Aufruf eine neue Instanz des SQL-Generators zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Func`2" /> als Factory für den Modellcacheschlüssel festzulegen, die es ermöglicht, den zum Zwischenspeichern des Modells hinter einem <see cref="T:System.Data.Entity.DbContext" /> verwendeten Schlüssel zu ändern.</summary>
      <param name="keyFactory">Die Schlüsselfactory.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um den Pluralisierungsdienst festzulegen.</summary>
      <param name="pluralizationService">Der zu verwendende Pluralisierungsdienst.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um einen ADO.NET-Anbieter zu registrieren.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser Anbieter verwendet wird.</param>
      <param name="providerFactory">Die Anbieterinstanz.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Implementierung von <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> festzulegen, die das Abrufen einer <see cref="T:System.Data.Common.DbConnection" /> von einer <see cref="T:System.Data.Common.DbProviderFactory" /> ermöglicht, wenn die Standardimplementierung nicht ausreichend ist.</summary>
      <param name="providerFactoryResolver">Der Anbieterfactorydienst.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um einen Entity Framework-Anbieter zu registrieren.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser Anbieter verwendet wird.</param>
      <param name="provider">Die Anbieterinstanz.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Implementierung von <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> zur Verwendung mit einem bestimmten Anbieter und Anbietermanifesttoken einzustellen.</summary>
      <param name="key">Der <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, der den Typ der ADO.NET-Verbindung angibt, für die dieser räumliche Anbieter verwendet wird.</param>
      <param name="spatialProvider">Der räumliche Anbieter.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Implementierung von <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> zur Verwendung mit einem bestimmten Anbieter mit beliebigen Manifesttoken einzustellen.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser räumliche Anbieter verwendet wird.</param>
      <param name="spatialProvider">Der räumliche Anbieter.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine Vorhandenseinsüberprüfung für Datenbanktabellen für einen bestimmten Anbieter zu registrieren.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser Anbieter verwendet wird.</param>
      <param name="tableExistenceChecker">Die Vorhandenseinsüberprüfung für Datenbanktabellen, die verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> zur Verwendung mit dem Anbieter zu registrieren, der vom angegebenen invarianten Namen dargestellt wird.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser Transaktionshandler verwendet wird.</param>
      <param name="transactionHandlerFactory">Eine Funktion, die eine neue Instanz eines Transaktionshandlers zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>Rufen Sie diese Methode vom Konstruktor einer Klasse auf, die von <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleitet ist, um eine <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> zur Verwendung mit dem Anbieter zu registrieren, der vom angegebenen invarianten Namen und Servernamen dargestellt wird.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die dieser Transaktionshandler verwendet wird.</param>
      <param name="transactionHandlerFactory">Eine Funktion, die eine neue Instanz eines Transaktionshandlers zurückgibt.</param>
      <param name="serverName">Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>Dieses Attribut kann in einer Unterklasse von <see cref="T:System.Data.Entity.DbContext" /> platziert werden, um anzugeben, dass sich die Unterklasse von <see cref="T:System.Data.Entity.DbConfiguration" />, die für die codebasierte Konfiguration der Anwendung steht, in einer anderen Assembly als der Kontexttyp befindet.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>Gibt an, dass die Unterklasse von <see cref="T:System.Data.Entity.DbConfiguration" />, die durch den angegebenen, durch eine Assembly qualifizierten Namen dargestellt wird, für eine codebasierte Konfiguration dieser Anwendung verwendet werden soll.</summary>
      <param name="configurationTypeName">Der zu verwendende <see cref="T:System.Data.Entity.DbConfiguration" />-Typ.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>Gibt an, dass die angegebene Unterklasse von <see cref="T:System.Data.Entity.DbConfiguration" /> für eine codebasierte Konfiguration dieser Anwendung verwendet werden soll.</summary>
      <param name="configurationType">Der zu verwendende <see cref="T:System.Data.Entity.DbConfiguration" />-Typ.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>Ruft die Unterklasse von <see cref="T:System.Data.Entity.DbConfiguration" /> ab, die für eine codebasierte Konfiguration dieser Anwendung verwendet werden soll.</summary>
      <returns>Die Unterklasse von <see cref="T:System.Data.Entity.DbConfiguration" />, die für eine codebasierte Konfiguration dieser Anwendung verwendet werden soll.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Eine DbContext-Instanz stellt eine Kombination des Arbeitseinheitsmusters und des Repositorymusters dar, die zum Abfragen einer Datenbank und Gruppieren von Änderungen verwendet werden kann, die dann als Einheit in den Speicher zurückgeschrieben werden.DbContext gleicht konzeptionell ObjectContext.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Erstellt eine neue Kontextinstanz unter Verwendung der Konventionen zum Erstellen des Namens der Datenbank, mit der eine Verbindung hergestellt wird.Konventionsgemäß ist der Name der vollständige Name (Namespacename + Klassenname) der abgeleiteten Kontextklasse.Siehe Klassenhinweise zur Erstellung einer Verbindung.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Erstellt eine neue Kontextinstanz mithilfe der vorhandenen Verbindung zum Herstellen einer Verbindung mit einer Datenbank.Die Verbindung wird nicht verworfen, wenn der Kontext verworfen wird, wenn <paramref name="contextOwnsConnection" /> den Wert false aufweist.</summary>
      <param name="existingConnection">Eine vorhandene Verbindung, die für den neuen Kontext verwendet werden soll.</param>
      <param name="contextOwnsConnection">Mit true wird die Verbindung verworfen, wenn der Kontext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Erstellt mithilfe der vorhandenen Verbindung zum Herstellen einer Verbindung mit einer Datenbank eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells.Die Verbindung wird nicht verworfen, wenn der Kontext verworfen wird, wenn <paramref name="contextOwnsConnection" /> den Wert false aufweist.</summary>
      <param name="existingConnection">Eine vorhandene Verbindung, die für den neuen Kontext verwendet werden soll.</param>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
      <param name="contextOwnsConnection">Mit true wird die Verbindung verworfen, wenn der Kontext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>Erstellt eine neue Kontextinstanz um einen vorhandenen ObjectContext.</summary>
      <param name="objectContext">Ein vorhandener ObjectContext zum Umschließen des neuen Kontexts.</param>
      <param name="dbContextOwnsObjectContext">Mit true wird ObjectContext verworfen, wenn der DbContext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Erstellt mit Konventionen zum Erstellen des Namens der Datenbank, mit der eine Verbindung hergestellt wird, eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells.Konventionsgemäß ist der Name der vollständige Name (Namespacename + Klassenname) der abgeleiteten Kontextklasse.Siehe Klassenhinweise zur Erstellung einer Verbindung.</summary>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Erstellt eine neue Kontextinstanz mit der angegebenen Zeichenfolge als Name oder Verbindungszeichenfolge für die Datenbank, mit der eine Verbindung hergestellt wird.Siehe Klassenhinweise zur Erstellung einer Verbindung.</summary>
      <param name="nameOrConnectionString">Entweder der Datenbankname oder eine Verbindungszeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Erstellt mit der angegebenen Zeichenfolge als Name oder Verbindungszeichenfolge für die Datenbank, mit der eine Verbindung hergestellt wird, eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells.Siehe Klassenhinweise zur Erstellung einer Verbindung.</summary>
      <param name="nameOrConnectionString">Entweder der Datenbankname oder eine Verbindungszeichenfolge.</param>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Bietet Zugriff auf Funktionen des Kontexts, die Änderungsnachverfolgung von Entitäten behandeln.</summary>
      <returns>Ein Objekt für den Zugriff auf Funktionen, die Änderungsnachverfolgung behandeln.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Bietet Zugriff auf Konfigurationsoptionen für den Kontext.</summary>
      <returns>Ein Objekt, das für den Zugriff auf Konfigurationsoptionen verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Erstellt eine Datenbankinstanz für diesen Kontext, die Ihnen ermöglicht, die zugrunde liegende Datenbank auf Erstellung, Löschen oder Vorhandensein zu überprüfen.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Ruft die geschützte Dispose-Methode auf.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Verwirft den Kontext.Der zugrunde liegende <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> wird auch verworfen, wenn er von diesem Kontext erstellt wurde oder wenn der Besitz beim Erstellen dieses Kontexts an diesen Kontext übergeben wurde.Die Verbindung mit der Datenbank (<see cref="T:System.Data.Common.DbConnection" />-Objekt) wird auch verworfen, wenn sie von diesem Kontext erstellt wurde oder wenn der Besitz beim Erstellen dieses Kontexts an diesen Kontext übergeben wurde.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben; false, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekt für die angegebene Entität ab, um Zugriff auf Informationen zur Entität und die Fähigkeit zum Ausführen von Aktionen für die Entität bereitzustellen.</summary>
      <returns>Ein Eintrag für die Entität.</returns>
      <param name="entity">Die Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Objekt für die angegebene Entität ab, um Zugriff auf Informationen zur Entität und die Fähigkeit zum Ausführen von Aktionen für die Entität bereitzustellen.</summary>
      <returns>Ein Eintrag für die Entität.</returns>
      <param name="entity">Die Entität.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Ermittelt, ob der angegebene DbContext gleich dem aktuellen DbContext ist.</summary>
      <returns>TRUE, wenn der angegebene DbContext und der aktuelle DbContext gleich sind; andernfalls FALSE.</returns>
      <param name="obj">Der DbContext, der mit dem aktuellen DbContext verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Gibt die Hashfunktion für diesen DbContext zurück.</summary>
      <returns>Die Hashfunktion für diesen DbContext zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Gibt den Typ des aktuellen DbContext zurück.</summary>
      <returns>Der Typ für den aktuellen DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Überprüft nachverfolgte Entitäten und gibt eine Auflistung von <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> zurück, die Validierungsergebnisse enthält.</summary>
      <returns>Eine Auflistung von Validierungsergebnissen für ungültige Entitäten.Die Auflistung ist nie NULL, und sie darf keine NULL-Werte oder Ergebnisse für gültige Entitäten enthalten.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Diese Methode wird aufgerufen, wenn das Modell für einen abgeleiteten Kontext initialisiert wurde, jedoch bevor das Modell gesperrt und zum Initialisieren des Kontexts verwendet wurde.Die Standardimplementierung dieser Methode führt keine Aktion aus. Sie kann jedoch in einer abgeleiteten Klasse überschrieben werden, damit das Modell weiter konfiguriert werden kann, bevor es gesperrt wird.</summary>
      <param name="modelBuilder">Der Generator, der das Modell für den zu erstellenden Kontext definiert.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Speichert alle in diesem Kontext vorgenommenen Änderungen in der zugrunde liegenden Datenbank.</summary>
      <returns>Die Anzahl der Objekte, die in die zugrunde liegende Datenbank geschrieben werden.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Beim Senden von Aktualisierungen an die Datenbank ist ein Fehler aufgetreten.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Ein Datenbankbefehl hat nicht die erwartete Anzahl an Zeilen beeinflusst.Dies weist in der Regel auf eine Verletzung der vollständigen Parallelität hin; das heißt, dass nach der Abfrage eine Zeile in der Datenbank geändert wurde.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">Das Speichern wurde abgebrochen, da die Validierung von Entitätseigenschaftswerten fehlgeschlagen ist.</exception>
      <exception cref="T:System.NotSupportedException">Es wurde versucht, ein nicht unterstütztes Verhalten zu verwenden, wie das gleichzeitige Ausführen mehrerer asynchroner Befehle für dieselbe Kontextinstanz.</exception>
      <exception cref="T:System.ObjectDisposedException">Der Kontext oder die Verbindung wurde verworfen.</exception>
      <exception cref="T:System.InvalidOperationException">Bei dem Versuch, Entitäten im Kontext zu verarbeiten, ist vor oder nach dem Senden von Befehlen an die Datenbank ein Fehler aufgetreten.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>Speichert asynchron alle in diesem Kontext vorgenommenen Änderungen in der zugrunde liegenden Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Speichervorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Objekte, die auf die zugrunde liegende Datenbank geschrieben werden.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Beim Senden von Aktualisierungen an die Datenbank ist ein Fehler aufgetreten.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Ein Datenbankbefehl hat nicht die erwartete Anzahl an Zeilen beeinflusst.Dies weist in der Regel auf eine Verletzung der vollständigen Parallelität hin; das heißt, dass nach der Abfrage eine Zeile in der Datenbank geändert wurde.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">Das Speichern wurde abgebrochen, da die Validierung von Entitätseigenschaftswerten fehlgeschlagen ist.</exception>
      <exception cref="T:System.NotSupportedException">Es wurde versucht, ein nicht unterstütztes Verhalten zu verwenden, wie das gleichzeitige Ausführen mehrerer asynchroner Befehle für dieselbe Kontextinstanz.</exception>
      <exception cref="T:System.ObjectDisposedException">Der Kontext oder die Verbindung wurde verworfen.</exception>
      <exception cref="T:System.InvalidOperationException">Bei dem Versuch, Entitäten im Kontext zu verarbeiten, ist vor oder nach dem Senden von Befehlen an die Datenbank ein Fehler aufgetreten.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Speichert asynchron alle in diesem Kontext vorgenommenen Änderungen in der zugrunde liegenden Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Speichervorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Objekte, die auf die zugrunde liegende Datenbank geschrieben werden.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Gibt eine <see cref="T:System.Data.Entity.DbSet`1" />-Instanz für den Zugriff auf Entitäten des angegebenen Typs im Kontext und den zugrunde liegenden Speicher zurück.</summary>
      <returns>Eine Menge für den angegebenen Entitätstyp.</returns>
      <typeparam name="TEntity">Die Entität, für die eine Menge zurückgegeben werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Gibt eine nicht generische <see cref="T:System.Data.Entity.DbSet" />-Instanz für den Zugriff auf Entitäten des angegebenen Typs im Kontext und den zugrunde liegenden Speicher zurück.</summary>
      <returns>Eine Menge für den angegebenen Entitätstyp.</returns>
      <param name="entityType">Der Entitätstyp, für den eine Menge zurückgegeben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Erweiterungspunkt, der es dem Benutzer ermöglicht, das Standardverhalten, mit dem nur Entitäten mit dem Status "Added" und "Modified" überprüft werden, zu überschreiben.</summary>
      <returns>TRUE, um die Validierung fortzusetzen, andernfalls FALSE.</returns>
      <param name="entityEntry">DbEntityEntry-Instanz, die überprüft werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Gibt den Entity Framework-ObjectContext zurück, der diesem Kontext zugrunde liegt.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Gibt die Zeichenfolgendarstellung des DbContext zurück.</summary>
      <returns>Die Zeichenfolgendarstellung des DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Erweiterungspunkt, der es dem Benutzer ermöglicht, die Validierung einer Entität anzupassen oder Validierungsergebnisse herauszufiltern.Wird von <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> aufgerufen.</summary>
      <returns>Ergebnis der Entitätsvalidierung.Möglicherweise NULL, wenn überschrieben.</returns>
      <param name="entityEntry">DbEntityEntry-Instanz, die überprüft werden soll.</param>
      <param name="items">Benutzerdefiniertes Wörterbuch mit zusätzlichen Informationen für die benutzerdefinierte Validierung.Es wird an <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> übergeben und als <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" /> verfügbar gemacht.Dieser Parameter ist optional und kann NULL sein.</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>Umschließt den Zugriff auf das Transaktionsobjekt auf der zugrunde liegenden Speicherverbindung und stellt sicher, dass Entity Framework Befehle für die Datenbank innerhalb des Kontexts dieser Transaktion ausführt.Eine Instanz dieser Klasse wird durch das Aufrufen von BeginTransaction() auf dem <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" />-Objekt abgerufen.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>Führt die zugrunde liegende Speichertransaktion aus.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>Bereinigt das Transaktionsobjekt und stellt sicher, dass Entity Framework diese Transaktion nicht mehr verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>Gibt die von diesem Transaktionsobjekt verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>Gibt den Hashcode der aktuellen Instanz zurück.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>Ruft den zugrunde liegenden Typ ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der zugrunde liegende Typ, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>Führt einen Rollback für die zugrunde liegende Speichertransaktion aus.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>Ruft die Datenbanktransaktion (Speichertransaktion) ab, die dieser Kontexttransaktion zugrunde liegt.</summary>
      <returns>Die Datenbanktransaktion (Speichertransaktion), die dieser Kontexttransaktion zugrunde liegt.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>Gibt an, dass die angegebene Methode ein Proxy für eine EDM-Funktion ist.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbFunctionAttribute" />-Klasse.</summary>
      <param name="namespaceName">Der Namespace der "Mapped-to"-Funktion.</param>
      <param name="functionName">Der Name der "Mapped-to"-Funktion.</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>Der Name der "Mapped-to"-Funktion.</summary>
      <returns>Der Name der "Mapped-to"-Funktion.</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>Der Namespace der "Mapped-to"-Funktion.</summary>
      <returns>Der Namespace der "Mapped-to"-Funktion.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>Stellt CLR-Methoden (Common Language Runtime) bereit, die die kanonischen EDM-Funktionen für die Verwendung in <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities-Abfragen verfügbar macht.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddDays-EDM-Funktion auf, um die angegebene Anzahl von Tagen einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Tage.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddDays-EDM-Funktion auf, um die angegebene Anzahl von Tagen einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Tage.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddHours-EDM-Funktion auf, um die angegebene Anzahl von Stunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddHours-EDM-Funktion auf, um die angegebene Anzahl von Stunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddHours"-EDM-Funktion auf, um die angegebene Anzahl von Stunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMinutes-EDM-Funktion auf, um die angegebene Anzahl von Minuten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMinutes-EDM-Funktion auf, um die angegebene Anzahl von Minuten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddMinutes"-EDM-Funktion auf, um die angegebene Anzahl von Minuten einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMonths-EDM-Funktion auf, um die angegebene Anzahl von Monaten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Monate.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMonths-EDM-Funktion auf, um die angegebene Anzahl von Monaten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Monate.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddNanoseconds-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddNanoseconds-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddNanoseconds"-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddSeconds-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddSeconds-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddSeconds"-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddYears-EDM-Funktion auf, um die angegebene Anzahl von Jahren einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Jahre.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddYears-EDM-Funktion auf, um die angegebene Anzahl von Jahren einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Jahre.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, fungiert diese Methode als ein Operator, um sicherzustellen, dass die Eingabe als Nicht-Unicode-Zeichenfolge verarbeitet wird.</summary>
      <returns>Die Eingabezeichenfolge, behandelt als Nicht-Unicode-Zeichenfolge.</returns>
      <param name="value">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, fungiert diese Methode als ein Operator, um sicherzustellen, dass die Eingabe als Unicode-Zeichenfolge verarbeitet wird.</summary>
      <returns>Die Eingabezeichenfolge, behandelt als Unicode-Zeichenfolge.</returns>
      <param name="value">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateDateTime"-EDM-Funktion auf, um ein neues <see cref="T:System.DateTime" />-Objekt zu erstellen.</summary>
      <returns>Das neue Datum/die neue Uhrzeit.</returns>
      <param name="year">Das Jahr.</param>
      <param name="month">Der Monat (1-basiert).</param>
      <param name="day">Der Tag (1-basiert).</param>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateDateTimeOffset"-EDM-Funktion auf, um ein neues <see cref="T:System.DateTimeOffset" />-Objekt zu erstellen.</summary>
      <returns>Das neue Datum/die neue Uhrzeit.</returns>
      <param name="year">Das Jahr.</param>
      <param name="month">Der Monat (1-basiert).</param>
      <param name="day">Der Tag (1-basiert).</param>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
      <param name="timeZoneOffset">Der Zeitzonenoffsetteil des neuen Datums.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateTime"-EDM-Funktion auf, um ein neues <see cref="T:System.TimeSpan" />-Objekt zu erstellen.</summary>
      <returns>Die neue Zeitspanne.</returns>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffDays EDM-EDM-Funktion auf, um die Anzahl an Tagen zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Tage zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffDays EDM-EDM-Funktion auf, um die Anzahl an Tagen zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Tage zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMonths-EDM-Funktion auf, um die Anzahl an Monaten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Monate zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMonths-EDM-Funktion auf, um die Anzahl an Monaten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Monate zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffYears-EDM-Funktion auf, um die Anzahl an Jahren zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Jahre zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffYears-EDM-Funktion auf, um die Anzahl an Jahren zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Jahre zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "GetTotalOffsetMinutes"-EDM-Funktion auf, um die Anzahl an Minuten zurückzugeben, die die angegebene Zeit von der UTC-Zeit abweicht.Dieser Wert beträgt im Allgemeinen zwischen +780 und -780 (+13 Stunden bzw. -13 Stunden).</summary>
      <returns>Der Offset der Eingabe aus UTC.</returns>
      <param name="dateTimeOffsetArgument">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Left"-EDM-Funktion auf, um eine gegebene Anzahl des äußersten linken Zeichens in einer Zeichenfolge zurückzugeben.</summary>
      <returns>Eine Zeichenfolge, die die Anzahl der Zeichen enthält, nach der vom linken Rand der Eingabezeichenfolge gefragt wurde.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
      <param name="length">Die Anzahl der zurückzugebenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Reverse"-EDM-Funktion auf, um eine angegebene Zeichenfolge mit umgekehrten Zeichenreihenfolge zurückzugeben.</summary>
      <returns>Die Eingabezeichenfolge mit umgekehrter Reihenfolge der Zeichen.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Right"-EDM-Funktion auf, um eine gegebene Anzahl des äußersten rechten Zeichens in einer Zeichenfolge zurückzugeben.</summary>
      <returns>Eine Zeichenfolge, die die Anzahl der Zeichen enthält, nach der vom rechten Rand der Eingabezeichenfolge gefragt wurde.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
      <param name="length">Die Anzahl der zurückzugebenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Truncate-EDM-Funktion auf, um den angegebenen Wert auf die Anzahl der angegebenen Ziffern zu kürzen.</summary>
      <returns>Der abgeschnittene Wert.</returns>
      <param name="value">Der abzuschneidende Wert.</param>
      <param name="digits">Die Anzahl der beizubehaltenden Stellen.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Truncate-EDM-Funktion auf, um den angegebenen Wert auf die Anzahl der angegebenen Ziffern zu kürzen.</summary>
      <returns>Der abgeschnittene Wert.</returns>
      <param name="value">Der abzuschneidende Wert.</param>
      <param name="digits">Die Anzahl der beizubehaltenden Stellen.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische TruncateTime-EDM-Funktion auf, um das angegebene Datum mit gelöschtem Zeitbereich zurückzugeben.</summary>
      <returns>Das Eingabedatum mit gelöschtem Uhrzeitteil.</returns>
      <param name="dateValue">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische TruncateTime-EDM-Funktion auf, um das angegebene Datum mit gelöschtem Zeitbereich zurückzugeben.</summary>
      <returns>Das Eingabedatum mit gelöschtem Uhrzeitteil.</returns>
      <param name="dateValue">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder wird verwendet, um einem Datenbankschema CLR-Klassen zuzuordnen.Dieser codezentrierte Ansatz zum Erstellen eines Entity Data Model (EDM) wird als "Code First" bezeichnet.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse.Zum Ermitteln des ursprünglichen Modells wird der Satz der Konventionen in der letzten Version des Entity Framework verwendet, die auf dem Computer installiert ist.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse, die einen bestimmten Satz von Konventionen verwendet, um das ursprüngliche Modell zu ermitteln.</summary>
      <param name="modelBuilderVersion">Die Version von Konventionen, die verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> auf Grundlage der Konfiguration, die mit diesem Generator ausgeführt wurde.Die Verbindung wird verwendet, um den verwendeten Datenbankanbieter zu bestimmen, da sich dies auf die Datenbankebene des generierten Modells auswirkt.</summary>
      <returns>Das Modell, das erstellt wurde.</returns>
      <param name="providerConnection">Die Verbindung, die zum Bestimmen der Anbieterinformationen verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> auf Grundlage der Konfiguration, die mit diesem Generator ausgeführt wurde.Anbieterinformationen müssen angegeben werden, da sich dies auf die Datenbankebene des generierten Modells auswirkt.Für SqlClient lautet der invariante Name 'System.Data.SqlClient', und das Manifesttoken ist das Versionsjahr (z. B."2005", "2008" usw.).</summary>
      <returns>Das Modell, das erstellt wurde.</returns>
      <param name="providerInfo">Der Datenbankanbieter, für den das Modell verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Registriert einen Typ als komplexen Typ im Modell und gibt ein Objekt zurück, das zum Konfigurieren des komplexen Typs verwendet werden kann.Diese Methode kann mehrmals für den gleichen Typ aufgerufen werden, um mehrere Zeilen der Konfiguration auszuführen.</summary>
      <returns>Das Konfigurationsobjekt für den angegebenen komplexen Typ.</returns>
      <typeparam name="TComplexType">Der Typ, der registriert oder konfiguriert werden soll.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Ruft das <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> für diesen DbModelBuilder ab.Die Registrierungsstelle ermöglicht das Registrieren von abgeleiteten Konfigurationen für Entitäten und komplexe Typen bei dem Generator.</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Bietet Zugriff auf die Einstellungen des DbModelBuilder, die Konventionen behandeln.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Registriert einen Entitätstyp als Teil des Modells und gibt ein Objekt zurück, das zum Konfigurieren der Entität verwendet werden kann.Diese Methode kann mehrmals für die gleiche Entität aufgerufen werden, um mehrere Zeilen der Konfiguration auszuführen.</summary>
      <returns>Das Konfigurationsobjekt für den angegebenen Entitätstyp.</returns>
      <typeparam name="TEntityType">Der Typ, der registriert oder konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Gibt an, ob der <see cref="T:System.Data.Entity.DbModelBuilder" /> mit dem angegebenen Objekt identisch ist.</summary>
      <returns>true, wenn <see cref="T:System.Data.Entity.DbModelBuilder" /> gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>Konfiguriert den standardmäßigen Datenbankschemanamen.Dieser standardmäßige Datenbankschemaname wird für Datenbankobjekte verwendet, die über keinen ausdrücklich konfigurierten Schemanamen verfügen.</summary>
      <returns>Die gleiche DbModelBuilder-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="schema">Der Name des standardmäßigen Datenbankschemas.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Schließt einen Typ aus dem Modell aus.Wird verwendet, um Typen aus dem Modell zu entfernen, die während der Ermittlung des ursprünglichen Modells konventionsgemäß hinzugefügt wurden.</summary>
      <returns>Die gleiche DbModelBuilder-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <typeparam name="T">Der auszuschließende Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Schließt die angegebenen Typen vom Modell aus.Wird verwendet, um Typen aus dem Modell zu entfernen, die während der Ermittlung des ursprünglichen Modells konventionsgemäß hinzugefügt wurden.</summary>
      <returns>Die gleiche DbModelBuilder-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="types">Die Typen, die aus dem Modell ausgeschlossen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle Eigenschaften im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle primitiven Eigenschaften des angegebenen Typs im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
      <typeparam name="T">Der Typ der Eigenschaften, für den die Konvention gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>Registriert einen Entitätstyp als Teil des Modells.</summary>
      <param name="entityType">Der zu registrierende Typ.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.DbModelBuilder" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle Entitäten und komplexen Typen im Modell gilt, die von dem durch das generische Argument angegebenen Typ erben oder diesen implementieren.Diese Methode registriert Typen nicht als Teil des Modells.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
      <typeparam name="T">Der Typ der Entitäten oder komplexen Typen, für den diese Konvention gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle Entitäten und komplexen Typen im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Ein Wert aus dieser Enumeration kann direkt für die <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse bereitgestellt werden oder im <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> verwendet werden, das auf eine von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Klasse angewendet wird.Der verwendete Wert definiert, welche Version der DbContext- und DbModelBuilder-Konventionen beim Erstellen eines Modells mit Code, der unter dem Namen "Code First" bekannt ist.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     Gibt an, dass die neueste Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Gibt an, dass die mit Entity Framework 4.1 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Gibt an, dass die mit Entity Framework 5.0 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Gibt an, dass die mit Entity Framework 5.0 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll, wenn .NET Framework 4 als Zielversion verwendet wird.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Gibt an, dass die mit Entity Framework 6.0 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Dieses Attribut kann auf eine von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Klasse angewendet werden, um festzulegen, welche Version von DbContext- und <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen beim Erstellen eines Modells aus Code, der unter dem Namen "Code First" bekannt ist, verwendet werden soll.Ausführliche Informationen über DbModelBuilder-Versionen finden Sie in den Ausführungen zur <see cref="T:System.Data.Entity.DbModelBuilderVersion" />-Enumeration.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />-Klasse.</summary>
      <param name="version">Die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen, die verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Ruft die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen ab.</summary>
      <returns>Die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Eine nicht generische Version von <see cref="T:System.Data.Entity.DbSet`1" />, die verwendet werden kann, wenn der Typ der Entität zur Erstellungszeit nicht bekannt ist.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>Erstellt eine Instanz einer <see cref="T:System.Data.Entity.DbSet" /> beim Aufruf durch den Konstruktor eines abgeleiteten Typs, der als Test-Double für DbSets verwendet wird.Methoden und Eigenschaften, die vom Test-Double verwendet werden sollen, müssen vom Test-Double implementiert werden, außer AsNoTracking, AsStreaming, ein Include, wo die Standardimplementierung keine Option ist.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Fügt dem Kontext, der dem Satz im Zustand Added zugrunde liegt, die angegebene Entität hinzu, sodass sie beim Aufruf von SaveChanges in die Datenbank eingefügt wird.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>Fügt die gegebene Auflistung von Entitäten dem der Menge zugrundeliegenden Kontext hinzu, wobei die einzelnen Entitäten den Zustand "Added" erhalten, sodass sie beim Aufruf von "SaveChanges" in die Datenbank eingefügt werden.</summary>
      <returns>Die Auflistung von Entitäten.</returns>
      <param name="entities">Die hinzuzufügende Auflistung von Entitäten.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Fügt die angegebene Entität an den Kontext an, der dem Satz zugrunde liegt.Die Entität wird also im Zustand Unchanged, genauso wie beim Lesen der Entität aus der Datenbank, in den Kontext eingefügt.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.DbSet`1" />-Objekt zurück.</summary>
      <returns>Das generische Mengenobjekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den die Menge erstellt wurde.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist.</returns>
      <param name="derivedEntityType">Der Typ der zu erstellenden Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Menge gleich der aktuellen Menge ist.</summary>
      <returns>TRUE, wenn das angegebene Objekt gleich der aktuellen Menge ist; andernfalls FALSE.</returns>
      <param name="obj">Die mit dem aktuellen Objekt zu vergleichende Menge.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Sucht eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn mehrere Entitäten mit den angegebenen Primärschlüsselwerten im Kontext vorhanden sind.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Entitätstyp nicht Teil des Datenmodells für diesen Kontext ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Schlüsselwerte nicht zu den Typen der Schlüsselwerte für den gefundenen Entitätstyp passen.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>Sucht asynchron eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Suchvorgang darstellt.Das Aufgabeergebnis enthält die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn mehrere Entitäten mit den angegebenen Primärschlüsselwerten im Kontext vorhanden sind.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Entitätstyp nicht Teil des Datenmodells für diesen Kontext ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Schlüsselwerte nicht zu den Typen der Schlüsselwerte für den gefundenen Entitätstyp passen.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Sucht asynchron eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Suchvorgang darstellt.Das Aufgabeergebnis enthält die gefundene Entität oder NULL.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn mehrere Entitäten mit den angegebenen Primärschlüsselwerten im Kontext vorhanden sind.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Entitätstyp nicht Teil des Datenmodells für diesen Kontext ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Schlüsselwerte nicht zu den Typen der Schlüsselwerte für den gefundenen Entitätstyp passen.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Menge zurück.</summary>
      <returns>Die Hashfunktion für die Menge.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Ruft den Typ für die aktuelle Menge ab.</summary>
      <returns>Der Typ für die aktuelle Menge.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Ruft eine <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> ab, die eine lokale Ansicht aller Entitäten im Zustand Added, Unchanged und Modified in diesem Satz darstellt.Diese lokale Ansicht bleibt synchron, wenn dem Kontext Entitäten hinzugefügt oder Entitäten aus dem Kontext entfernt werden.Ebenso werden Entitäten, die der lokalen Ansicht hinzugefügt oder aus dieser entfernt werden, automatisch dem Kontext hinzugefügt bzw. aus dem Kontext entfernt.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Markiert die angegebene Entität als Deleted, sodass sie beim Aufruf von SaveChanges aus der Datenbank gelöscht wird.Beachten Sie, dass die Entität in einem anderen Zustand im Kontext vorhanden sein muss, bevor diese Methode aufgerufen wird.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>Entfernt die gegebene Auflistung von Entitäten aus dem der Menge zugrundeliegenden Kontext, wobei die einzelnen Entitäten den Zustand "Deleted" erhalten, sodass sie beim Aufruf von "SaveChanges" aus der Datenbank gelöscht werden.</summary>
      <returns>Die Auflistung von Entitäten.</returns>
      <param name="entities">Die zu löschende Auflistung von Entitäten.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Entitäten in dieser Menge zurückgibt.Standardmäßig werden die zurückgegebenen Entitäten vom Kontext nachverfolgt. Diese Einstellung kann durch Aufruf von AsNoTracking für die zurückgegebene <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> geändert werden.Beachten Sie, dass die zurückgegebenen Entitäten immer vom Typ für diesen Satz und nie von einem abgeleiteten Typ sind.Wenn die abgefragten Tabellen möglicherweise Daten für andere Entitätstypen enthalten, muss die SQL-Abfrage entsprechend geschrieben werden, um sicherzustellen, dass nur Entitäten des richtigen Typs zurückgegeben werden.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Ein DbSet stellt die Auflistung aller Entitäten eines bestimmten Typs dar, die im Kontext vorhanden sind oder von der Datenbank abgefragt werden können.DbSet-Objekte werden aus einem DbContext mit der DbContext.Set-Methode erstellt.</summary>
      <typeparam name="TEntity">Der Typ, der die Menge definiert.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>Erstellt eine Instanz einer <see cref="T:System.Data.Entity.DbSet`1" /> beim Aufruf durch den Konstruktor eines abgeleiteten Typs, der als Test-Double für DbSets verwendet wird.Methoden und Eigenschaften, die vom Test-Double verwendet werden sollen, müssen vom Test-Double implementiert werden, außer AsNoTracking, AsStreaming, ein Include, wo die Standardimplementierung keine Option ist.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Fügt dem Kontext, der dem Satz im Zustand Added zugrunde liegt, die angegebene Entität hinzu, sodass sie beim Aufruf von SaveChanges in die Datenbank eingefügt wird.</summary>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die gegebene Auflistung von Entitäten dem der Menge zugrundeliegenden Kontext hinzu, wobei die einzelnen Entitäten den Zustand "Added" erhalten, sodass sie beim Aufruf von "SaveChanges" in die Datenbank eingefügt werden.</summary>
      <returns>Die Auflistung von Entitäten.</returns>
      <param name="entities">Die hinzuzufügende Auflistung von Entitäten.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Fügt die angegebene Entität an den Kontext an, der dem Satz zugrunde liegt.Die Entität wird also im Zustand Unchanged, genauso wie beim Lesen der Entität aus der Datenbank, in den Kontext eingefügt.</summary>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
      <typeparam name="TDerivedEntity">Der Typ der zu erstellenden Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Ermittelt ob das angegebene DbSet gleich dem aktuellen DbSet ist.</summary>
      <returns>TRUE, wenn das angegebene DbSet gleich dem aktuellen DbSet ist; andernfalls FALSE.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen DbSet verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Sucht eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn mehrere Entitäten mit den angegebenen Primärschlüsselwerten im Kontext vorhanden sind.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Entitätstyp nicht Teil des Datenmodells für diesen Kontext ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Schlüsselwerte nicht zu den Typen der Schlüsselwerte für den gefundenen Entitätstyp passen.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>Sucht asynchron eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Suchvorgang darstellt.Das Aufgabeergebnis enthält die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Sucht asynchron eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Suchvorgang darstellt.Das Aufgabeergebnis enthält die gefundene Entität oder NULL.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn mehrere Entitäten mit den angegebenen Primärschlüsselwerten im Kontext vorhanden sind.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Entitätstyp nicht Teil des Datenmodells für diesen Kontext ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Schlüsselwerte nicht zu den Typen der Schlüsselwerte für den gefundenen Entitätstyp passen.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Kontext verworfen wurde.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Gibt die Hashfunktion für dieses DbSet zurück.</summary>
      <returns>Die Hashfunktion für dieses DbSet.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Gibt den Typ des aktuellen DbSet zurück.</summary>
      <returns>Der Typ für das aktuelle DbSet.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Ruft eine <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> ab, die eine lokale Ansicht aller Entitäten im Zustand Added, Unchanged und Modified in diesem Satz darstellt.Diese lokale Ansicht bleibt synchron, wenn dem Kontext Entitäten hinzugefügt oder Entitäten aus dem Kontext entfernt werden.Ebenso werden Entitäten, die der lokalen Ansicht hinzugefügt oder aus dieser entfernt werden, automatisch dem Kontext hinzugefügt bzw. aus dem Kontext entfernt.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Gibt das entsprechende nicht generische Objekt <see cref="T:System.Data.Entity.DbSet" /> zurück.</summary>
      <returns>Das nicht generische Mengenobjekt.</returns>
      <param name="entry">Das generische Mengenobjekt.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Markiert die angegebene Entität als Deleted, sodass sie beim Aufruf von SaveChanges aus der Datenbank gelöscht wird.Beachten Sie, dass die Entität in einem anderen Zustand im Kontext vorhanden sein muss, bevor diese Methode aufgerufen wird.</summary>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die gegebene Auflistung von Entitäten aus dem der Menge zugrundeliegenden Kontext, wobei die einzelnen Entitäten den Zustand "Deleted" erhalten, sodass sie beim Aufruf von "SaveChanges" aus der Datenbank gelöscht werden.</summary>
      <returns>Die Auflistung von Entitäten.</returns>
      <param name="entities">Die zu löschende Auflistung von Entitäten.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Entitäten in dieser Menge zurückgibt.Standardmäßig werden die zurückgegebenen Entitäten vom Kontext nachverfolgt. Diese Einstellung kann durch Aufruf von AsNoTracking für die zurückgegebene <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> geändert werden.Beachten Sie, dass die zurückgegebenen Entitäten immer vom Typ für diesen Satz und nie von einem abgeleiteten Typ sind.Wenn die abgefragten Tabellen möglicherweise Daten für andere Entitätstypen enthalten, muss die SQL-Abfrage entsprechend geschrieben werden, um sicherzustellen, dass nur Entitäten des richtigen Typs zurückgegeben werden.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Eine Implementierung von IDatabaseInitializer, die immer die Datenbank neu erstellt und optional neu mit Startwerten versieht, wenn ein Kontext zum ersten Mal in der Anwendungsdomäne verwendet wird.Zum Seeding der Datenbank erstellen Sie eine abgeleitete Klasse und überschreiben die Seed-Methode.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus.</summary>
      <param name="context">Der Kontext.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Eine Methode, die überschrieben werden soll, um dem Kontext tatsächlich Daten für das Seeding hinzuzufügen.Bei der Standardimplementierung wird keine Aktion ausgeführt.</summary>
      <param name="context">Der Kontext für das Seeding.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Eine Implementierung von IDatabaseInitializer, die die Datenbank nur dann LÖSCHT, neu erstellt und optional neu mit Startwerten versehen wird, wenn sich das Modell seit dem Erstellen der Datenbank geändert hat.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus.</summary>
      <param name="context">Der Kontext.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Eine Methode, die überschrieben werden soll, um dem Kontext tatsächlich Daten für das Seeding hinzuzufügen.Bei der Standardimplementierung wird keine Aktion ausgeführt.</summary>
      <param name="context">Der Kontext für das Seeding.</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     Beschreibt den Status einer Entität. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     Die Entität wird vom Kontext nachverfolgt, ist jedoch noch nicht in der Datenbank vorhanden. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     Die Entität wird vom Kontext nachverfolgt und ist in der Datenbank vorhanden, wurde jedoch zur Löschung aus der Datenbank markiert, sobald SaveChanges das nächste Mal aufgerufen wird. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>Die Entität wird nicht vom Kontext nachverfolgt.Eine Entität befindet sich direkt nach der ihrer Erstellung durch den neuen Operator bzw. durch eine der <see cref="T:System.Data.Entity.DbSet" />-Erstellungsmethoden in diesem Zustand.</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     Die Entität wird vom Kontext nachverfolgt und ist in der Datenbank vorhanden, und einige oder alle Eigenschaftswerte haben sich geändert. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     Die Entität wird vom Kontext nachverfolgt und ist in der Datenbank vorhanden. Ihre Eigenschaftswerte unterscheiden sich nicht von den Werten in der Datenbank. </summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Eine Implementierung dieser Schnittstelle wird verwendet, um die zugrunde liegende Datenbank zu initialisieren, wenn eine Instanz einer abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Klasse zum ersten Mal verwendet wird.Diese Initialisierung kann die Datenbank bedingt erstellen und/oder Startwerte für die Datenbank festlegen.Die verwendete Strategie wird mithilfe der InitializationStrategy-Eigenschaft der <see cref="T:System.Data.Entity.Database" />-Klasse festgelegt.Die folgenden Implementierungen werden bereitgestellt: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />,     <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <typeparam name="TContext">Dieser Typparameter ist Contravariant. Das heißt, Sie können entweder den angegebenen Typ oder einen weniger abgeleiteten Typ verwenden. Weitere Informationen zu Ko- und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context"> Der Kontext. </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Ein <see cref="T:System.Data.Entity.IDbSet`1" />stellt die Auflistung aller Entitäten eines bestimmten Typs dar, die im Kontext vorhanden sind oder von der Datenbank abgefragt werden können.<see cref="T:System.Data.Entity.DbSet`1" /> ist eine konkrete Implementierung von IDbSet.</summary>
      <typeparam name="TEntity">Der Typ, der die Menge definiert.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Fügt dem Kontext, der dem Satz im Zustand Added zugrunde liegt, die angegebene Entität hinzu, sodass sie beim Aufruf von SaveChanges in die Datenbank eingefügt wird.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Fügt die angegebene Entität an den Kontext an, der dem Satz zugrunde liegt.Die Entität wird also im Zustand Unchanged, genauso wie beim Lesen der Entität aus der Datenbank, in den Kontext eingefügt.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität.Beachten Sie, dass diese Instanz der Menge NICHT hinzugefügt oder angefügt wird.Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt.</summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist.</returns>
      <typeparam name="TDerivedEntity">Der Typ der zu erstellenden Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Sucht eine Entität mit den angegebenen Primärschlüsselwerten.Wenn eine Entität mit den angegebenen Primärschlüsselwerten im Kontext vorhanden ist, wird sie sofort zurückgegeben, ohne eine Anforderung an den Speicher auszuführen.Andernfalls wird eine Entität mit den angegebenen Primärschlüsselwerten vom Speicher angefordert, und wenn diese Entität gefunden wird, wird sie an den Kontext angefügt und zurückgegeben.Wenn keine Entität im Kontext oder Speicher gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Ruft eine <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> ab, die eine lokale Ansicht aller Entitäten im Zustand Added, Unchanged und Modified in diesem Satz darstellt.Diese lokale Ansicht bleibt synchron, wenn dem Kontext Entitäten hinzugefügt oder Entitäten aus dem Kontext entfernt werden.Ebenso werden Entitäten, die der lokalen Ansicht hinzugefügt oder aus dieser entfernt werden, automatisch dem Kontext hinzugefügt bzw. aus dem Kontext entfernt.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Markiert die angegebene Entität als Deleted, sodass sie beim Aufruf von SaveChanges aus der Datenbank gelöscht wird.Beachten Sie, dass die Entität in einem anderen Zustand im Kontext vorhanden sein muss, bevor diese Methode aufgerufen wird.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Eine <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />-Implementierung, die Code First-Migrationen verwendet, um die Datenbank auf die neueste Migration zu aktualisieren.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
      <typeparam name="TMigrationsConfiguration">Der Typ der Migrationskonfiguration, der während der Initialisierung verwendet werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse, die die Verbindungsinformationen aus einem Kontext verwendet, der mit dem Standardkonstruktor oder der registrierten Factory erstellt wurde (falls anwendbar).</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse mit der Angabe, ob für die Migration die Verbindungsinformationen aus dem Kontext verwendet werden sollen, der die Initialisierung ausgelöst hat.</summary>
      <param name="useSuppliedContext">Bei Einstellung auf true wird der Initialisierer anhand der Verbindungsinformationen aus dem Kontext ausgeführt, der die Initialisierung ausgelöst hat.Andernfalls werden die Verbindungsinformationen aus einem Kontext genommen, der mit dem Standardkonstruktor oder der registrierten Factory erstellt wurde (falls anwendbar).</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse mit der Angabe, ob für die Migration die Verbindungsinformationen aus dem Kontext verwendet werden sollen, der die Initialisierung ausgelöst hat.Ermöglicht zudem die Angabe der Migrationskonfiguration, die während der Initialisierung verwendet werden soll.</summary>
      <param name="useSuppliedContext">Bei Einstellung auf true wird der Initialisierer anhand der Verbindungsinformationen aus dem Kontext ausgeführt, der die Initialisierung ausgelöst hat.Andernfalls werden die Verbindungsinformationen aus einem Kontext genommen, der mit dem Standardkonstruktor oder der registrierten Factory erstellt wurde (falls anwendbar).</param>
      <param name="configuration">Migrationskonfiguration, die während der Initialisierung verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse, die eine bestimmte Verbindungszeichenfolge aus der Konfigurationsdatei verwendet, um zum Zweck der Migration eine Verbindung mit der Datenbank herzustellen.</summary>
      <param name="connectionStringName">Der Name der für die Migration zu verwendenden Verbindungszeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Initialisiert die Datenbank für den gegebenen Kontext.</summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>Eine Implementierung von <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, die keine Aktionen ausführt.Die Verwendung dieses Initialisierers deaktiviert die Datenbankinitialisierung für den angegebenen Kontexttyp.Das Übergeben einer Instanz dieser Klasse an <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> entspricht der Übergabe von NULL.Wenn <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> verwendet wird, um Initialisierer aufzulösen, muss eine Instanz dieser Klasse verwendet werden, um die Initialisierung zu deaktivieren.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus.</summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>Erweiterungsmethoden für <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>Gibt eine <see cref="T:System.ComponentModel.BindingList`1" />-Implementierung zurück, die mit der angegebenen <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> synchron bleibt.</summary>
      <returns>Die Bindungsliste.</returns>
      <param name="source">Die Auflistung, mit der die Bindungsliste synchron bleibt.</param>
      <typeparam name="T">Der Elementtyp.</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Stellt hilfreiche Erweiterungsmethoden zur Verwendung mit Entity Framework LINQ-Abfragen bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bestimmt asynchron, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn jedes Element der Quellsequenz den Test im angegebenen Prädikat besteht. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn jedes Element der Quellsequenz den Test im angegebenen Prädikat besteht. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>Bestimmt asynchron, ob eine Sequenz beliebige Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn die Quellsequenz beliebige Elemente enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, für die überprüft werden soll, ob sie leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bestimmt asynchron, ob ein beliebiges Elemente einer Sequenz eine Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn beliebige Elemente der Quellsequenz den Test im angegebenen Prädikat bestehen. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob ein beliebiges Elemente einer Sequenz eine Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn beliebige Elemente der Quellsequenz den Test im angegebenen Prädikat bestehen. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob eine Sequenz beliebige Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn die Quellsequenz beliebige Elemente enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, für die überprüft werden soll, ob sie leer ist.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> zwischengespeichert werden.Diese Methode wird durch Aufruf der AsNoTracking-Methode des zugrunde liegenden Abfrageobjekts ausgeführt.Wenn das zugrunde liegende Abfrageobjekt nicht über die AsNoTracking-Methode verfügt, hat der Aufruf dieser Methode keine Auswirkungen.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking oder die Quellabfrage, wenn NoTracking nicht unterstützt wird.</returns>
      <param name="source">Die Quellabfrage.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> zwischengespeichert werden.Diese Methode wird durch Aufruf der AsNoTracking-Methode des zugrunde liegenden Abfrageobjekts ausgeführt.Wenn das zugrunde liegende Abfrageobjekt nicht über die AsNoTracking-Methode verfügt, hat der Aufruf dieser Methode keine Auswirkungen.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking oder die Quellabfrage, wenn NoTracking nicht unterstützt wird.</returns>
      <param name="source">Die Quellabfrage.</param>
      <typeparam name="T">Der Elementtyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.Diese Methode wird durch Aufruf der AsStreaming-Methode des zugrunde liegenden Abfrageobjekts ausgeführt.Wenn das zugrunde liegende Abfrageobjekt nicht über die AsStreaming-Methode verfügt, hat der Aufruf dieser Methode keine Auswirkungen.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming oder die Quellabfrage, wenn AsStreaming nicht unterstützt wird.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable" />, auf die AsStreaming angewendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.Diese Methode wird durch Aufruf der AsStreaming-Methode des zugrunde liegenden Abfrageobjekts ausgeführt.Wenn das zugrunde liegende Abfrageobjekt nicht über die AsStreaming-Methode verfügt, hat der Aufruf dieser Methode keine Auswirkungen.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming oder die Quellabfrage, wenn AsStreaming nicht unterstützt wird.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, auf die AsStreaming angewendet werden soll.</param>
      <typeparam name="T">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>Bestimmt asynchron mit dem Standardgleichheitsvergleich, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn die Eingabesequenz den angegebenen Wert enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="item">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron mit dem Standardgleichheitsvergleich, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn die Eingabesequenz den angegebenen Wert enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="item">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron die Anzahl der Elemente in einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron die Anzahl der Elemente in einer Sequenz zurück, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron die Anzahl der Elemente in einer Sequenz zurück, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron die Anzahl der Elemente in einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element aus <paramref name="source" />.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element aus <paramref name="source" />, das den Test in <paramref name="predicate" /> besteht.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element aus <paramref name="source" />, das den Test in <paramref name="predicate" /> besteht.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element aus <paramref name="source" />.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default (<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element aus <paramref name="source" />.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element gefunden wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TSource" /> ), wenn <paramref name="source" /> leer ist oder kein Element den durch <paramref name="predicate" /> festgelegten Test besteht. Andernfalls ist das erste Element in <paramref name="source" /> enthalten, das den durch <paramref name="predicate" /> festgelegten Test besteht.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element gefunden wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TSource" /> ), wenn <paramref name="source" /> leer ist oder kein Element den durch <paramref name="predicate" /> festgelegten Test besteht. Andernfalls ist das erste Element in <paramref name="source" /> enthalten, das den durch <paramref name="predicate" /> festgelegten Test besteht.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default (<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element aus <paramref name="source" />.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren erstes Element zurückgegeben werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Ein aufzulistendes <see cref="T:System.Linq.IQueryable" />.</param>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Ein aufzulistendes <see cref="T:System.Linq.IQueryable" />.</param>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Ein aufzulistendes <see cref="T:System.Linq.IQueryable`1" />.</param>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
      <typeparam name="T">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Ein aufzulistendes <see cref="T:System.Linq.IQueryable`1" />.</param>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="T">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Eine neue <see cref="T:System.Linq.IQueryable" /> mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-<see cref="T:System.Linq.IQueryable" />, für das Include aufgerufen werden soll.</param>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Ein neues IQueryable&amp;lt;T&amp;gt; mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-IQueryable, für das Include aufgerufen werden soll.</param>
      <param name="path">Ein Lambdaausdruck, der den einzuschließenden Pfad darstellt.</param>
      <typeparam name="T">Der Typ der abgefragten Entität.</typeparam>
      <typeparam name="TProperty">Der Typ der Navigationseigenschaft, die eingeschlossen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Eine neue <see cref="T:System.Linq.IQueryable`1" /> mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-<see cref="T:System.Linq.IQueryable`1" />, für das Include aufgerufen werden soll.</param>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
      <typeparam name="T">Der Typ der abgefragten Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>Listet die Abfrage auf, sodass für Serverabfragen von <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> usw. die Ergebnisse der Abfrage in die entsprechenden <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder einen anderen Zwischenspeicher des Clients geladen werden.Dies entspricht einem Aufruf von ToList, wobei anschließend die Liste ohne den Mehraufwand der eigentlichen Listenerstellung verworfen wird.</summary>
      <param name="source">Die Quellabfrage.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>Listet die Abfrage asynchron auf, sodass für Serverabfragen von <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> usw. die Ergebnisse der Abfrage in die entsprechenden <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder einen anderen Zwischenspeicher des Clients geladen werden.Dies entspricht einem Aufruf von ToList, wobei anschließend die Liste ohne den Mehraufwand der eigentlichen Listenerstellung verworfen wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Die Quellabfrage.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Listet die Abfrage asynchron auf, sodass für Serverabfragen von <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> usw. die Ergebnisse der Abfrage in die entsprechenden <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder einen anderen Zwischenspeicher des Clients geladen werden.Dies entspricht einem Aufruf von ToList, wobei anschließend die Liste ohne den Mehraufwand der eigentlichen Listenerstellung verworfen wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="source">Die Quellabfrage.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Gesamtzahl der Elemente in einer Sequenz darstellt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Gesamtzahl der Elemente in einer Sequenz darstellt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron den maximalen Wert einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Maximum bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ruft für jedes Element einer Sequenz asynchron eine Projektionsfunktion auf und gibt den höchsten Ergebniswert zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Maximum bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Ruft für jedes Element einer Sequenz asynchron eine Projektionsfunktion auf und gibt den höchsten Ergebniswert zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Maximum bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron den maximalen Wert einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Maximum bestimmt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron den minimalen Wert einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Minimum bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ruft für jedes Element einer Sequenz asynchron eine Projektionsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Minimum bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Ruft für jedes Element einer Sequenz asynchron eine Projektionsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Minimum bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron den minimalen Wert einer Sequenz zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert in der Sequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente enthält, deren Minimum bestimmt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" />erfüllt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" />erfüllt.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Gibt asynchron das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz oder default ( <paramref name="TSource" /> ), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" />erfüllt, oder default ( <paramref name="TSource" /> ), wenn kein solches Element gefunden wird.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" />erfüllt, oder default ( <paramref name="TSource" /> ), wenn kein solches Element gefunden wird.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element der Eingabesequenz oder default ( <paramref name="TSource" /> ), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="source">Eine <see cref="T:System.Linq.IQueryable`1" />, deren einziges Element zurückgegeben werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Überspringt eine festgelegte Anzahl von Elementen in einer Sequenz und gibt anschließend die übrigen Elemente zurück.</summary>
      <returns>Eine Sequenz, welche die Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</returns>
      <param name="source">Eine Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="countAccessor">Ein Ausdruck, der als die Anzahl der zu überspringenden Elemente ausgewertet wird.</param>
      <typeparam name="TSource">Der Typ der Elemente der Quelle.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen. Die Sequenz wird durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Berechnet asynchron die Summe der Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> implementiert <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> nicht.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Gibt eine angegebene Anzahl von zusammenhängenden Elementen vom Anfang einer Sequenz zurück.</summary>
      <returns>Eine Sequenz, welche die festgelegte Anzahl von Elementen ab dem Anfang der Eingabesequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="countAccessor">Ein Ausdruck, der als die Anzahl der zurückzugebenden Elemente ausgewertet wird.</param>
      <typeparam name="TSource">Der Typ der Elemente der Quelle.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>Erstellt ein Array aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein Array, das Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Array erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Erstellt ein Array aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein Array, das Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Array erstellt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieser gemäß einer angegebenen Schlüsselauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses gemäß einer angegebenen Schlüsselauswahlfunktion und einem Vergleich aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses gemäß einer angegebenen Schlüsselauswahlfunktion und einem Vergleich aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" />, aus einem <see cref="T:System.Linq.IQueryable`1" /> indem dieses gemäß einer angegebenen Schlüssel- und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TElement">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses gemäß einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TElement">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieses gemäß einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TElement">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" />, aus einem <see cref="T:System.Linq.IQueryable`1" /> indem dieses gemäß einer angegebenen Schlüssel- und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TElement">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieser gemäß einer angegebenen Schlüsselauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>Erstellt eine <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Linq.IQueryable" />, indem dieser asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable" />, aus dem ein <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Erstellt eine <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Linq.IQueryable" />, indem dieser asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable" />, aus dem ein <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>Erstellt eine <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieser asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Erstellt eine <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Linq.IQueryable`1" />, indem dieser asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem eine Liste erstellt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>Steuert das Transaktionserstellungsverhalten beim Ausführen eines Datenbankbefehls oder einer Datenbankabfrage.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>Ist eine Transaktion vorhanden, verwenden Sie diese. Führen Sie den Befehl oder die Abfrage andernfalls ohne Transaktion aus.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>Ist keine Transaktion vorhanden, wird eine neue Transaktion für den Vorgang verwendet.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>Stellt einen Fehler bei dem Versuch dar, ein CommandCompilation vorzubereiten oder auszuführen.Diese Ausnahme ist dafür ausgelegt, eine allgemeine Ausnahme bereitzustellen, die Personen abfangen können, um Anbieterausnahmen (SqlException, OracleException) mit dem EntityCommand zum Ausführen von Anweisungen anzuhalten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, keine Meldung, keine interne Ausnahme.Sollte wahrscheinlich nicht vorhanden sein, erfreut aber FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, mit Meldung, keine interne Ausnahme.Sollte wahrscheinlich nicht vorhanden sein, erfreut aber FxCop.</summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, mit Meldung und einer internen Ausnahmeinstanz.</summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>Stellt einen Fehler bei dem Versuch dar, ein CommandExecution vorzubereiten oder auszuführen.Diese Ausnahme ist dafür ausgelegt, eine allgemeine Ausnahme bereitzustellen, die Personen abfangen können, um Anbieterausnahmen (SqlException, OracleException) mit dem EntityCommand zum Ausführen von Anweisungen anzuhalten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>initialisiert eine neue Instanz der EntityCommandExecutionException, keine Meldung, keine interne Ausnahme.Sollte wahrscheinlich nicht vorhanden sein, erfreut aber FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>initialisiert eine neue Instanz der EntityCommandExecutionException, mit Meldung, keine interne Ausnahme.Sollte wahrscheinlich nicht vorhanden sein, erfreut aber FxCop.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>initialisiert eine neue Instanz der EntityCommandExecutionException, mit Meldung und einer internen Ausnahmeinstanz.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die interne Ausnahme, durch die diese aktuelle Ausnahme verursacht wurde.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>Stellt die durch den Entitätsclient verwendete Ausnahme bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityException" />-Klasse.</summary>
      <param name="info">Die Serialisierungsinformationen.</param>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityException" />-Klasse, die eine vorformatierte Meldung akzeptiert.</summary>
      <param name="message">Lokalisierte Fehlermeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityException" />-Klasse, die eine vorformatierte Meldung und eine interne Ausnahme akzeptiert.</summary>
      <param name="message">Lokalisierte Fehlermeldung.</param>
      <param name="innerException">Interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>Stelle einen Bezeichner für eine Entität dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityKey" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityKey" />-Klasse mit den angegebenen Schlüsselwerten.</summary>
      <param name="qualifiedEntitySetName">Der durch den EntityContainer-Namen qualifizierte EntitySet-Name der Entität.</param>
      <param name="entityKeyValues">Die Schlüssel-Wert-Paare, die die Entität bestimmen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityKey" />-Klasse mit den angegebenen Schlüsselwerten.</summary>
      <param name="qualifiedEntitySetName">Der durch den EntityContainer-Namen qualifizierte EntitySet-Name der Entität.</param>
      <param name="entityKeyValues">Die Schlüssel-Wert-Paare, die die Entität bestimmen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityKey" />-Klasse mit dem angegebenen einzelnen Schlüsselnamen und dem -wert.</summary>
      <param name="qualifiedEntitySetName">Der durch den EntityContainer-Namen qualifizierte EntitySet-Name der Entität.</param>
      <param name="keyName">Der Name des Schlüssels, der die Entität bestimmt.</param>
      <param name="keyValue">Der Schlüsselwert, der die Entität bestimmt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>Ruft den EntityContainer-Namen ab, der den Entitätencontainer bestimmt, der die Entität enthält, oder legt ihn fest.</summary>
      <returns>Der EntityContainer-Name, der den Entitätencontainer bestimmt, der die Entität enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>Ruf die Schlüsselwerte ab, die die Entität bestimmen, oder legt sie fest.</summary>
      <returns>Die Schlüsselwerte, die die Entität bestimmen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>Ruft einen Singleton-<see cref="T:System.Data.Entity.Core.EntityKey" /> ab, der eine Entität bestimmt, die aus einem fehlerhaften TREAT resultiert.</summary>
      <returns>Ein Singleton-<see cref="T:System.Data.Entity.Core.EntityKey" />, der eine Entität bestimmt, die aus einem fehlerhaften TREAT resultiert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>Ruft den EntitySet-Namen ab, der die Entitätenmenge bestimmt, die die Entität enthält, oder legt ihn fest.</summary>
      <returns>Der EntitySet-Name, der die Entitätenmenge bestimmt, die die Entität enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>Gibt an, ob diese Instanz gleich dem angegebenen Schlüssel ist.</summary>
      <returns>true, wenn diese Instanz dem angegebenen Schlüssel gleicht; andernfalls false</returns>
      <param name="other">Der Schlüssel zum Vergleich mit dieser Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich dem angegebenen Schlüssel ist.</summary>
      <returns>true, wenn diese Instanz dem angegebenen Schlüssel gleicht; andernfalls false</returns>
      <param name="obj">Der Schlüssel zum Vergleich mit dieser Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Ruft die Entitätenmenge für diesen Entitätsschlüssel aus dem angegebenen Metadatenarbeitsbereich nach Entitätencontainername und Entitätenmengenname ab.</summary>
      <returns>Die Entitätenmenge aus dem angegebenen Arbeitsbereich für diesen Entitätsschlüssel.</returns>
      <param name="metadataWorkspace">Arbeitsbereich, in dem nach der Entitätenmenge gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Die Entitätenmenge konnte im Arbeitsbereich nicht gefunden werden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>Gibt einen wertbasierten Hashcode zurück, damit EntityKey in Hashtabellen verwendet werden kann.</summary>
      <returns>Der Hashwert aus diesem <see cref="T:System.Data.Entity.Core.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>Ruft einen Wert ab, der anzeigt, ob dieser Schlüssel ein temporärer Schlüssel ist.</summary>
      <returns>true, wenn dieser Schlüssel ein temporärer Schlüssel ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>Ruft einen Singleton-<see cref="T:System.Data.Entity.Core.EntityKey" /> ab, durch den eine schreibgeschützte Entität bestimmt wird.</summary>
      <returns>Ein Singleton-<see cref="T:System.Data.Entity.Core.EntityKey" />, durch den eine schreibgeschützte Entität bestimmt wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird aufgerufen, nachdem dieser <see cref="T:System.Data.Entity.Core.EntityKey" /> deserialisiert wurde.</summary>
      <param name="context">Der Serialisierungskontext.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird aufgerufen, nachdem dieser <see cref="T:System.Data.Entity.Core.EntityKey" /> deserialisiert wurde.</summary>
      <param name="context">Der Serialisierungskontext.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Gibt an, ob die beiden Schlüssel gleich sind.</summary>
      <returns>true, wenn die beiden Schlüssel gleich sind, andernfalls false.</returns>
      <param name="key1">Ein zu vergleichender Schlüssel.</param>
      <param name="key2">Ein zu vergleichender Schlüssel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Gibt an, ob die beiden Schlüssel nicht gleich sind.</summary>
      <returns>true, wenn die beiden Schlüssel ungleich sind, andernfalls false.</returns>
      <param name="key1">Ein zu vergleichender Schlüssel.</param>
      <param name="key2">Ein zu vergleichender Schlüssel.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>Informationen über einen Schlüssel, der Teil von einem EntityKey ist.Ein Schlüsselelement enthält den Schlüsselnamen und -wert.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>Erstellt ein leeres EntityKeyMember.Dieser Konstruktor wird durch die Serialisierung verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     Erstellt ein neues EntityKeyMember mit dem Namen und Wert des angegebenen Schlüssels. </summary>
      <param name="keyName"> Der Schlüsselname. </param>
      <param name="keyValue"> Der Schlüsselwert. </param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     Der Schlüsselname. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     Gibt eine Zeichenfolgendarstellung des EntityKeyMember zurück. </summary>
      <returns> Eine Zeichenfolgendarstellung des EntityKeyMember. </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     Der Schlüsselwert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>Stellt eine eSQL-Abfragekompilierungsausnahme dar; zur Klasse der Ausnahmebedingungen, die diese Ausnahme auslösen können, zählen hauptsächlich:     1) Syntaxfehler: werden bei der Abfragetextanalyse ausgelöst und wenn die angegebene Abfrage nicht mit der formalen eSQL-Grammatik konform ist; 2) Semantische Fehler: werden ausgelöst, wenn semantische Regeln der eSQL-Sprache nicht erfüllt werden, beispielsweise bei Metadaten- oder Schemainformationen, bei ungenauen oder nicht vorhandenen Werten, Typüberprüfungsfehlern, Bereichsregelverletzungen, Benutzern nicht definierter Variablen.Weitere Informationen finden Sie in den Spezifikationen zur eSQL-Sprache.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntitySqlException" /> mit der generischen Fehlermeldung.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntitySqlException" /> mit einer angegebenen Meldung.</summary>
      <param name="message">Die Fehlermeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz einer <see cref="T:System.Data.Entity.Core.EntitySqlException" /> mit der angegebenen Meldung und innerException-Instanz.</summary>
      <param name="message">Die Fehlermeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>Ruft die ungefähre Nummer der Spalte ab, in der der Fehler aufgetreten ist.</summary>
      <returns>Die ungefähre Nummer der Spalte, in der der Fehler aufgetreten ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>Ruft den ungefähren Kontext ab, in dem der Fehler aufgetreten ist, sofern verfügbar.</summary>
      <returns>Der ungefähre Kontext, in dem der Fehler aufgetreten ist, sofern verfügbar.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>Ruft einen leeren String.Empty oder die Fehlerbeschreibung ab, in der der Grund erläutert wird, weshalb die Abfrage nicht akzeptiert wurde. </summary>
      <returns>Eine leere String.Empty oder die Fehlerbeschreibung, in der der Grund erläutert wird, weshalb die Abfrage nicht akzeptiert wurde.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>Ruft die ungefähre Nummer der Zeile ab, in der der Fehler aufgetreten ist. </summary>
      <returns>Die ungefähre Nummer der Zeile, in der der Fehler aufgetreten ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>Stelle eine DataRecord-Schnittstelle bereit, die strukturierte Typen und umfassende Metadateninformationen unterstützt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>Ruft die DataRecordInfo-Eigenschaft ab, die den Inhalt des Datensatzes beschreibt.</summary>
      <returns>Die DataRecordInfo-Eigenschaft, die den Inhalt des Datensatzes beschreibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Gibt geschachtelte Reader als DbDataReader-Objekte zurück.</summary>
      <returns>Geschachtelte Reader als DbDataReader-Objekte.</returns>
      <param name="i">Die Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Ruft ein DbDataRecord-Objekt mit dem angegebenen Index ab.</summary>
      <returns>Ein DbDataRecord-Objekt.</returns>
      <param name="i">Der Index der Zeile.</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     Wird ausgelöst, um anzugeben, dass eine Befehlsstruktur ungültig ist. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     Erstellt eine neue InvalidCommandTreeException mit einer standardmäßigen Meldung. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     Erstellt eine neue InvalidCommandTreeException mit der angegebenen Meldung. </summary>
      <param name="message"> Die Ausnahmemeldung. </param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     Erstellt eine neue InvalidCommandTreeException mit der angegebenen Meldung und der internen Ausnahme. </summary>
      <param name="message"> Die Ausnahmemeldung. </param>
      <param name="innerException"> Die Ausnahme, die diese InvalidCommandTreeException verursacht hat. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>Zuordnungsausnahmeklasse.Beachten Sie, dass diese Klasse einen Zustand aufweist. Selbst wenn Sie die internen Werte ändern, kann dies eine wichtige Änderung sein.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     Konstruktor mit Standardmeldung. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     Standardkonstruktor </summary>
      <param name="message"> lokalisierte Fehlermeldung. </param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     Konstruktor </summary>
      <param name="message"> lokalisierte Fehlermeldung. </param>
      <param name="innerException"> interne Ausnahme </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     Metadatenausnahmeklasse </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     Konstruktor mit Standardmeldung. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     Standardkonstruktor </summary>
      <param name="message"> lokalisierte Fehlermeldung. </param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     Konstruktor </summary>
      <param name="message"> lokalisierte Fehlermeldung. </param>
      <param name="innerException"> interne Ausnahme </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>Diese Ausnahme wird ausgelöst, wenn ein angefordertes Objekt nicht im Speicher gefunden wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />-Klasse.</summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />-Klasse und des Konstruktors mit einer Meldung und einer internen Ausnahme.</summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>Diese Ausnahme wird ausgelöst, wenn ein Updatevorgang die Parallelitätseinschränkung verletzt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />-Klasse mit angegebener Meldung.</summary>
      <param name="message">Die der Ausnahme zugeordnete Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />-Klasse mit angegebener Meldung und interner Ausnahme.</summary>
      <param name="message">Die der Ausnahme zugeordnete Meldung.</param>
      <param name="innerException">Der Fehler, der die Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />-Klasse mit angegebener Meldung und interner Ausnahme.</summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Der Fehler, der die Ausnahme verursacht hat.</param>
      <param name="stateEntries">Die Statuseinträge.</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>Stellt die Eigenschaftseinschränkungs-Ausnahmeklasse dar.Beachten Sie, dass diese Klasse einen Zustand aufweist. Selbst wenn Sie die internen Werte ändern, kann dies eine wichtige Änderung sein.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />-Klasse.</summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />-Klasse mit angegebener Meldung und interner Ausnahme. </summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />-Klasse.</summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
      <param name="propertyName">Der Eigenschaftenname.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />-Klasse.</summary>
      <param name="message">Die lokalisierte Fehlermeldung.</param>
      <param name="propertyName">Der Eigenschaftenname.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>Ruft den Namen der Eigenschaft ab, die die Einschränkung verletzt hat.</summary>
      <returns>Der Name der Eigenschaft, die die Einschränkung verletzt hat.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn der Speicheranbieter ein Verhalten aufweist, das mit dem des Entitätsclientanbieters inkompatibel ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />-Klasse mit der angegebenen Fehlermeldung.</summary>
      <param name="message">Die Fehlermeldung, in der die Ausnahme erläutert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />-Klasse mit der angegebenen Fehlermeldung und der angegebenen internen Ausnahme.</summary>
      <param name="message">Die Fehlermeldung, in der die Ausnahme erläutert wird.</param>
      <param name="innerException">Die interne Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>Die Ausnahme, die beim Speichern der Änderungen im Speicher ausgelöst wird, konnte nicht aktualisiert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.UpdateException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.UpdateException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die serialisierten Informationen über die Ausnahme enthält.</param>
      <param name="context">Die Kontextinformationen über die Quelle oder das Ziel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.UpdateException" />-Klasse mit Fehlermeldung.</summary>
      <param name="message">Die Fehlermeldung, in der die Ausnahme erläutert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.UpdateException" />-Klasse mit Fehlermeldung und interner Ausnahme. </summary>
      <param name="message">Die Fehlermeldung, in der die Ausnahme erläutert wird.</param>
      <param name="innerException">Die interne Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.UpdateException" />-Klasse mit Fehlermeldung, interner Ausnahme und Statuseinträgen.</summary>
      <param name="message">Die Fehlermeldung, in der die Ausnahme erläutert wird.</param>
      <param name="innerException">Die interne Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
      <param name="stateEntries">Die im Fehler implizierten Statuseinträge.</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>Ruft die im Fehler implizierten Statuseinträge ab. </summary>
      <returns>Die im Fehler implizierten Statuseinträge.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>DataRecordInfo-Klasse, die eine einfache Möglichkeit bietet, sowohl auf die Typinformationen als auch auf die Spalteninformationen zuzugreifen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>Initialisiert ein neues <see cref="T:System.Data.Common.DbDataRecord" />-Objekt für einen bestimmten Typ mit einer aufzählbaren Auflistung von Datenfeldern.</summary>
      <param name="metadata">Die Metadaten für den von diesem Objekt dargestellten Typ, wie von <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> bereitgestellt.</param>
      <param name="memberInfo">Eine aufzählbare Auflistung von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />-Objekten, die Spalteninformationen darstellen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> für dieses <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" />-Objekt ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />-Objekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>Ruft Typinformationen für dieses Objekt als <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Wert.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>Stellt eine vorbereitete Befehlsdefinition dar, die zwischengespeichert und wiederverwendet werden kann, um die erneute Vorbereitung eines Befehls zu vermeiden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />-Klasse mit dem angegebenen <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <param name="prototype">Der angegebene <see cref="T:System.Data.Common.DbCommand" />.</param>
      <param name="cloneMethod">Methode zum Klonen von <see cref="T:System.Data.Common.DbCommand" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>Erstellt ein DbCommand-Objekt, das ausgeführt werden kann, und gibt dieses zurück.</summary>
      <returns>Der Befehl für die Datenbank.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>Metadaten-Schnittstelle für alle Typen vom CLR-Typ</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" />-Klasse.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Name des Sortier-Facets</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Der Wert, der an GetInformation übergeben werden soll, um die ConceptualSchemaDefinition abzurufen.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>Der Wert, der an GetInformation übergeben werden soll, um die ConceptualSchemaDefinitionVersion3 abzurufen</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>Name des DefaultValue-Facets</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Anbieterwriter sollten diese Methode überschreiben, um das Argument mit den Platzhaltern und Escapezeichen zurückzugeben.Diese Methode wird nur verwendet, wenn SupportsEscapingLikeArgument true zurückgibt.</summary>
      <returns>Das Argument mit den Platzhaltern und Escapezeichen.</returns>
      <param name="argument">Das Argument, für das Escapezeichen verwendet werden soll.</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>Name des FixedLength-Facets</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>Beim Überschreiben in einer abgeleiteten Klasse gibt diese Methode anbieterspezifische Informationen zurück.</summary>
      <returns>Das XmlReader-Objekt, das die Zuordnung zum zugrunde liegenden Katalog im Datenspeicher darstellt.</returns>
      <param name="informationType">Der Typ der zurückzugebenden Informationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Beim Überschreiben in einer abgeleiteten Klasse ordnet diese Methode den angegebenen Speichertyp und einen Satz von Facets für diesen Typ einem EDM-Typ zu.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Instanz, die einen EDM-Typ und einen Satz von Facets für diesen Typ beschreibt.</returns>
      <param name="storeType">Die TypeUsage-Instanz, die einen Speichertyp und einen Satz von Facets für diesen Typ beschreibt, die dem EDM-Typ zugeordnet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Gibt die FacetDescription-Objekte für einen bestimmten Typ zurück.</summary>
      <returns>Die FacetDescription-Objekte für den angegebenen EDM-Typ.</returns>
      <param name="edmType">Der EDM-Typ, für den die Facetbeschreibung zurückgegeben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Ruft die anbieterspezifischen Informationen ab.</summary>
      <returns>Die anbieterspezifischen Informationen.</returns>
      <param name="informationType">Der Typ der zurückzugebenden Informationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse eine Auflistung von EDM-Funktionen zurück, die vom Anbietermanifest unterstützt werden.</summary>
      <returns>Eine Auflistung von EDM-Funktionen.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Beim Überschreiben in einer abgeleiteten Klasse ordnet diese Methode den angegebenen EDM-Typ und einen Satz von Facets für diesen Typ einem Speichertyp zu.</summary>
      <returns>Die TypeUsage-Instanz, die einen Speichertyp und einen Satz von Facets für diesen Typ beschreibt.</returns>
      <param name="edmType">Die TypeUsage-Instanz, die einen EDM-Typ und einen Satz von Facets für diesen Typ beschreibt, die dem Speichertyp zugeordnet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse einen von der Datenquelle unterstützten Satz von primitiven Typen zurück.</summary>
      <returns>Der von der Datenquelle unterstützte Satz von Typen.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>Der Name des IsStrict-Facets</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>Name des MaxLength-Facets</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>Ruft den von diesem Anbietermanifest verwendeten Namespace ab.</summary>
      <returns>Der von diesem Anbietermanifest verwendete Namespace.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Der Name des Facets, das Nullwerte zulässt.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Name des Precision-Facets</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Name des Scale-Facets</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>Name des SRID-Facets</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Der Wert, der an GetInformation übergeben werden soll, um die StoreSchemaDefinition abzurufen.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>Der Wert, der an GetInformation übergeben werden soll, um die StoreSchemaDefinitionVersion3 abzurufen</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Der Wert, der an GetInformation übergeben werden soll, um StoreSchemaMapping abzurufen.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>Wert, der an GetInformation übergeben werden soll, um die StoreSchemaMappingVersion3 abzurufen</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Gibt an, ob der Anbieter Escapezeichen für Zeichenfolgen unterstützt, die in einem Like-Ausdruck als Muster verwendet werden sollen.</summary>
      <returns>True, wenn dieser Anbieter Escapezeichen für Zeichenfolgen unterstützt, die in einem Like-Ausdruck als Muster verwendet werden sollen, andernfalls falls.</returns>
      <param name="escapeCharacter">Wenn der Anbieter Escapezeichen unterstützt, das Zeichen, das als Escapezeichen verwendet würde.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>Gibt einen booleschen Wert zurück, der angibt, ob der Anbieter Ausdrucksbaumstrukturen verarbeiten kann, die Instanzen von DbInExpression enthalten.Die Standardimplementierung gibt zur Abwärtskompatibilität false zurück.Abgeleitete Klassen können diese Methode überschreiben.</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Name des Unicode Facets</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>Die Factory zum Erstellen von Befehlsdefinitionen. Benutzen Sie den Typ dieses Objekts als Argument für die IServiceProvider.GetService-Methode der Anbieterfactory.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Fügt einen <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> hinzu, der verwendet wird, um zusätzliche Standardanbieterdienste aufzulösen, wenn ein abgeleiteter Typ als EF-Anbieter registriert ist, entweder unter Verwendung eines Eintrags in der Konfigurationsdatei der Anwendung oder durch codebasierte Registrierung in <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
      <param name="resolver">Der hinzuzufügende Resolver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>Siehe Problem 2390 – Klonen der DesignTimeVisible-Eigenschaft auf DbCommand kann Deadlocks verursachen.Hier soll Unterklassen das Überschreiben erlaubt werden.</summary>
      <returns>ein Klon von <see cref="T:System.Data.Common.DbCommand" /></returns>
      <param name="fromDbCommand">das zu klonende <see cref="T:System.Data.Common.DbCommand" />-Objekt</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Erstellt das standardmäßige DbCommandDefinition-Objekt basierend auf den Prototypbefehl. Diese Methode dient dazu, dass Anbieterwriter eine standardmäßige Befehlsdefinition über einen Befehl erstellen können.Hinweis: Hierdurch wird der Prototyp geklont</summary>
      <returns>ein ausführbares Befehlsdefinitionsobjekt</returns>
      <param name="prototype">der Prototypbefehl</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Erstellt ein Befehlsdefinitionsobjekt mit einer Befehlsstruktur.</summary>
      <returns>ein ausführbares Befehlsdefinitionsobjekt</returns>
      <param name="commandTree">Befehlsstruktur für die Anweisung</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Erstellt eine Befehlsdefinition aus dem angegebenen Manifest und der angegebenen Befehlsstruktur.</summary>
      <returns>Die erstellte Befehlsdefinition.</returns>
      <param name="providerManifest">Das Manifest.</param>
      <param name="commandTree">Die Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Erstellt eine durch die Verbindung angegebene Datenbank und erstellt Schemaobjekte (Tabellen, Primärschlüssel, Fremdschlüssel) auf Grundlage des Inhalts einer storeItemCollection.</summary>
      <param name="connection">Verbindung mit einer nicht vorhandenen Datenbank, die erstellt und mit den Speicherobjekten aufgefüllt werden muss, die durch den storeItemCollection-Parameter angegeben werden.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Erstellen der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente, auf Grundlage derer das Skript erstellt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Generiert auf Grundlage des Inhalts des StoreItemCollection-Parameters ein Datendefinitionssprache (DDL)-Skript, das Schemaobjekte (Tabellen, Primärschlüssel, Fremdschlüssel) erstellt, die auf die Version der Datenbank zielt, die dem Anbietermanifesttoken entspricht.</summary>
      <returns>Ein DDL-Skript, das Schemaobjekte auf Grundlage des Inhalts des StoreItemCollection-Parameters erstellt und auf die Version der Datenbank abzielt, die dem Anbietermanifesttoken entspricht.</returns>
      <param name="providerManifestToken">Das Anbietermanifesttoken, das die Zielversion identifiziert.</param>
      <param name="storeItemCollection">Die Struktur der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Erstellt ein Befehlsdefinitionsobjekt für das angegebene Anbietermanifest und die angegebene Befehlsstruktur.</summary>
      <returns>Ein ausführbares Befehlsdefinitionsobjekt.</returns>
      <param name="providerManifest">Das zuvor vom Speicheranbieter abgerufene Anbietermanifest.</param>
      <param name="commandTree">Die Befehlsstruktur für die Anweisung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine bestimmte Datenbank auf dem Server vorhanden ist.</summary>
      <returns>True, wenn der Anbieter die Datenbank nur auf Grundlage der Verbindung herleiten kann.</returns>
      <param name="connection">Verbindung mit einer Datenbank, deren Existenz mithilfe dieser Methode überprüft wird.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Bestimmen der Existenz der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zur Bestimmung der Datenbankexistenz verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Gibt einen Wert zurück, der angibt, ob eine bestimmte Datenbank auf dem Server vorhanden ist.</summary>
      <returns>True, wenn der Anbieter die Datenbank nur auf Grundlage der Verbindung herleiten kann.</returns>
      <param name="connection">Verbindung mit einer Datenbank, deren Existenz mithilfe dieser Methode überprüft wird.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Bestimmen der Existenz der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zur Bestimmung der Datenbankexistenz verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Erstellt eine durch die Verbindung angegebene Datenbank und erstellt Schemaobjekte (Tabellen, Primärschlüssel, Fremdschlüssel) auf Grundlage des Inhalts einer StoreItemCollection.</summary>
      <param name="connection">Verbindung mit einer nicht vorhandenen Datenbank, die erstellt und mit den Speicherobjekten aufgefüllt werden muss, die durch den storeItemCollection-Parameter angegeben werden.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Erstellen der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente, auf Grundlage derer das Skript erstellt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Generiert auf Grundlage des Inhalts des StoreItemCollection-Parameters ein Datendefinitionssprache (DDL)-Skript, das Schemaobjekte (Tabellen, Primärschlüssel, Fremdschlüssel) erstellt, die auf die Version der Datenbank zielt, die dem Anbietermanifesttoken entspricht.</summary>
      <returns>Ein DDL-Skript, das Schemaobjekte auf Grundlage des Inhalts des StoreItemCollection-Parameters erstellt und auf die Version der Datenbank abzielt, die dem Anbietermanifesttoken entspricht.</returns>
      <param name="providerManifestToken">Das Anbietermanifesttoken, das die Zielversion identifiziert.</param>
      <param name="storeItemCollection">Die Struktur der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Gibt einen Wert zurück, der angibt, ob eine bestimmte Datenbank auf dem Server vorhanden ist.</summary>
      <returns>True, wenn der Anbieter die Datenbank nur auf Grundlage der Verbindung herleiten kann.</returns>
      <param name="connection">Verbindung mit einer Datenbank, deren Existenz mithilfe dieser Methode überprüft wird.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Bestimmen der Existenz der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zur Bestimmung der Datenbankexistenz verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Gibt einen Wert zurück, der angibt, ob eine bestimmte Datenbank auf dem Server vorhanden ist.</summary>
      <returns>True, wenn der Anbieter die Datenbank nur auf Grundlage der Verbindung herleiten kann.</returns>
      <param name="connection">Verbindung mit einer Datenbank, deren Existenz mithilfe dieser Methode überprüft wird.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Bestimmen der Existenz der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zur Bestimmung der Datenbankexistenz verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Löscht die angegebene Datenbank.</summary>
      <param name="connection">Verbindung mit einer vorhandenen Datenbank, die gelöscht werden muss.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Löschen der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zum Löschen der Datenbank verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>Ruft die räumlichen Dienste für <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> ab.</summary>
      <returns>Die räumlichen Dienste.</returns>
      <param name="manifestToken">Die dem Anbietermanifest zugeordneten Tokeninformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Löscht die angegebene Datenbank.</summary>
      <param name="connection">Verbindung mit einer vorhandenen Datenbank, die gelöscht werden muss.</param>
      <param name="commandTimeout">Ausführungstimeout für Befehle, die zum Löschen der Datenbank benötigt werden.</param>
      <param name="storeItemCollection">Die Auflistung aller Speicherelemente aus dem Modell.Dieser Parameter wird nicht mehr zum Löschen der Datenbank verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>Erweitert |DataDirectory| im angegebenen Pfad, wenn er mit |DataDirectory| beginnt, und gibt den erweiterten Pfad zurück bzw., wenn er nicht mit |DataDirectory| beginnt, die angegebene Zeichenfolge.</summary>
      <returns>Der erweiterte Pfad.</returns>
      <param name="path">Der zu erweiternde Pfad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>Gibt einen XML-Reader zurück, der die CSDL-Beschreibung darstellt</summary>
      <returns>Ein XmlReader, der die CSDL-Beschreibung darstellt</returns>
      <param name="csdlName">Der Name der CSDL-Beschreibung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse eine Instanz einer Klasse zurück, die von DbProviderManifest abgeleitet wird.</summary>
      <returns>Ein DbProviderManifest-Objekt, das das Anbietermanifest darstellt.</returns>
      <param name="manifestToken">Die dem Anbietermanifest zugeordneten Tokeninformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Gibt das Anbietermanifesttoken für eine angegebene Verbindung zurück.</summary>
      <returns>Das Anbietermanifesttoken für die angegebene Verbindung.</returns>
      <param name="connection">Die Verbindung für das zu suchende Manifesttoken.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Ruft den räumlichen Datenreader für <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> ab.</summary>
      <returns>Der räumliche Datenreader.</returns>
      <param name="fromReader">Der Reader, von dem die räumlichen Daten stammen.</param>
      <param name="manifestToken">Die dem Anbietermanifest zugeordneten Tokeninformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>Ruft die <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> ab, die zum Ausführen von Methoden verwendet wird, die die angegebene Verbindung verwenden.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
      <param name="connection">Die Datenbankverbindung</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>Ruft die <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> ab, die zum Ausführen von Methoden verwendet wird, die die angegebene Verbindung verwenden.Diese Überladung sollte von den abgeleiteten Klassen Zwecks Kompatibilität zu umschließenden Anbietern verwendet werden.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
      <param name="connection">Die Datenbankverbindung</param>
      <param name="providerInvariantName">Der invariante Anbietername</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Ruft die DbProviderFactory auf Grundlage des angegebenen DbConnection ab.</summary>
      <returns>Die abgerufene DbProviderFactory.</returns>
      <param name="connection">Die zu verwendende Verbindung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Gibt anhand der angegebenen Versionsinformationen das Anbietermanifest zurück.</summary>
      <returns>Das Anbietermanifest anhand der angegebenen Versionsinformationen.</returns>
      <param name="manifestToken">Die dem Anbietermanifest zugeordneten Tokeninformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Gibt das Anbietermanifesttoken zurück, für das eine Verbindung angegeben wurde.</summary>
      <returns>Das Anbietermanifesttoken.</returns>
      <param name="connection">Die Verbindung mit dem Anbieter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Gibt Anbieter zurück, für die eine Verbindung angegeben wurde.</summary>
      <returns>Der instanzierte <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, der auf der angegebenen Verbindung basiert.</returns>
      <param name="connection">Die Verbindung mit dem Anbieter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>Wird aufgerufen, um zusätzliche Standardanbieterdienste aufzulösen, wenn ein abgeleiteter Typ als EF-Anbieter registriert ist, entweder unter Verwendung eines Eintrags in der Konfigurationsdatei der Anwendung oder durch codebasierte Registrierung in <see cref="T:System.Data.Entity.DbConfiguration" />.Die Implementierung dieser Methode in dieser Klasse verwendet die Konfliktlöser, der mit der AddDependencyResolver-Methode hinzugefügt wurden, um Abhängigkeiten aufzulösen.</summary>
      <returns>Eine Instanz des angegebenen Typs oder null, wenn der Dienst nicht aufgelöst werden kann.</returns>
      <param name="type">Der Diensttyp, der aufgelöst werden soll.</param>
      <param name="key">Ein optionaler Schlüssel, der weitere Informationen zum Auflösen des Diensts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>Wird aufgerufen, um zusätzliche Standardanbieterdienste aufzulösen, wenn ein abgeleiteter Typ als EF-Anbieter registriert ist, entweder unter Verwendung eines Eintrags in der Konfigurationsdatei der Anwendung oder durch codebasierte Registrierung in <see cref="T:System.Data.Entity.DbConfiguration" />.Die Implementierung dieser Methode in dieser Klasse verwendet die Konfliktlöser, der mit der AddDependencyResolver-Methode hinzugefügt wurden, um Abhängigkeiten aufzulösen.</summary>
      <returns>Alle registrierten Dienste, die den angegebenen Typ und Schlüssel erfüllen, oder eine leere Enumeration, wenn keine vorhanden sind.</returns>
      <param name="type">Der Diensttyp, der aufgelöst werden soll.</param>
      <param name="key">Ein optionaler Schlüssel, der weitere Informationen zum Auflösen des Diensts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Ruft den räumlichen Datenreader für <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> ab.</summary>
      <returns>Der räumliche Datenreader.</returns>
      <param name="fromReader">Der Reader, von dem die räumlichen Daten stammen.</param>
      <param name="manifestToken">Das dem Anbietermanifest zugeordnete Manifesttoken.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Ruft die räumlichen Dienste für <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> ab.</summary>
      <returns>Die räumlichen Dienste.</returns>
      <param name="key">Informationen zur Datenbank, für die die räumlichen Dienste verwendet werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>Ruft die räumlichen Dienste für <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> ab.</summary>
      <returns>Die räumlichen Dienste.</returns>
      <param name="manifestToken">Die dem Anbietermanifest zugeordneten Tokeninformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>Registriert einen Handler zur Verarbeitung von vom Datenbankanbieter stammenden Fehlermeldungen ohne Fehler.</summary>
      <param name="connection">Die Verbindung, für die Informationen empfangen werden sollen.</param>
      <param name="handler">Der Handler zur Verarbeitung von Meldungen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Legt die Parameterwerte und entsprechenden Facets für die <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> fest.</summary>
      <param name="parameter">Der Parameter.</param>
      <param name="parameterType">Der Typ des Parameters.</param>
      <param name="value">Der Wert des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Legt die Parameterwerte und entsprechenden Facets für die <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> fest.</summary>
      <param name="parameter">Der Parameter.</param>
      <param name="parameterType">Der Typ des Parameters.</param>
      <param name="value">Der Wert des Parameters.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>Eine Spezialisierung des ProviderManifest, die einen XmlReader akzeptiert</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" />-Klasse.</summary>
      <param name="reader">Ein <see cref="T:System.Xml.XmlReader" />-Objekt, das den Zugriff auf die XML-Daten in der Anbietermanifestdatei bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Gibt eine Liste der Facetbeschreibungen für den angegebenen Entity Data Model (EDM)-Typ zurück.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die die Liste der Facetbeschreibungen für den angegebenen EDM-Typ enthält.</returns>
      <param name="edmType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, für den die Facetbeschreibungen abgerufen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Gibt eine Liste vom Anbieter unterstützter Funktionen zurück.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der eine Liste der vom Anbieter unterstützten Funktionen enthalten ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Gibt eine Liste der vom Speicheranbieter unterstützten primitiven Typen zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die eine Liste der vom Speicheranbieter unterstützten primitiven Typen enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Ruft den von diesem Anbietermanifest unterstützten Namespacenamen ab.</summary>
      <returns>Der von diesem Anbietermanifest unterstützte Namespacename.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Ruft den ähnlichsten Entity Data Model (EDM)-Typ für einen angegebenen Speichertypnamen ab.</summary>
      <returns>Der ähnlichste EDM-Typ für einen angegebenen Speichertypnamen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Ruft den ähnlichsten primitiven Speichertyp für einen angegebenen Speichertypnamen ab.</summary>
      <returns>Der ähnlichste primitive Speichertyp für einen angegebenen Speichertypnamen.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>EntityRecordInfo-Klasse, die eine einfache Möglichkeit bietet, sowohl auf die Typinformationen als auch auf die Spalteninformationen zuzugreifen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Initialisiert eine neues Instanz der <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />-Klasse eines bestimmten Entitätstyps mit einer aufzählbaren Auflistung von Datenfeldern und mit spezifischen Schlüssel- und Entitätenmengeninformationen.</summary>
      <param name="metadata">Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> der Entität, die vom <see cref="T:System.Data.Common.DbDataRecord" /> dargestellt wird, der durch dieses <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />-Objekt beschrieben wird.</param>
      <param name="memberInfo">Eine aufzählbare Auflistung von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />-Objekten, die Spalteninformationen darstellen.</param>
      <param name="entityKey">Der Schlüssel für die Entität.</param>
      <param name="entitySet">Die Entitätenmenge, der die Entität angehört.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.EntityKey" /> für die Entität ab.</summary>
      <returns>Der Schlüssel für die Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>FieldMetadata-Klasse, die die Korrelation zwischen den Spaltenordnungszahlen und MemberMetadata bereitstellt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Initialisiert ein neues <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />-Objekt mit dem angegebenen Ordinalwert und Feldtyp.</summary>
      <param name="ordinal">Eine ganze Zahl, die den Speicherort der Metadaten angibt.</param>
      <param name="fieldType">Der Typ des Felds.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>Ruft den Typ des Felds für dieses <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />-Objekt ab.</summary>
      <returns>Der Feldtyp für dieses <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />-Objekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>Ruft die Ordinalzahl für dieses <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />-Objekt ab.</summary>
      <returns>Ein ganzzahliger Wert, der den Ordinalwert darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>Stellt einen abstrakten Basistyp für Typen dar, die die IExpressionVisitor-Schnittstelle implementieren, von der abgeleitet werden soll.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Implementiert das Besuchermuster für die Befehlsstruktur.</summary>
      <param name="commandTree">Die Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>Implementiert das Besuchermuster für die Delete-Befehlsstruktur.</summary>
      <param name="deleteTree">Die Delete-Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>Implementiert das Besuchermuster für die Function-Befehlsstruktur.</summary>
      <param name="functionTree">Die Function-Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>Implementiert das Besuchermuster für die Insert-Befehlsstruktur.</summary>
      <param name="insertTree">Die Insert-Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>Implementiert das Besuchermuster für die Änderungsklausel.</summary>
      <param name="modificationClause">Die Änderungsklausel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>Implementiert das Besuchermuster für die Auflistung von Änderungsklauseln.</summary>
      <param name="modificationClauses">Die Änderungsklauseln.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>Implementiert das Besuchermuster für die Query-Befehlsstruktur.</summary>
      <param name="queryTree">Die Query-Befehlsstruktur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>Implementiert das Besuchermuster für die Set-Klausel.</summary>
      <param name="setClause">Die Set-Klausel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>Implementiert das Besuchermuster für die Update-Befehlsstruktur.</summary>
      <param name="updateTree">Die Update-Befehlsstruktur.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>Ein abstrakter Basistyp für Typen, die die IExpressionVisitor-Schnittstelle implementieren, von der abgeleitet werden soll.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">Der DbAndExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">Der DbApplyExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">Der DbArithmeticExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">Der DbCaseExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">Der DbCastExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">Der DbComparisonExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">Der DbConstantExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">Der DbCrossJoinExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">Der DeRefExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">Der DbDistinctExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">Der DbElementExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">Der DbEntityRefExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">Der DbExceptExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Wird aufgerufen, wenn ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> eines andernfalls nicht erkannten Typs gefunden wird.</summary>
      <param name="expression">Der Ausdruck</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst, wenn diese Methode aufgerufen wird, da sie angibt, dass <paramref name="expression" /> von einem nicht unterstützten Typ ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">Der DbFilterExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">Der DbFunctionExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">Der DbExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />.</summary>
      <param name="expression">Der DbInExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">Der DbIntersectExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">Der DbIsEmptyExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">Der DbIsNullExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">Der DbIsOfExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">Der DbJoinExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">Der DbLambdaExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">Der DbLikeExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">Der DbLimitExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">Der DbNewInstanceExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">Der DbNotExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">Der DbNullExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">Der DbOfTypeExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">Der DbOrExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">Der DbParameterReferenceExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">Der DbProjectExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">Der DbPropertyExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">Der DbQuantifierExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">Der DbRefExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">Der DbRefKeyExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">Der DbRelationshipNavigationExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">Der DbScanExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">Der DbSkipExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">Der DbSortExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">Der DbTreatExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">Der DbUnionAllExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Besuchermustermethode für <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">der DbVariableReferenceExpression, der aufgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.</summary>
      <param name="aggregate">Das Aggregat, zu dem gewechselt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>Hilfsmethode zum Aufrufen jedes <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> in der Liste, wenn die Liste nicht null ist.</summary>
      <param name="aggregates">Die Liste von aufzurufenden Aggregaten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />.</summary>
      <param name="expression">Der aufzurufende DbBinaryExpression.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, wenn es nicht null ist.</summary>
      <param name="expression">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Hilfsmethode zum Nachverarbeiten, nachdem eine DbExpressionBinding aufgerufen wurde.</summary>
      <param name="binding">Die zuvor aufgerufene DbExpressionBinding.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />.</summary>
      <param name="binding">Die aufzurufende DbExpressionBinding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Hilfsmethode zum Aufrufen jedes <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> in der angegebenen Liste, wenn die Liste nicht null ist.</summary>
      <param name="expressionList">Die Liste der aufzurufenden Ausdrücke.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Hilfsmethode, die angibt, dass die Gruppierungsschlüssel von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> aufgerufen wurden und nun die Aggregate aufgerufen werden.</summary>
      <param name="binding">Die DbGroupExpressionBinding des DbGroupByExpression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Hilfsmethode zum Nachverarbeiten, nachdem eine DbGroupExpressionBinding aufgerufen wurde.</summary>
      <param name="binding">Die zuvor aufgerufene DbGroupExpressionBinding.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />.</summary>
      <param name="binding">Die aufzurufende DbGroupExpressionBinding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Hilfsmethode zum Nachverarbeiten, nachdem ein DbLambda aufgerufen wurde.</summary>
      <param name="lambda">Das zuvor aufgerufene DbLambda.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Hilfsmethode, die anzeigt, dass der Text eines Lambdas <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> jetzt aufgerufen wird.</summary>
      <param name="lambda">Das DbLambda, das aufgerufen werden soll</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>Hilfsmethode zum Aufrufen des angegebenen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" />.</summary>
      <param name="expression">Der aufzurufende DbUnaryExpression.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>Aggregate sind Pseudoausdrücke.Sie sind im Erscheinungsbild wie Ausdrücke, der Erscheinungsort ist jedoch stark eingeschränkt, nämlich auf die Aggregatsklausel eines group-by-Ausdrucks.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     Ruft die Liste der Ausdrücke ab, die die Argumente für dieses Aggregat definieren. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     Ruft den Ergebnistyp dieses Aggregats ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     Stellt die logische And-Verknüpfung von zwei Boolean-Argumenten dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     Stellt einen Anwendungsvorgang dar. Dabei handelt es sich um den Aufruf des angegebenen Funktionselements für jedes Element im angegebenen Eingabeset. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Funktionselement angibt, das für jedes Element im Eingabeset aufgerufen wird. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     Stellt eine arithmetische Operation (Addition, Subtraktion, Multiplikation, Division, Modulo oder Negation) dar, die auf zwei numerische Argumente angewendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     Ruft die Liste von Ausdrücken ab, die die aktuellen Argumente darstellen. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     Der abstrakte Basistyp für Ausdrücke, die zwei Ausdrucksoperanden akzeptieren. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das linke Argument definiert. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das rechte Argument definiert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     Stellt einen logischen Vorgang vom Typ 'Case When...Then...Else' dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     Ruft die Else-Klausel dieses DbCaseExpression ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     Ruft die Then-Klauseln dieses DbCaseExpression ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     Ruft die When-Klauseln dieses DbCaseExpression ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     Stellt einen Umwandlungsvorgang dar, der auf ein polymorphes Argument angewendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>Stellt den abstrakten Basistyp für die Lösch-, Abfrage, Einfüge- und Update-DbCommandTree-Typen dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>Ruft den Datenbereich ab, in dem sich die Metadaten, die von dieser Befehlsstruktur verwendet werden, befinden müssen.</summary>
      <returns>Der Datenbereich, in dem sich die Metadaten, die von dieser Befehlsstruktur verwendet werden, befinden müssen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>Ruft den Metadatenarbeitsbereich ab, der von dieser Befehlsstruktur verwendet wird.</summary>
      <returns>Der Metadatenarbeitsbereich, der von dieser Befehlsstruktur verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Ruft den Namen und den entsprechenden Typ jedes Parameters ab, auf den innerhalb dieser Befehlsstruktur verwiesen werden kann.</summary>
      <returns>Der Name und der entsprechende Typ jedes Parameters, auf den innerhalb dieser Befehlsstruktur verwiesen werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> zurück.</summary>
      <returns>Die Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>Ruft ab, ob die Befehlsstruktur die NULL-Semantik für die Datenbank verwendet.</summary>
      <returns>Die Befehlsstruktur verwendet die NULL-Semantik für die Datenbank.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>Beschreibt die verschiedenen Datenbankbefehle. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>Gibt Delete-Befehl an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>Gibt den Function-Befehl an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>Gibt den Insert-Befehl an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>Gibt den Query-Befehl an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>Gibt den Update-Befehl an.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     Stellt einen Vergleich (Gleichheit, Größer als, Größer als oder gleich, Kleiner als, Kleiner als oder gleich, Ungleichheit) dar, der auf zwei Argumente angewendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     Stellt einen konstanten Wert dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     Ruft den konstanten Wert ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     Stellt einen bedingungslosen Join zwischen den angegebenen Auflistungsargumenten dar </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />-Liste ab, die die Eingabesets für den Join enthält. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Stellt einen einzeiligen Löschvorgang dar, der als kanonische Befehlsstruktur ausgedrückt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" />-Klasse.</summary>
      <param name="metadata">Der Metadatenarbeitsbereich.</param>
      <param name="dataSpace">Der Datenbereich.</param>
      <param name="target">Die Datenbank-Ausdrucksbindung.</param>
      <param name="predicate">Der Datenbankausdruck.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das Prädikat angibt, mit dem die zu löschenden Member der Zielauflistung festgelegt werden.</summary>
      <returns>Das Prädikat, mit dem die zu löschenden Member der Zielauflistung festgelegt werden.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     Stellt das Abrufen einer gegebenen Entität unter Verwendung des angegebenen Verweises dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     Stellt das Entfernen von doppelten Elementen aus dem Operanden des angegebenen Satzes dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>Stellt die Konvertierung des Operanden des angegebenen Satzes in ein Singleton dar.Wenn der Satz leer ist, gibt die Konvertierung 'null' zurück, andernfalls gibt die Konvertierung eines der Elemente im Satz zurück.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     Stellt das Abrufen eines Verweises auf die gegebenen Entität als Verweis dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     Stellt die Operation der Mengensubtraktion zwischen dem linken und dem rechten Operanden dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Stellt den Basistyp für alle Ausdrücke dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implementiert die Besuchermuster-Schnittstellenmethode für Ausdrücke, die keinen Ergebniswert erzeugen.</summary>
      <param name="visitor">Eine Instanz von DbExpressionVisitor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implementiert die Besuchermuster-Schnittstelle für Ausdrücke, die einen Ergebniswert eines bestimmten Typs erstellen.</summary>
      <returns>Eine Instanz von <paramref name="TResultType" />.</returns>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt.</param>
      <typeparam name="TResultType">Der Typ des von <paramref name="visitor" /> erstellten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen DbExpression-Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen DbExpression-Instanz ist, andernfalls false.</returns>
      <param name="obj">Das mit der aktuellen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Instanz zu vergleichende Objekt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Ruft die Art von Ausdruck ab, die die Operation dieses Ausdrucks angibt.</summary>
      <returns>Die Art von Ausdruck, die die Operation dieses Ausdrucks angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Binärwert darstellt, der möglicherweise null ist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Binärwert darstellt.</returns>
      <param name="value"> Der Binärwert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen booleschen Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen booleschen Wert darstellt.</returns>
      <param name="value">Der boolesche Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Bytewert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Bytewert darstellt.</returns>
      <param name="value">Der Bytewert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen <see cref="T:System.DateTime" />-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen DateTime-Wert darstellt.</returns>
      <param name="value">Der DateTime-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen <see cref="T:System.DateTimeOffset" />-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen DateTimeOffset-Wert darstellt.</returns>
      <param name="value">Der DateTimeOffset-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Dezimalwert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen Dezimalwert darstellt.</returns>
      <param name="value">Der Dezimalwert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen double-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen double-Wert darstellt.</returns>
      <param name="value">Der double-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert darstellt, der möglicherweise null ist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen DbGeography-Wert darstellt.</returns>
      <param name="value">Der DbGeography-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert darstellt, der möglicherweise null ist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen DbGeometry-Wert darstellt.</returns>
      <param name="value">Der DbGeometry-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das den angegebenen <see cref="T:System.Guid" />-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Guid-Wert darstellt.</returns>
      <param name="value">Der Guid-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int16-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int16-Wert darstellt.</returns>
      <param name="value">Der Int16-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int32-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int32-Wert darstellt.</returns>
      <param name="value">Der Int32-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int64-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Int64-Wert darstellt.</returns>
      <param name="value">Der Int64-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Single-Wert (der Nullwerte zulässt) darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den angegebenen Single-Wert darstellt.</returns>
      <param name="value">Der Single-Wert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>Erstellt eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, die den angegebenen Zeichenfolgenwert darstellt.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, die den angegebenen Zeichenfolgenwert darstellt.</returns>
      <param name="value">Der Zeichenfolgenwert, auf dem der zurückgegebene Ausdruck basieren soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Fungiert als Hashfunktion für den Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Ausdruck.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein Array von 8-Bit-Ganzzahlen ohne Vorzeichen in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der den konvertierte Array von 8-Bit-Ganzzahlen ohne Vorzeichen darstellt.</returns>
      <param name="value">Ein Array von 8-Bit-Ganzzahlen ohne Vorzeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein DbGeography-Objekt in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das konvertierte DbGeography-Objekt darstellt.</returns>
      <param name="value">Das DbGeography-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein DbGeometry-Objekt in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das konvertierte DbGeography-Objekt darstellt.</returns>
      <param name="value">Das DbGeometry-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein boolesches Objekt, das NULL-Werte zulässt, in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das konvertierte boolesche Objekt darstellt, das NULL-Werte zulässt.</returns>
      <param name="value">Das boolesche Objekt, das NULL sein kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine 8-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die konvertierte 8-Bit-Ganzzahl ohne Vorzeichen darstellt.</returns>
      <param name="value">Eine vorzeichenlose 8-Bit-Ganzzahl, die auf NULL festgelegt werden kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein <see cref="T:System.DateTime" />-Objekt, das NULL-Werte zulässt, in eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das das <see cref="T:System.DateTime" />-Objekt darstellt.</returns>
      <param name="value">Das <see cref="T:System.DateTime" />-Objekt, das NULL sein kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein <see cref="T:System.DateTimeOffset" />-Objekt, das NULL-Werte zulässt, in eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der den <see cref="T:System.DateTime" />-Wert darstellt, welcher NULL sein kann.</returns>
      <param name="value">Das <see cref="T:System.DateTime" />-Objekt, das NULL sein kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein auf NULL festlegbares dezimales Objekt in <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das auf NULL festlegbare dezimale Objekt darstellt.</returns>
      <param name="value">Das auf NULL festlegbare Decimal-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein auf NULL festlegbares double-Objekt in <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das auf NULL festlegbare double Objekt darstellt.</returns>
      <param name="value">Das auf NULL festlegbare double-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein auf NULL festlegbares GUID-Objekt in <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der das <see cref="T:System.Guid" />-Objekt, das NULL-Werte zulässt, darstellt.</returns>
      <param name="value">Ein auf NULL festlegbares <see cref="T:System.Guid" />-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine 16-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der die 16-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, darstellt.</returns>
      <param name="value">Eine vorzeichenlose 16-Bit-Ganzzahl, die auf NULL festgelegt werden kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine 32-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der die 32-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, darstellt.</returns>
      <param name="value">Eine vorzeichenlose 32-Bit-Ganzzahl, die auf NULL festgelegt werden kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine 64-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der die 64-Bit-Ganzzahl ohne Vorzeichen, die NULL-Werte zulässt, darstellt.</returns>
      <param name="value">Eine vorzeichenlose 64-Bit-Ganzzahl, die auf NULL festgelegt werden kann.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine Gleitkommazahl mit einfacher Genauigkeit, die NULL-Werte zulässt, in eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, die eine Gleitkommazahl mit einfacher Genauigkeit darstellt.</returns>
      <param name="value">Die Gleitkommazahl mit einfacher Genauigkeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert eine sequenzielle Auflistung von Unicode-Zeichen in <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das eine sequenzielle Auflistung von Unicode-Zeichen darstellt.</returns>
      <param name="value">Eine sequenzielle Auflistung von Unicode-Zeichen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>Ruft die Typmetadaten für den Ergebnistyp des Ausdrucks ab.</summary>
      <returns>Die Typmetadaten für den Ergebnistyp des Ausdrucks.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>Beschreibt eine Bindung für einen Ausdruck.Grundsätzlich ähnlich einer foreach-Schleife in C#.Die DbExpression-Eigenschaft definiert die Auflistung, die durchlaufen wird, während die Var-Eigenschaft ein Mittel bereitstellt, um auf das aktuelle Element der Auflistung während einer Iteration zu verweisen.DbExpressionBinding wird verwendet, um die Satzargumente mit relationalen Ausdrücken wie <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> und <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> zu beschreiben.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das den Eingabesatz definiert. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> ab, das auf die Elementvariable verweist. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     Ruft den der Elementvariable zugewiesenen Namen ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     Ruft die Typmetadaten der Elementvariable ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     Beschreibt die verschiedenen Arten (Klassen) von Ausdrücken </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     True für alle. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     Logisches 'And'. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     True für einen. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     Bedingte case-Anweisung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     Polymorphe Typumwandlung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     Ein Konstantenwert. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     Cross Join </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     Dereferenzierung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     Entfernen von Duplikaten. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     Division. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     Set-To-Singleton-Konvertierung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     Abrufen von Entitätsverweisen. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     Gleichheit </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     Mengensubtraktion </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     Einschränkung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     Vollständiger äußerer Join </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     Aufruf einer eigenständigen Funktion </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     Größer als. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     Größer oder gleich. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     Gruppieren. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     In. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     Innerer Join </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     Festlegen der Schnittmenge. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     Ermitteln leerer Mengen. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Identifizieren von null. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     Typvergleich (angegebener Typ oder Untertyp). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     Typvergleich (nur angegebener Typ). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     Verwenden einer Lambda-Funktion </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     Linker äußerer Join </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     Kleiner als. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     Kleiner oder gleich. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     Zeichenfolgenvergleich. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     Einschränkung der Anzahl der Ergebnisse ("TOP n"). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     Subtraktion. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     Modulo. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     Multiplikation. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     Erstellen von Instanzen, Zeilen und Mengen. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     Logisches 'Not'. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     Ungleichheit. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     Mengenelemente nach Typ (oder Untertyp). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     Mengenelemente nach (exaktem) Typ. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     Logisches 'Or'. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     Verweis auf einen Parameter. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     Addition. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     Projektion. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     Abrufen einer statischen oder Instanzeneigenschaft. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     Verweis. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     Abrufen von Ref-Schlüsselwerten. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     Navigieren einer Beziehung (Zusammensetzung oder Zuordnung). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     Scannen von Entitäten- oder Beziehungsmengen. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     Überspringen von Elementen einer geordneten Auflistung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     Sortieren. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     Typkonvertierung. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     Negation. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     Vereinigungsmenge (mit Duplikaten). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     Ein Verweis auf eine Variable. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>Stellt sicher, dass alle Metadaten in einer angegebenen Ausdrucksbaumstruktur aus dem angegebenen Metadatenarbeitsbereich stammen. Außerdem werden die Ausdrücke (falls notwendig) erneut an die entsprechenden Ersetzungsmetadaten gebunden und neu erstellt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" />-Klasse.</summary>
      <param name="targetWorkspace">Der Zielarbeitsbereich.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implementiert das Besuchermuster für den Abruf der Instanzeigenschaft.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der Ausdruck.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implementiert das Besuchermuster für die Entitätenmenge.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="entitySet">Die Entitätenmenge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implementiert das Besuchermuster für die Funktion.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="functionMetadata">Die Metadaten der Funktion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implementiert das Besuchermuster für den Typ.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="type">Der Typ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implementiert das Besuchermuster für die Verwendung des Typs.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="type">Der Typ.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>Die abstrakte Basisklasse des Besuchermusters für Ausdrücke, sollte von Besuchern implementiert werden, die keinen Ergebniswert zurückgeben.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Besuchermustermethode für DbAndExpression.</summary>
      <param name="expression">Der DbAndExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Besuchermustermethode für DbApplyExpression.</summary>
      <param name="expression">Der DbApplyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Besuchermustermethode für DbArithmeticExpression.</summary>
      <param name="expression">Der DbArithmeticExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Besuchermustermethode für DbCaseExpression.</summary>
      <param name="expression">Der DbCaseExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Besuchermustermethode für DbCastExpression.</summary>
      <param name="expression">Der DbCastExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Besuchermustermethode für DbComparisonExpression.</summary>
      <param name="expression">Der DbComparisonExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Besuchermustermethode für DbConstantExpression.</summary>
      <param name="expression">Der DbConstantExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Besuchermustermethode für DbCrossJoinExpression.</summary>
      <param name="expression">Der DbCrossJoinExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Besuchermustermethode für DbDerefExpression.</summary>
      <param name="expression">Das DbDerefExpression, das aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Besuchermustermethode für DbDistinctExpression.</summary>
      <param name="expression">Der DbDistinctExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Besuchermustermethode für DbElementExpression.</summary>
      <param name="expression">Der DbElementExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Besuchermustermethode für DbEntityRefExpression.</summary>
      <param name="expression">Der DbEntityRefExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Besuchermustermethode für DbExceptExpression.</summary>
      <param name="expression">Der DbExceptExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Diese Methode wird aufgerufen, wenn ein Ausdruck eines andernfalls nicht erkannten Typs gefunden wird.</summary>
      <param name="expression">Der Ausdruck.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Besuchermustermethode für DbFilterExpression.</summary>
      <param name="expression">Der DbFilterExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Besuchermustermethode für DbFunctionExpression.</summary>
      <param name="expression">Der DbFunctionExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Besuchermustermethode für DbGroupByExpression.</summary>
      <param name="expression">Das DbGroupByExpression, das aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Besuchermustermethode für DbInExpression.</summary>
      <param name="expression">Der DbInExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Besuchermustermethode für DbIntersectExpression.</summary>
      <param name="expression">Der DbIntersectExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Besuchermustermethode für DbIsEmptyExpression.</summary>
      <param name="expression">Der DbIsEmptyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Besuchermustermethode für DbIsNullExpression.</summary>
      <param name="expression">Der DbIsNullExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Besuchermustermethode für DbIsOfExpression.</summary>
      <param name="expression">Der DbIsOfExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Besuchermustermethode für DbJoinExpression.</summary>
      <param name="expression">Der DbJoinExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Besuchermustermethode für DbLambdaExpression.</summary>
      <param name="expression">Der DbLambdaExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Besuchermustermethode für DbLikeExpression.</summary>
      <param name="expression">Der DbLikeExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Besuchermustermethode für DbLimitExpression.</summary>
      <param name="expression">Der DbLimitExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Besuchermustermethode für DbNewInstanceExpression.</summary>
      <param name="expression">Der DbNewInstanceExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Besuchermustermethode für DbNotExpression.</summary>
      <param name="expression">Der DbNotExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Besuchermustermethode für DbNullExpression.</summary>
      <param name="expression">Der DbNullExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Besuchermustermethode für DbOfTypeExpression.</summary>
      <param name="expression">Der DbOfTypeExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Besuchermustermethode für DbOrExpression.</summary>
      <param name="expression">Der DbOrExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Besuchermustermethode für DbParameterReferenceExpression.</summary>
      <param name="expression">Der DbParameterReferenceExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Besuchermustermethode für DbProjectExpression.</summary>
      <param name="expression">Der DbProjectExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Besuchermustermethode für DbPropertyExpression.</summary>
      <param name="expression">Der DbPropertyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Besuchermustermethode für DbQuantifierExpression.</summary>
      <param name="expression">Der DbQuantifierExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Besuchermustermethode für DbRefExpression.</summary>
      <param name="expression">Der DbRefExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Besuchermustermethode für DbRefKeyExpression.</summary>
      <param name="expression">Der DbRefKeyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Besuchermustermethode für DbRelationshipNavigationExpression.</summary>
      <param name="expression">Der DbRelationshipNavigationExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Besuchermustermethode für DbScanExpression.</summary>
      <param name="expression">Der DbScanExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Besuchermustermethode für DbSkipExpression.</summary>
      <param name="expression">Der DbSkipExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Besuchermustermethode für DbSortExpression.</summary>
      <param name="expression">Der DbSortExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Besuchermustermethode für DbTreatExpression.</summary>
      <param name="expression">Der DbTreatExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Besuchermustermethode für DbUnionAllExpression.</summary>
      <param name="expression">Der DbUnionAllExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Besuchermustermethode für DbVariableReferenceExpression.</summary>
      <param name="expression">der DbVariableReferenceExpression, der aufgerufen wird.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     Die abstrakte Basisklasse des Besuchermusters für Ausdrücke, sollte von Besuchern implementiert werden, die einen Ergebniswert eines bestimmten Typs zurückgeben. </summary>
      <typeparam name="TResultType"> Der vom Besucher erzeugte Ergebniswerttyp. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     Typisierte Besuchermustermethode für DbAndExpression. </summary>
      <param name="expression"> Der DbAndExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     Typisierte Besuchermustermethode für DbApplyExpression. </summary>
      <param name="expression"> Der DbApplyExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     Typisierte Besuchermustermethode für DbArithmeticExpression. </summary>
      <param name="expression"> Der DbArithmeticExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     Typisierte Besuchermustermethode für DbCaseExpression. </summary>
      <param name="expression"> Der DbCaseExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     Typisierte Besuchermustermethode für DbCastExpression. </summary>
      <param name="expression"> Der DbCastExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     Typisierte Besuchermustermethode für DbComparisonExpression. </summary>
      <param name="expression"> Der DbComparisonExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     Typisierte Besuchermustermethode für DbConstantExpression. </summary>
      <param name="expression"> Der DbConstantExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     Typisierte Besuchermustermethode für DbCrossJoinExpression. </summary>
      <param name="expression"> Der DbCrossJoinExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     Besuchermustermethode für DbDerefExpression. </summary>
      <param name="expression"> Das DbDerefExpression, das aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     Typisierte Besuchermustermethode für DbDistinctExpression. </summary>
      <param name="expression"> Der DbDistinctExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     Typisierte Besuchermustermethode für DbElementExpression. </summary>
      <param name="expression"> Der DbElementExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     Besuchermustermethode für DbEntityRefExpression. </summary>
      <param name="expression"> Der DbEntityRefExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     Typisierte Besuchermustermethode für DbExceptExpression. </summary>
      <param name="expression"> Der DbExceptExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     Diese Methode wird aufgerufen, wenn ein Ausdruck eines andernfalls nicht erkannten Typs gefunden wird. </summary>
      <param name="expression"> Der Ausdruck. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     Typisierte Besuchermustermethode für DbFilterExpression. </summary>
      <param name="expression"> Der DbFilterExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     Besuchermustermethode für DbFunctionExpression </summary>
      <param name="expression"> Der DbFunctionExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     Typisierte Besuchermustermethode für DbGroupByExpression. </summary>
      <param name="expression"> Das DbGroupByExpression, das aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     Typisierte Besuchermustermethode für DbInExpression. </summary>
      <param name="expression"> Der DbInExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     Typisierte Besuchermustermethode für DbIntersectExpression. </summary>
      <param name="expression"> Der DbIntersectExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     Typisierte Besuchermustermethode für DbIsEmptyExpression. </summary>
      <param name="expression"> Der DbIsEmptyExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     Typisierte Besuchermustermethode für DbIsNullExpression. </summary>
      <param name="expression"> Der DbIsNullExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     Typisierte Besuchermustermethode für DbIsOfExpression. </summary>
      <param name="expression"> Der DbIsOfExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     Typisierte Besuchermustermethode für DbJoinExpression. </summary>
      <param name="expression"> Der DbJoinExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     Besuchermustermethode für DbLambdaExpression. </summary>
      <param name="expression"> Der DbLambdaExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     Besuchermustermethode für DbLikeExpression. </summary>
      <param name="expression"> Der DbLikeExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     Besuchermustermethode für DbLimitExpression. </summary>
      <param name="expression"> Der DbLimitExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     Typisierte Besuchermustermethode für DbNewInstanceExpression. </summary>
      <param name="expression"> Der DbNewInstanceExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     Typisierte Besuchermustermethode für DbNotExpression. </summary>
      <param name="expression"> Der DbNotExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     Typisierte Besuchermustermethode für DbNullExpression. </summary>
      <param name="expression"> Der DbNullExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     Typisierte Besuchermustermethode für DbOfTypeExpression. </summary>
      <param name="expression"> Der DbOfTypeExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     Typisierte Besuchermustermethode für DbOrExpression. </summary>
      <param name="expression"> Der DbOrExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     Typisierte Besuchermustermethode für DbParameterReferenceExpression. </summary>
      <param name="expression"> Der DbParameterReferenceExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     Typisierte Besuchermustermethode für DbProjectExpression. </summary>
      <param name="expression"> Der DbProjectExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     Typisierte Besuchermustermethode für DbPropertyExpression. </summary>
      <param name="expression"> Der DbPropertyExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     Typisierte Besuchermustermethode für DbQuantifierExpression. </summary>
      <param name="expression"> Der DbQuantifierExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     Typisierte Besuchermustermethode für DbRefExpression. </summary>
      <param name="expression"> Der DbRefExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     Besuchermustermethode für DbRefKeyExpression. </summary>
      <param name="expression"> Der DbRefKeyExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     Typisierte Besuchermustermethode für DbRelationshipNavigationExpression. </summary>
      <param name="expression"> Der DbRelationshipNavigationExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     Typisierte Besuchermustermethode für DbScanExpression. </summary>
      <param name="expression"> Der DbScanExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     Typisierte Besuchermustermethode für DbSkipExpression. </summary>
      <param name="expression"> Der DbSkipExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     Typisierte Besuchermustermethode für DbSortExpression. </summary>
      <param name="expression"> Der DbSortExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     Typisierte Besuchermustermethode für DbTreatExpression. </summary>
      <param name="expression"> Der DbTreatExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     Typisierte Besuchermustermethode für DbUnionAllExpression. </summary>
      <param name="expression"> Der DbUnionAllExpression, der aufgerufen wird. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     Typisierte Besuchermustermethode für DbVariableReferenceExpression. </summary>
      <param name="expression"> der DbVariableReferenceExpression, der aufgerufen wird. </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     Stellt ein Prädikat dar, das auf ein Eingabeset angewendet wird, um die Menge von Elementen zu erstellen, die das Prädikat erfüllen. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das zum Filtern des Eingabesets verwendete Prädikat angibt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     Der aggregierte Typ, der dem Aufruf einer Aggregatfunktion entspricht. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     Ruft einen Wert ab, der anzeigt, ob die Aggregatfunktion auf eine bestimmte Weise angewendet wird </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     Ruft die Methodenmetadaten ab, die die aufzurufende Aggregatfunktion angeben. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Stellt einen Funktionsaufruf dar, der als kanonische Befehlsstruktur ausgedrückt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>Erstellt eine neue DbFunctionCommandTree-Struktur, die die angegebenen Metadatenarbeitsbereichs-, Datenbereichs- und Funktionsmetadaten verwendet.</summary>
      <param name="metadata">Der Metadatenarbeitsbereich, den die Befehlsstruktur verwenden soll. </param>
      <param name="dataSpace">Der logische "space", zu dem Metadaten in den in dieser Befehlsstruktur verwendeten Ausdrücken gehören müssen.</param>
      <param name="edmFunction">Die aufzurufende EDM-Funktion.</param>
      <param name="resultType">Der Ergebnistyp der Funktion.</param>
      <param name="parameters">Die Parameter, die der aufzurufenden Funktion zugeordnet sind.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab, oder legt diese fest.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Ruft die <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />-Instanz ab, die die Funktion darstellt, die aufgerufen werden soll.</summary>
      <returns>Die <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />-Instanz, die die Funktion darstellt, die aufgerufen werden soll.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Ruft den Ergebnistyp der Funktion ab; derzeit beschränkt auf eine Auflistung von RowTypes.Gibt anders als eine typische RowType-Instanz nur Namen/Typ, nicht Parameterreihenfolge an.</summary>
      <returns>Der Ergebnistyp der Funktion.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     Stellt den Aufruf einer Funktion dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Liste ab, die die Argumente der Funktion enthält. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     Ruft die Metadaten für die aufzurufende Funktion ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>Stellt eine Auflistung von Elementen dar, aus denen sich eine Gruppe zusammensetzt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     Stellt einen 'Group by'-Vorgang dar, also eine Gruppierung der Elemente im Eingabeset basierend auf den angegebenen Schlüsselausdrücken, gefolgt von der Anwendung der angegebenen Aggregate. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />-Liste ab, die die anzuwendenden Aggregate enthält. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> ab, die das Eingabeset angibt und den Zugriff auf die Mengenelement- und Gruppenelementvariablen bereitstellt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Liste ab, die Gruppierungsschlüssel enthält. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Definiert die Bindung für das Eingabeset für ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.Zusätzlich zu den Eigenschaften von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> bietet DbGroupExpressionBinding auch Zugriff auf das Gruppenelement über den &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt;-Variablenverweis und auf das Gruppenaggregat über die &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt;-Eigenschaft.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das den Eingabesatz definiert. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     Ruft das DbGroupAggregate ab, das die Auflistung von Elementen der Gruppe darstellt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     Ruft das DbVariableReferenceExpression ab, das auf die Gruppenelementvariable verweist. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     Ruft den der Gruppenelementvariable zugewiesenen Namen ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     Ruft die Typmetadaten der Gruppenelementvariable ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     Ruft das DbVariableReferenceExpression ab, das auf die Elementvariable verweist. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     Ruft den der Elementvariable zugewiesenen Namen ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     Ruft die Typmetadaten der Elementvariable ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     Stellt einen booleschen Ausdruck dar, der prüft, ob ein angegebenes Element mit einem der Elemente in einer Liste übereinstimmt. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     Ruft ein DbExpression ab, das das abzugleichende Element angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     Ruft die Liste der DbExpression ab, um sie auf eine Übereinstimmung zu prüfen. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>Stellt einen einzeiligen Einfügevorgang dar, der als kanonische Befehlsstruktur ausgedrückt wird.Wenn die <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" />-Eigenschaft festgelegt ist, gibt der Befehl einen Reader zurück. Andernfalls gibt der Befehl einen skalaren Wert zurück, der die Anzahl der betroffenen Zeilen angibt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" />-Klasse.</summary>
      <param name="metadata">Die Metadaten.</param>
      <param name="dataSpace">Der Datenbereich.</param>
      <param name="target">Das Datenbankziel.</param>
      <param name="setClauses">Ein Satz Klauseln, die Werte von Spalten in der eingefügten Zeile bestimmen.</param>
      <param name="returning">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt ab, das auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt.'null' gibt an, dass dieser Befehl keine Ergebnisse zurückgibt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Ruft die SET-Klauseln ab, die Werte von Spalten in der eingefügten Zeile bestimmen.</summary>
      <returns>Ein Satz Klauseln, die Werte von Spalten in der eingefügten Zeile bestimmen.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     Stellt die Operation der Schnittmengenbildung zwischen dem linken und dem rechten Operanden dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     Stellt die Ermittlung einer leeren Menge für ein einzelnes Mengenargument dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     Stellt die Ermittlung eines Nullwerts für ein einzelnes Argument dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     Stellt den Typvergleich eines einzelnen Arguments mit dem angegebenen Typ dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     Ruft die Typmetadaten ab, mit denen die Typmetadaten des Arguments verglichen werden sollen. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     Stellt einen inneren, linken äußeren oder vollständigen äußeren Join zwischen den angegebenen Auflistungsargumenten mit der angegebenen Joinbedingung dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die Joinbedingung definiert, die angewendet werden soll. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die die linke Eingabe bereitstellt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die die rechte Eingabe bereitstellt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     Stellt die Anwendung einer Lambda-Funktion dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Liste mit den Argumenten ab, auf die die Lambda-Funktion angewendet werden soll. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> ab, das die von diesem Ausdruck angewendete Lambda-Funktion darstellt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     Stellt einen Zeichenfolgenvergleich mit dem angegebenen Muster mit optionaler Escapezeichenfolge dar </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     Ruft den Ausdruck ab, der die mit dem angegebenen Muster zu vergleichende Zeichenfolge angibt </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     Ruft den Ausdruck ab, der eine optionale, für den Vergleich zu verwendende Escapezeichenfolge bereitstellt </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     Ruft den Ausdruck ab, der das mit der angegebenen Zeichenfolge zu vergleichende Muster angibt </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     Stellt die Beschränkung der Anzahl der Elemente in der Argumentauflistung auf den angegebenen Wert dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     Ruft den Ausdruck ab, der die Eingabeauflistung angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     Ruft den Ausdruck ab, der die Beschränkung der Anzahl der von der Eingabeauflistung zurückgegebenen Elemente angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     Ruft ab, ob der Beschränkungsvorgang verknüpfte Ergebnisse einschließt, was zu mehr Ergebnissen als vom Grenzwert angegeben führen könnte, wenn Verknüpfungen vorhanden sind. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>Gibt eine einzelne Klausel in einem Einfüge- oder Updatevorgang an, siehe <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> und <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /></summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     Stellt einen DML-Vorgang dar, der als kanonische Befehlsstruktur ausgedrückt wird </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die die Zieltabelle für den DML-Vorgang angibt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     Stellt eine Konstruktion einer neuen Instanz eines angegebenen Typs, einschließlich Satz- und Datensatztypen, dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Liste ab, die die Eigenschaften-/Spaltenwerte oder Satzelemente für die neue Instanz zur Verfügung stellt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     Stellt den logischen Not-Operator eines Boolean-Arguments dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     Stellt einen Nullwert dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     Stellt das Abrufen von Elementen des angegebenen Typs aus dem angegebenen Satzargument dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     Ruft die Metadaten des Typs der Elemente ab, die aus dem Satzargument abgerufen werden sollen. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     Stellt die logische OR-Verknüpfung von zwei Boolean-Argumenten dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     Stellt einen Verweis auf einen Parameter dar, der in der Befehlsstruktur, die diesen Ausdruck enthält, deklariert wurde. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     Ruft den Namen des Parameters ab, auf den verwiesen wird. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     Stellt die Projektion einer angegebenen Gruppe von Werten über das angegebene Eingabeset dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die Projektion definiert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>Stellt Methoden und Eigenschaften zum Abrufen einer Instanzeigenschaft zur Verfügung.Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implementiert das Besuchermuster für Ausdrücke, die keinen Ergebniswert erstellen.</summary>
      <param name="visitor">Eine Instanz von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">visitor ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implementiert das Besuchermuster für Ausdrücke, die einen Ergebniswert eines bestimmten Typs erstellen.</summary>
      <returns>Ein Ergebniswert eines bestimmten Typs, der von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> erstellt wird.</returns>
      <param name="visitor">Eine Instanz eines typisierten <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />, der einen Ergebniswert eines bestimmten Typs erstellt.</param>
      <typeparam name="TResultType">Der Typ des vom Besucher erstellten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor ist NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die Instanz definiert, von der die Eigenschaft abgerufen werden soll.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der die Instanz definiert, von der die Eigenschaft abgerufen werden soll.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>Aktiviert die implizite Umwandlung zu <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <returns>Der konvertierte Wert.</returns>
      <param name="value">Der Ausdruck, der konvertiert wird.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Ruft die Eigenschaftenmetadaten für die abzurufende Eigenschaft ab.</summary>
      <returns>Die Eigenschaftenmetadaten für die abzurufende Eigenschaft.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Erstellt auf Grundlage dieses Eigenschaftsausdrucks ein neues Schlüssel-Wert-Paar.</summary>
      <returns>Ein neues Schlüssel-Wert-Paar mit dem von der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> abgeleiteten Schlüssel und Wert.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     Stellt eine Quantifiziereroperation der angegebenen Art (Any, All) über die Elemente des angegebenen Eingabesets dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     Ruft das Boolean-Prädikat ab, das für jedes Element des Eingabesets ausgewertet werden soll. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>Stellt einen Abfragevorgang dar, der als kanonische Befehlsstruktur ausgedrückt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />-Klasse, die den angegebenen Metadatenarbeitsbereich verwendet.</summary>
      <param name="metadata">Der Metadatenarbeitsbereich, den die Befehlsstruktur verwenden soll.</param>
      <param name="dataSpace">Der logische "space", zu dem Metadaten in den in dieser Befehlsstruktur verwendeten Ausdrücken gehören müssen.</param>
      <param name="query">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die Logik der Abfrage definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> oder <paramref name="query" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> stellt keinen gültigen Datenbereich dar.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />-Klasse, die den angegebenen Metadatenarbeitsbereich verwendet.</summary>
      <param name="metadata">Der Metadatenarbeitsbereich, den die Befehlsstruktur verwenden soll.</param>
      <param name="dataSpace">Der logische "space", zu dem Metadaten in den in dieser Befehlsstruktur verwendeten Ausdrücken gehören müssen. </param>
      <param name="query">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die Logik der Abfrage definiert. </param>
      <param name="validate">true zum Überprüfen der Struktur, andernfalls false.Wenn auf 'false' gesetzt, ist die Überprüfung der Struktur deaktiviert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> oder <paramref name="query" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> stellt keinen gültigen Datenbereich dar.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />-Klasse.</summary>
      <param name="metadata">Der Metadatenarbeitsbereich, den die Befehlsstruktur verwenden soll.</param>
      <param name="dataSpace">Der logische "space", zu dem Metadaten in den in dieser Befehlsstruktur verwendeten Ausdrücken gehören müssen.</param>
      <param name="query">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die Logik der Abfrage definiert.</param>
      <param name="validate">true zum Überprüfen der Struktur, andernfalls false.Wenn auf 'false' gesetzt, ist die Überprüfung der Struktur deaktiviert.</param>
      <param name="useDatabaseNullSemantics">true, um die NULL-Semantik der Datenbank zu verwenden, andernfalls false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die Logik der Abfrage definiert.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die Logik der Abfrage definiert.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     Stellt eine (stark typisierte) Referenz auf eine bestimmte Instanz innerhalb einer angegebenen Entitätenmenge dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     Ruft die Metadaten der Entitätenmenge ab, die die Instanz enthält. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     Stellt den Abruf des Schlüsselwerts des angegebenen Verweises als Zeile dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     Stellt die Navigation einer Beziehung (Zusammensetzung oder Zuordnung) unter Angabe der 'from'-Rolle, der 'to'-Rolle und einer Instanz der 'from'-Rolle dar </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     Ruft die Metadaten für das Ende der Beziehung ab, von dem navigiert werden soll </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     Ruft die Metadaten für das Ende der Beziehung ab, zu dem navigiert werden soll </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die Instanz des Endes der 'from'-Beziehung angibt, von dem die Navigation ausgehen soll. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     Ruft die Metadaten für die Beziehung ab, die navigiert wird </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     Stellt einen 'Scan' aller Elemente einer angegebenen Entitätenmenge dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     Ruft die Metadaten für die Entität oder die Paketbeziehung ab, auf die verwiesen wird. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     Gibt eine Klausel in einem Änderungsvorgang an, die den Wert einer Eigenschaft festlegt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das die zu aktualisierende Eigenschaft festlegt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das den neuen Wert für das Update der Eigenschaft festlegt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     Stellt einen Vorgang dar, der die angegebene Anzahl von Elementen des Eingabesets überspringt, nachdem die in den angegebenen Sortierschlüsseln beschriebene Reihenfolge angewendet wurde. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     Ruft den Ausdruck ab, der die Anzahl der in der Eingabeauflistung zu überspringenden Elemente angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />-Liste ab, die die Sortierreihenfolge definiert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     Gibt einen Sortierschlüssel an, der als Teil der Sortierreihenfolge in einem DbSortExpression verwendet werden kann. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     Ruft einen booleschen Wert ab, der angibt, ob dieser Sortierschlüssel eine aufsteigende Sortierreihenfolge verwendet oder nicht. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     Ruft eine Zeichenfolge ab, die die Sortierung für diesen Sortierschlüssel festlegt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     Ruft das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das den Wert dieses Sortierschlüssels bereitstellt. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     Stellt einen auf dem angegebenen Sortierschlüssel basierenden Sortiervorgang dar, der auf die Elemente des angegebenen Eingabesets angewendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     Ruft die <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> ab, die das Eingabeset angibt. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     Ruft eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />-Liste ab, die die Sortierreihenfolge definiert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     Stellt die Typkonvertierung eines einzelnen Arguments in den angegebenen Typ dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     Der abstrakte Basistyp für Ausdrücke, die einen einzelnen Ausdrucksoperanden akzeptieren </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das Argument definiert. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     Stellt die Operation der Vereinigungsmenge zwischen dem linken und dem rechten Operanden dar, bei der Duplikate nicht entfernt werden. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Stellt einen einzeiligen Aktualisierungsvorgang dar, der als Befehlsstruktur ausgedrückt wird.Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" />-Klasse.</summary>
      <param name="metadata">Das Modell, für das dieser Befehl ausgeführt wird.</param>
      <param name="dataSpace">Der Datenbereich.</param>
      <param name="target">Die Zieltabelle für den DML-Vorgang (Datenbearbeitungssprache).</param>
      <param name="predicate">Ein Prädikat, mit dem die zu aktualisierenden Member der Zielauflistung festgelegt werden.</param>
      <param name="setClauses">Die Liste der SET-Klauseln für die Aktualisierung, mit denen der Aktualisierungsvorgang festgelegt wird.</param>
      <param name="returning">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>Ruft die Art der Befehlsstruktur ab.</summary>
      <returns>Die Art der Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, das das Prädikat angibt, mit dem die zu aktualisierenden Member der Zielauflistung festgelegt werden.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der das Prädikat angibt, mit dem die zu aktualisierenden Member der Zielauflistung festgelegt werden.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Ruft einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> ab, der auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />-Objekt, das auf Grundlage der geänderten Zeilen eine Projektion der zurückzugebenden Ergebnisse angibt."null" gibt an, dass dieser Befehl keine Ergebnisse zurückgibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Ruft die Liste der SET-Klauseln für das Update ab, mit denen der Updatevorgang festgelegt wird.</summary>
      <returns>Die Liste der SET-Klauseln für die Aktualisierung, mit denen der Aktualisierungsvorgang festgelegt wird.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     Stellt einen Verweis auf eine Variable dar, die sich derzeit im Bereich befindet. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Die Besuchermustermethode für Ausdrücke, die nicht zu einem Ergebniswert führen. </summary>
      <param name="visitor"> Eine Instanz von DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Die Besuchermustermethode für Ausdrücke, die zu einem Ergebniswert eines bestimmten Typs führen. </summary>
      <param name="visitor"> Eine Instanz eines typisierten DbExpressionVisitor, der einen Ergebniswert des Typs TResultType erstellt. </param>
      <typeparam name="TResultType">     Der Typ des vom Besucher erzeugten Ergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     Ruft den Namen der Variable ab, auf die verwiesen wird. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>Wechselt zu jedem Element einer Ausdrucksbaumstruktur ab einem angegebenen Stammausdruck.Wenn sich ein Element ändert, wird die Struktur ab dem Stamm erneut erstellt, und der neue Stammausdruck wird zurückgegeben; andernfalls wird der ursprüngliche Stammausdruck zurückgegeben.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Stellt das Ereignis dar, wenn die angegebenen Bereichsvariablen in den Geltungsbereich für den Ausdrucksbesucher gelangen.</summary>
      <param name="scopeVariables">Die Auflistung von Bereichsvariablen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>Verlässt den Bereich für den Ausdrucksbesucher.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Ersetzt einen alten Ausdruck durch einen neuen Ausdruck für den Ausdrucksbesucher.</summary>
      <param name="oldExpression">Der alte Ausdruck.</param>
      <param name="newExpression">Der neue Ausdruck.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Stellt das Ereignis dar, wenn die Variable für den Ausdrucksbesucher neu gebunden wird.</summary>
      <param name="fromVarRef">Der Speicherort der Variablen.</param>
      <param name="toVarRef">Der Verweis der Variablen, wo sie neu gebunden wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Implementiert das Besuchermuster für den logischen AND-Ausdruck.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbAndExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Implementiert das Besuchermuster für den Aufruf der angegebenen Funktion für jedes Element im angegebenen Eingabesatz.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbApplyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Implementiert das Besuchermuster für die arithmetische Operation, die auf numerische Argumente angewendet wird.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbArithmeticExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Implementiert das Besuchermuster für die When-, Then- und Else-Klauseln.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbCaseExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Implementiert das Besuchermuster für die Typkonvertierung eines einzelnen Arguments in den angegebenen Typ.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbCastExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Implementiert das Besuchermuster für die Vergleichsoperation, die auf zwei Argumente angewendet wird.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbComparisonExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Implementiert das Besuchermuster für die verschiedenen Arten von Konstanten.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbConstantExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Implementiert das Besuchermuster für die unbedingte Join-Operation zwischen den angegebenen Auflistungsargumenten.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbCrossJoinExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Implementiert das Besuchermuster für den Ausdruck, der eine Entität anhand des bereitgestellten Verweises abruft.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Das DbDerefExpression, das aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Implementiert das Besuchermuster für die doppelten Elemente, die aus dem angegebenen Mengenargument entfernt wurden.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbDistinctExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Implementiert das Besuchermuster für die Konvertierung des angegebenen Mengenarguments in ein Singleton.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbElementExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Implementiert das Besuchermuster für den Ausdruck, der einen Verweis aus der zugrunde liegenden Entitätsinstanz extrahiert.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbEntityRefExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Implementiert das Besuchermuster für die Mengensubtraktion zwischen dem linken und dem rechten Operanden.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbExceptExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implementiert das Besuchermuster für die für Ausdruckstypen erforderlichen Grundfunktionen.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Implementiert das Besuchermuster für ein Prädikat, das angewendet wird, um eine Eingabemenge zu filtern.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbFilterExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Implementiert das Besuchermuster für den Aufruf einer Funktion.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbFunctionExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Implementiert das Besuchermuster für eine Gruppe nach Operation.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Das DbGroupByExpression, das aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Implementiert das Besuchermuster für den DbInExpression-Ausdruck.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbInExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Implementiert das Besuchermuster für die Schnittmengenoperation zwischen dem linken und dem rechten Operanden.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbIntersectExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Implementiert das Besuchermuster für die Ermittlung einer leeren Menge, die auf ein einzelnes Mengenargument angewendet wird.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbIsEmptyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Implementiert das Besuchermuster für die Ermittlung eines NULL-Wertes für ein einzelnes Argument.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbIsNullExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Implementiert das Besuchermuster für den Typvergleich eines einzelnen Arguments mit dem angegebenen Typ.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbIsOfExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Implementiert das Besuchermuster für eine innere, linke äußere oder vollständige äußere Join-Operation zwischen den angegebenen Auflistungsargumenten mit der angegebenen Join-Bedingung.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbJoinExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Implementiert das Besuchermuster für die Verwendung einer Lambda-Funktion auf Argumente, die von DbExpression-Objekten dargestellt werden.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbLambdaExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Implementiert das Besichermuster für einen Zeichenfolgenvergleich mit dem angegebenen Muster mit optionaler Escapezeichenfolge.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbLikeExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Implementiert das Besuchermuster für die Beschränkung der Anzahl der Elemente in der Argumentauflistung auf den angegebenen Wert.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbLimitExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Implementiert das Besuchermuster für das Erstellen einer neuen Instanz eines angegebenen Typs, einschließlich Mengen- und Datensatztypen.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbNewInstanceExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Implementiert das Besuchermuster für den logischen NOT-Operator eines einzelnen booleschen Arguments.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbNotExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Implementiert das Besuchermuster für einen Verweis auf ein typisiertes NULL-Literal.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbNullExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Implementiert das Besuchermuster für das Abrufen von Elementen des angegebenen Typs aus dem angegebenen Mengenargument.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbOfTypeExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Implementiert das Besuchermuster für den logischen OR-Operator von zwei booleschen Argumenten.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbOrExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Implementiert das Besuchermuster für einen Verweis auf einen Parameter, der in der Befehlsstruktur, die diesen Ausdruck enthält, deklariert wurde.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbParameterReferenceExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Implementiert das Besuchermuster für die Projektion einer angegebenen Eingabemenge über dem angegebenen Ausdruck.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbProjectExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implementiert das Besuchermuster für den Abruf der Instanzeigenschaft.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbPropertyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Implementiert das Besuchermuster für eine Quantifiziereroperation der angegebenen Art über die Elemente der angegebenen Eingabemenge.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbQuantifierExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Implementiert das Besuchermuster als stark typisierten Verweis auf eine bestimmte Instanz innerhalb einer Entitätenmenge.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbRefExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Implementiert das Besuchermuster für den Abruf des Schlüsselwerts aus dem zugrunde liegenden Verweiswert.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbRefKeyExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Implementiert das Besuchermuster für die Navigation einer Beziehung.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbRelationshipNavigationExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Implementiert das Besuchermuster für eine Überprüfung einer Entitäten- oder Beziehungsmenge, die durch die Target-Eigenschaft angegeben wird.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbScanExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Implementiert das Besuchermuster für den skip-Ausdruck.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbSkipExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Implementiert das Besuchermuster für einen Sortierschlüssel, der als Teil der Sortierreihenfolge verwendet werden kann.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbSortExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Implementiert das Besuchermuster für einen Typkonvertierungsvorgang, der auf ein polymorphes Argument angewendet wird.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbTreatExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Implementiert das Besuchermuster für die Mengenvereinigung zwischen dem linken und dem rechten Operanden.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">Der DbUnionAllExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Implementiert das Besuchermuster für den Verweis auf eine Variable, die sich derzeit im Geltungsbereich befindet.</summary>
      <returns>Der implementierte Besucher.</returns>
      <param name="expression">der DbVariableReferenceExpression, der aufgerufen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Implementiert das Besuchermuster für das Aggregat.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="aggregate">Das Aggregat, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implementiert das Besuchermuster für die Entitätenmenge.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="entitySet">Die Entitätenmenge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implementiert das Besuchermuster für den Ausdruck.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="expression">Der Ausdruck.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Implementiert das Besuchermuster für Ausdrucksbindung.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="binding">Die Ausdrucksbindung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Implementiert das Besuchermuster für die Ausdrucksbindungsliste.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="list">Die Ausdrucksbindungsliste.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Implementiert das Besuchermuster für die Ausdrucksliste.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="list">Die Ausdrucksliste.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implementiert das Besuchermuster für die Funktion.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="functionMetadata">Die Metadaten der Funktion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>Implementiert das Besuchermuster für das Funktionsaggregat.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="aggregate">Das Aggregat.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>Implementiert das Besuchermuster für das Gruppenaggregat.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="aggregate">Das Aggregat.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Implementiert das Besuchermuster für die Gruppenausdrucksbindung.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="binding">Die Bindung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Implementiert das Besuchermuster für die Lambda-Funktion.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="lambda">Eine Lambda-Funktion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>Implementiert das Besuchermuster für die Sortierklausel.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="clause">Die Sortierklausel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Implementiert das Besuchermuster für die Sortierreihenfolge.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="sortOrder">Die Sortierreihenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implementiert das Besuchermuster für den Typ.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="type">Der Typ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implementiert das Besuchermuster für die Verwendung des Typs.</summary>
      <returns>Das implementierte Besuchermuster.</returns>
      <param name="type">Der Typ.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>Stellt eine API bereit, um <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s zu erstellen, und lässt zu, dass auf diese API als Erweiterungsmethoden bei dem Ausdruckstyp selbst zugegriffen werden kann.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.</summary>
      <returns>Ein neues Funktionsaggregat mit einem Verweis auf das Argument und der angegebenen Funktion.Die Distinct-Eigenschaft des Funktionsaggregats hat den Wert false.</returns>
      <param name="function">Die Funktion, die die Aggregatoperation definiert.</param>
      <param name="argument">Das Argument, über dem die Aggregatfunktion berechnet werden sollte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> oder <paramref name="argument" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> ist keine Aggregatfunktion oder hat mehr als ein Argument, oder der Ergebnistyp von <paramref name="argument" /> ist nicht gleich oder nicht heraufstufbar auf den Parametertyp von <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />, das auf eine bestimmte Weise angewendet wird.</summary>
      <returns>Ein neues Funktionsaggregat mit einem Verweis auf das Argument und der angegebenen Funktion.Die Distinct-Eigenschaft des Funktionsaggregats hat den Wert 'true'.</returns>
      <param name="function">Die Funktion, die die Aggregatoperation definiert.</param>
      <param name="argument">Das Argument, über dem die Aggregatfunktion berechnet werden sollte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> oder <paramref name="argument" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> ist keine Aggregatfunktion oder hat mehr als ein Argument, oder der Ergebnistyp von <paramref name="argument" /> ist nicht gleich oder nicht heraufstufbar auf den Parametertyp von <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, das bestimmt, ob das angegebene Prädikat für alle Elemente des Eingabesets gültig ist.</summary>
      <returns>Ein neues DbQuantifierExpression, das den All-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="predicate">Eine Methode, die ein Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Prädikatlogik bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="predicate" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="predicate" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, das bestimmt, ob das angegebene Prädikat für alle Elemente des Eingabesets gültig ist.</summary>
      <returns>Ein neues DbQuantifierExpression, das den All-Vorgang darstellt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="predicate">Ein Ausdruck, der ein Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="predicate" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />, das den logischen And-Vorgang für das linke und das rechte Argument ausführt.</summary>
      <returns>Ein neues DbAndExpression mit den angegebenen Argumenten.</returns>
      <param name="left">Ein boolescher Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein boolescher Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> oder <paramref name="right" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das bestimmt, ob das angegebene Mengenargument nicht leer ist.</summary>
      <returns>Ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, angewendet auf ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> mit dem angegebenen Argument.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, das bestimmt, ob das angegebene Prädikat für eines der Elemente des Eingabesets gültig ist.</summary>
      <returns> Ein neues DbQuantifierExpression, das den Any-Vorgang darstellt. </returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="predicate">Eine Methode, die das Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Prädikatlogik bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="predicate" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="predicate" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, das bestimmt, ob das angegebene Prädikat für eines der Elemente des Eingabesets gültig ist.</summary>
      <returns>Ein neues DbQuantifierExpression, das den Any-Vorgang darstellt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="predicate">Ein Ausdruck, der ein Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>Gibt die angegebenen Argumente als Schlüssel-Wert-Paar-Objekt zurück.</summary>
      <returns>Ein Schlüssel-Wert-Paar-Objekt.</returns>
      <param name="value">Der Wert im Schlüssel-Wert-Paar.</param>
      <param name="alias">Der Schlüssel im Schlüssel-Wert-Paar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Gibt die angegebenen Argumente als Schlüssel-Wert-Paar-Objekt zurück.</summary>
      <returns>Ein Schlüssel-Wert-Paar-Objekt.</returns>
      <param name="value">Der Wert im Schlüssel-Wert-Paar.</param>
      <param name="alias">Der Schlüssel im Schlüssel-Wert-Paar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, die den angegebene Ausdruck mithilfe eines generierten Variablennamens bindet.</summary>
      <returns>Eine neue Ausdrucksbindung mit dem angegebenen Ausdruck und einem generierten Variablennamen.</returns>
      <param name="input">Der zu bindende Ausdruck.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, die den angegebenen Ausdruck mithilfe eines angegebenen Variablennamens bindet.</summary>
      <returns>Eine neue Ausdrucksbindung mit dem angegebenen Ausdruck und dem Variablennamen.</returns>
      <param name="input">Der zu bindende Ausdruck.</param>
      <param name="varName">Der Variablenname, der für die Bindung verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="varName" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Ein neues DbCaseExpression mit den angegebenen Fällen und dem standardmäßigen Ergebnis.</returns>
      <param name="whenExpressions">Eine Liste von Ausdrücken, die die einzelnen case-Bedingungen bereitstellen.</param>
      <param name="thenExpressions">Eine Liste von Ausdrücken, die die Ergebnisse der einzelnen case-Bedingungen bereitstellen.</param>
      <param name="elseExpression">Ein Ausdruck, der das Ergebnis definiert, wenn keine case-Bedingung erfüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> oder <paramref name="thenExpressions" /> ist Null bzw. enthält Null, oder <paramref name="elseExpression" /> ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> oder <paramref name="thenExpressions" /> ist leer, oder <paramref name="whenExpressions" /> enthält einen Ausdruck mit einem nicht booleschen Ergebnistyp, oder es ist kein gemeinsamer Ergebnistyp für alle Ausdrücke in <paramref name="thenExpressions" /> und <paramref name="elseExpression" /> vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />, das einen Umwandlungsvorgang auf ein polymorphes Argument anwendet.</summary>
      <returns>Ein neues DbCastExpression mit dem angegebenen Argument und dem Zieltyp.</returns>
      <param name="argument">Das Argument, das umgewandelt werden soll.</param>
      <param name="toType">Die Typmetadaten, die den umzuwandelnden Typ angeben.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="toType" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die angegebene Umwandlung ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> vom angegebenen primitiven Typ mit dem angegebenen konstanten Wert.</summary>
      <returns>Ein neuer DbConstantExpression mit dem angegebenen Wert und einem Ergebnistyp von <paramref name="constantType" />.</returns>
      <param name="constantType">Der Typ des konstanten Werts.</param>
      <param name="value">Der darzustellende konstante Wert.</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist keine Instanz eines gültigen konstanten Typs, <paramref name="constantType" /> stellt keinen primitiven Typ dar, oder <paramref name="value" /> hat einen anderen primitiven Typ als den durch <paramref name="constantType" /> dargestellten.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> mit dem angegebenen konstanten Wert.</summary>
      <returns>Ein neues DbConstantExpression mit dem angegebenen Wert.</returns>
      <param name="value">Der darzustellende konstante Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist keine Instanz eines gültigen konstanten Typs.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität auf der Grundlage der Schlüsselwerte codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="keyValues">Eine Auflistung von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s, die die Schlüsselwerte angeben.Diese Ausdrücke müssen (hinsichtlich Anzahl, Typ und Reihenfolge) mit den Schlüsseleigenschaften des Entitätstyps übereinstimmen, auf den verwiesen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> ist Null, oder <paramref name="keyValues" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="keyValues" /> entspricht nicht der Anzahl von Hauptmembern, die vom Elementtyp von <paramref name="entitySet" /> deklariert wurde, oder <paramref name="keyValues" /> enthält einen Ausdruck mit einem Ergebnistyp, der mit dem Typ des entsprechenden Hauptmembers nicht kompatibel ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität auf der Grundlage der Schlüsselwerte codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="keyValues">Eine Auflistung von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s, die die Schlüsselwerte angeben.Diese Ausdrücke müssen (hinsichtlich Anzahl, Typ und Reihenfolge) mit den Schlüsseleigenschaften des Entitätstyps übereinstimmen, auf den verwiesen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> ist Null, oder <paramref name="keyValues" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="keyValues" /> entspricht nicht der Anzahl von Hauptmembern, die vom Elementtyp von <paramref name="entitySet" /> deklariert wurde, oder <paramref name="keyValues" /> enthält einen Ausdruck mit einem Ergebnistyp, der mit dem Typ des entsprechenden Hauptmembers nicht kompatibel ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität eines angegebenen Typs auf Grundlage von Schlüsselwerten codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="entityType">Der spezifische Typ der Entität, auf die verwiesen wird.Dies muss ein Entitätstyp aus der gleichen Hierarchie wie der Elementtyp der Entitätenmenge sein.</param>
      <param name="keyValues">Eine Auflistung von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s, die die Schlüsselwerte angeben.Diese Ausdrücke müssen (hinsichtlich Anzahl, Typ und Reihenfolge) mit den Schlüsseleigenschaften des Entitätstyps übereinstimmen, auf den verwiesen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> oder <paramref name="entityType" /> ist Null, oder <paramref name="keyValues" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> stammt nicht aus derselben Hierarchie (Untertyp, Übertyp oder gleicher Typ) wie der Elementtyp von <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="keyValues" /> entspricht nicht der Anzahl von Hauptmembern, die vom Elementtyp von <paramref name="entitySet" /> deklariert wurde, oder <paramref name="keyValues" /> enthält einen Ausdruck mit einem Ergebnistyp, der mit dem Typ des entsprechenden Hauptmembers nicht kompatibel ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität eines angegebenen Typs auf Grundlage von Schlüsselwerten codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="entityType">Der spezifische Typ der Entität, auf die verwiesen wird.Dies muss ein Entitätstyp aus der gleichen Hierarchie wie der Elementtyp der Entitätenmenge sein.</param>
      <param name="keyValues">Eine Auflistung von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s, die die Schlüsselwerte angeben.Diese Ausdrücke müssen (hinsichtlich Anzahl, Typ und Reihenfolge) mit den Schlüsseleigenschaften des Entitätstyps übereinstimmen, auf den verwiesen wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> oder <paramref name="entityType" /> ist Null, oder <paramref name="keyValues" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> stammt nicht aus derselben Typhierarchie (Untertyp, Übertyp oder gleicher Typ) wie der Elementtyp von <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="keyValues" /> entspricht nicht der Anzahl von Hauptmembern, die vom Elementtyp von <paramref name="entitySet" /> deklariert wurde, oder <paramref name="keyValues" /> enthält einen Ausdruck mit einem Ergebnistyp, der mit dem Typ des entsprechenden Hauptmembers nicht kompatibel ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> als leere Menge ausgewertet wird, werden nicht eingeschlossen.</summary>
      <returns>Ein neues DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen und ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von CrossApply.</returns>
      <param name="source">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das Eingabeset angibt. </param>
      <param name="apply">Eine Methode, die die Logik angibt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="apply" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ergebnis von <paramref name="apply" /> enthält einen Namen oder Ausdruck, der Null ist.</exception>
      <exception cref="T:System.ArgumentException">Das Ergebnis von <paramref name="apply" /> enthält einen Namen oder Ausdruck, der in einer Ausdrucksbindung ungültig ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> als leere Menge ausgewertet wird, werden nicht eingeschlossen.</summary>
      <returns>Ein neuer DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen und ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von CrossApply.</returns>
      <param name="input">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das Eingabeset angibt.</param>
      <param name="apply">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, die die Logik angibt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="apply" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />, das die in der Liste der Eingabeausdrucksbindungen angegebenen Sets bedingungslos verknüpft.</summary>
      <returns>Ein neues DbCrossJoinExpression, mit einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von CrossJoin, das den unbedingten Join der Eingabesätze darstellt.</returns>
      <param name="inputs">Eine Liste von Ausdrucksbindungen, die die Eingabesets angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> ist Null oder enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> enthält weniger als zwei Ausdrucksbindungen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />, der eine bestimmte Entität abruft, wenn ein Verweisausdruck angegeben wird.</summary>
      <returns>Ein neuer DbDerefExpression, der die angegebene Entität abruft.</returns>
      <param name="argument">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das den Verweis bereitstellt.Dieser Ausdruck muss einen Verweistyp aufweisen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Verweisergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />, das Duplikate aus dem angegebenen Mengenargument entfernt.</summary>
      <returns>Ein neues DbDistinctExpression, das den bestimmten Vorgang darstellt, der auf das angegebene Mengenargument angewendet wurde.</returns>
      <param name="argument">Ein Ausdruck, der die Menge definiert, über der die eindeutige Operation ausgeführt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Verweisergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das das linke Argument durch das rechte Argument dividiert.</summary>
      <returns>Ein neues DbArithmeticExpression, das die Division darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein gemeinsamer numerischer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />, das eine Menge in ein Singleton konvertiert.</summary>
      <returns>Ein DbElementExpression, das die Konvertierung des angegebenen Mengenarguments in ein Singleton darstellt.</returns>
      <param name="argument">Ein Ausdruck, der das Eingabeset angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Verweisergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das das linke und das rechte Argument auf Gleichheit vergleicht.</summary>
      <returns>Ein neues DbComparisonExpression, das den Gleichheitsvergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein gemeinsamer numerischer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />, das das rechte Mengenargument vom linken Mengenargument subtrahiert.</summary>
      <returns>Ein neues DbExceptExpression, das den Unterschied zwischen dem linken und dem rechten Argument darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Mengenargument definiert.</param>
      <param name="right">Ein Ausdruck, der das rechte Mengenargument definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein gemeinsamer numerischer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das bestimmt, ob das angegebene Mengenargument nicht leer ist.</summary>
      <returns>Ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, angewendet auf ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> mit dem angegebenen Argument.</returns>
      <param name="argument">Ein Ausdruck, der das Eingabeset angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> mit dem booleschen Wert false.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> mit dem booleschen Wert false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, das die Elemente im angegebenen Eingabeset mithilfe des angegebenen Prädikats filtert.</summary>
      <returns>Ein neues DbFilterExpression, das die gefilterte Menge erzeugt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="predicate">Ein Ausdruck, der ein Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, der die vom linken und vom rechten Ausdruck in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem FullOuterJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von FullOuterJoin, der den Vorgang des vollständigen äußeren Join darstellt, der auf den linken und rechten Eingabesets in der angegebenen Joinbedingung angewendet wurde. </returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Eine Methode, die die Bedingung für den Join darstellt.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Logik der Joinbedingung bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> oder <paramref name="right" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="joinCondition" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="joinCondition" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, das die von der linken und der rechten Ausdrucksbindung in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem FullOuterJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von FullOuterJoin, der den Vorgang des vollständigen äußeren Join darstellt, der auf den linken und rechten Eingabesets in der angegebenen Joinbedingung angewendet wurde.</returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Ein Ausdruck, der die Bedingung für den Join angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />, der den Verweis der angegebenen Entität in struktureller Form abruft.</summary>
      <returns>Ein neues DbEntityRefExpression, das einen Verweis auf die angegebene Entität abruft.</returns>
      <param name="argument">Der Ausdruck, der die Entität bereitstellt.Dieser Ausdruck muss einen Entitätsergebnistyp aufweisen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Entitätsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />, der die Schlüsselwerte des angegebenen Verweises in struktureller Form abruft.</summary>
      <returns>Ein neues DbRefKeyExpression, das die Schlüsselwerte des angegebenen Verweises abruft.</returns>
      <param name="argument">Der Ausdruck, der den Verweis bereitstellt.Dieser Ausdruck muss einen Verweistyp mit einem Entitätselementtyp aufweisen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Entitätsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das bestimmt, ob das linke Argument größer als das rechte Argument ist.</summary>
      <returns>Ein neues DbComparisonExpression, das den Größer-als-Vergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das bestimmt, ob das linke Argument größer oder gleich dem rechten Argument ist.</summary>
      <returns>Ein neues DbComparisonExpression, das den Größer-als-oder-gleich-Vergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">"left" oder "right" ist Null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen links und rechts ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> über dem angegebenen Argument.</summary>
      <returns>Ein neues Gruppenaggregat, das die Mitglieder der Gruppe darstellt, auf die vom angegebenen Argument verwiesen wird.</returns>
      <param name="argument">Das Argument, über dem der Schachtelvorgang ausgeführt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue Gruppenausdrucksbindung, die den angegebenen Ausdruck mithilfe generierter Variablen- und Gruppenvariablennamen bindet.</summary>
      <returns>Eine neue Gruppenausdrucksbindung mit dem angegebenen Ausdruck und einem generierten Variablennamen und Gruppenvariablennamen.</returns>
      <param name="input">Der zu bindende Ausdruck.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />, die den angegebenen Ausdruck mithilfe des angegebenen Variablennamens und der angegebenen Gruppenvariablennamen bindet.</summary>
      <returns>Eine neue Gruppenausdrucksbindung mit dem angegebenen Ausdruck, mit dem Variablennamen und dem Gruppenvariablennamen.</returns>
      <param name="input">Der zu bindende Ausdruck.</param>
      <param name="varName">Der Variablenname, der für die Bindung verwendet werden soll.</param>
      <param name="groupVarName">Der Variablenname, der als Verweis auf die Gruppe verwendet werden soll, wenn die neue Gruppenausdrucksbindung in einem group-by-Ausdruck verwendet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="varName" /> oder <paramref name="groupVarName" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />, das die Elemente des Eingabesets nach den angegebenen Gruppenschlüsseln gruppiert und die angegebenen Aggregate anwendet.</summary>
      <returns>Ein neues DbGroupByExpression mit angegebenem Eingabeset, Gruppierungsschlüsseln und Aggregaten.</returns>
      <param name="input">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />, das das Eingabeset angibt.</param>
      <param name="keys">Eine Liste von Zeichenfolge-Ausdruck-Paaren, die die Gruppierungsspalten definieren.</param>
      <param name="aggregates">Eine Liste von Ausdrücken, die anzuwendende Aggregate angeben.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> oder <paramref name="aggregates" /> ist Null, <paramref name="keys" /> enthält einen NULL-Schlüsselspaltennamen oder -Ausdruck, oder "aggregates" enthält einen aggregierten NULL-Spaltennamen oder <paramref name="aggregate" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> und auch <paramref name="aggregates" /> sind leer, oder ein ungültiger oder doppelter Spaltenname wurde angegeben.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />, der das Ergebnis des angegebenen Ausdrucks mit den Ergebnissen der konstanten Ausdrücke in der angegebenen Liste abgleicht.</summary>
      <returns>Ein neuer DbInExpression mit den angegebenen Argumenten, wenn die DbConstantExpression-Liste nicht leer ist; andernfalls ein falscher konstanter Ausdruck.</returns>
      <param name="expression">Ein abzugleichendes DbExpression.</param>
      <param name="list">Eine Liste der DbConstantExpression, um sie auf eine Übereinstimmung zu prüfen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="list" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der Ergebnistyp von <paramref name="expression" /> unterscheidet sich vom Ergebnistyp eines Ausdrucks aus <paramref name="list" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, der die vom linken und vom rechten Ausdruck in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem InnerJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von InnerJoin, der den Vorgang des vollständigen äußeren Join darstellt, der auf den linken und rechten Eingabesets unter der angegebenen Joinbedingung angewendet wurde.</returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Eine Methode, die die Bedingung für den Join darstellt.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Logik der Joinbedingung bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> oder <paramref name="right" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="joinCondition" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="joinCondition" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, der die vom linken und vom rechten Ausdruck in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem InnerJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von InnerJoin, der den Vorgang des vollständigen äußeren Join darstellt, der auf den linken und rechten Eingabesets unter der angegebenen Joinbedingung angewendet wurde.</returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Ein Ausdruck, der die Bedingung für den Join angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />, das die Schnittmenge der linken und der rechten Mengenargumente berechnet.</summary>
      <returns>Ein neues DbIntersectExpression, das die Schnittmenge der linken und der rechten Argumente berechnet.</returns>
      <param name="left">Ein Ausdruck, der das linke Mengenargument definiert.</param>
      <param name="right">Ein Ausdruck, der das rechte Mengenargument definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder "right" ist <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner Auflistungsergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />, das die Anwendung der angegebenen Lambda-Funktion auf die angegebenen Argumente darstellt.</summary>
      <returns>Ein neues DbLambdaExpression, das die Lambda-Funktionsanwendung darstellt.</returns>
      <param name="lambda">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />-Instanz, die die anzuwendende Lambda-Funktion darstellt.</param>
      <param name="arguments">Eine Liste von Ausdrücken, die die Argumente bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> ist Null, oder <paramref name="arguments" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="arguments" /> entspricht nicht der Anzahl von Variablen, die von <paramref name="lambda" /> deklariert wurde, oder <paramref name="arguments" /> enthält einen Ausdruck mit einem Ergebnistyp, der nicht gleich dem entsprechenden Variablentyp ist und auch nicht entsprechend heraufgestuft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />, das die Anwendung der angegebenen Lambda-Funktion auf die angegebenen Argumente darstellt.</summary>
      <returns>Ein neues DbLambdaExpression, das die Lambda-Funktionsanwendung darstellt.</returns>
      <param name="lambda">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />-Instanz, die die anzuwendende Lambda-Funktion darstellt.</param>
      <param name="arguments">Ausdrücke, die die Argumente bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> ist Null, oder <paramref name="arguments" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="arguments" /> entspricht nicht der Anzahl von Variablen, die von <paramref name="lambda" /> deklariert wurde, oder <paramref name="arguments" /> enthält einen Ausdruck mit einem Ergebnistyp, der nicht gleich dem entsprechenden Variablentyp ist und auch nicht entsprechend heraufgestuft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das den Aufruf der angegebenen Funktion mit den angegebenen Argumenten darstellt.</summary>
      <returns>Ein neues DbFunctionExpression, das den Aufruf der Funktion darstellt.</returns>
      <param name="function">Metadaten für die aufzurufende Funktion.</param>
      <param name="arguments">Eine Liste von Ausdrücken, die die Argumente für die Funktion bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> ist Null, oder <paramref name="arguments" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="arguments" /> entspricht nicht der Anzahl von Variablen, die von <paramref name="function" /> deklariert wurde, oder <paramref name="arguments" /> enthält einen Ausdruck mit einem Ergebnistyp, der nicht gleich dem entsprechenden Variablentyp ist und auch nicht entsprechend heraufgestuft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das den Aufruf der angegebenen Funktion mit den angegebenen Argumenten darstellt.</summary>
      <returns>Ein neues DbFunctionExpression, das den Aufruf der Funktion darstellt.</returns>
      <param name="function">Metadaten für die aufzurufende Funktion.</param>
      <param name="arguments">Ausdrücke, die die Argumente für die Funktion bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> ist Null, oder <paramref name="arguments" /> ist Null bzw. enthält Null.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von <paramref name="arguments" /> entspricht nicht der Anzahl von Variablen, die von <paramref name="function" /> deklariert wurde, oder <paramref name="arguments" /> enthält einen Ausdruck mit einem Ergebnistyp, der nicht gleich dem entsprechenden Variablentyp ist und auch nicht entsprechend heraufgestuft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />, das bestimmt, ob das angegebene Mengenargument eine leere Menge ist.</summary>
      <returns>Ein neues DbIsEmptyExpression mit dem angegebenen Argument.</returns>
      <param name="argument">Ein Ausdruck, der das Eingabeset angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist keinen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />, das bestimmt, ob das angegebene Argument null ist.</summary>
      <returns>Ein neues DbIsNullExpression mit dem angegebenen Argument.</returns>
      <param name="argument">Ein Ausdruck, der das Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> weist einen Auflistungsergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />, das bestimmt, ob das angegebene Argument vom angegebenen Typ oder einem Untertyp ist.</summary>
      <returns>Ein neues DbIsOfExpression mit der angegebenen Instanz und dem Typ und DbExpressionKind IsOf.</returns>
      <param name="argument">Ein Ausdruck, der die Instanz angibt.</param>
      <param name="type">Typmetadaten, die den Typ angeben, mit denen der Ergebnistyp der Instanz verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> befindet sich nicht in der gleichen Typenhierarchie wie der Ergebnistyp von <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />-Ausdruck, der bestimmt, ob das angegebene Argument vom angegebenen Typ und ausschließlich von diesem Typ (kein Untertyp) ist.</summary>
      <returns>Ein neues DbIsOfExpression mit der angegebenen Instanz und dem Typ und DbExpressionKind IsOfOnly.</returns>
      <param name="argument">Ein Ausdruck, der die Instanz angibt.</param>
      <param name="type">Typmetadaten, die den Typ angeben, mit denen der Ergebnistyp der Instanz verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> befindet sich nicht in der gleichen Typenhierarchie wie der Ergebnistyp von <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, das die vom äußeren und inneren Ausdruck angegebenen Mengen in einer Gleichheitsbedingung zwischen dem festgelegten äußeren und inneren Schlüssel verknüpft, indem InnerJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von InnerJoin, der den Vorgang des inneren Join darstellt, der auf die linken und rechten Eingabesets angewendet werden, unter einer Joinbedingung, die die äußeren und inneren Schlüsselwerte auf Gleichheit überprüft.</returns>
      <param name="outer">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das äußere Mengenargument angibt.</param>
      <param name="inner">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das innere Mengenargument angibt.</param>
      <param name="outerKey">Eine Methode, die angibt, wie der Wert des äußeren Schlüssels von einem Element der äußeren Menge abgeleitet werden soll.</param>
      <param name="innerKey">Eine Methode, die angibt, wie der Wert des inneren Schlüssels von einem Element der inneren Menge abgeleitet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> oder <paramref name="innerKey" /> ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> oder <paramref name="innerKey" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="outerKey" /> oder <paramref name="innerKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="outerKey" /> oder <paramref name="innerKey" /> erzeugt wurde, ist nicht anhand von Gleichheit vergleichbar.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, der die angegebene Auswahl über den vom äußeren und inneren Ausdruck angegebenen Mengen projiziert, die in einer Gleichheitsbedingung zwischen dem angegebenen äußeren und inneren Schlüssel verknüpft werden. Dabei wird InnerJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet.</summary>
      <returns>Ein neues DbProjectExpression mit dem angegebenen Selektor als seiner Projektion und ein neues DbJoinExpression als Eingabe.Der Eingabe-DbJoinExpression wird mit einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von InnerJoin erstellt, der den Vorgang des inneren Join auf die linken und rechten Eingabesets angewendet darstellt, unter einer Joinbedingung, die die äußeren und inneren Schlüsselwerte auf Gleichheit überprüft.</returns>
      <param name="outer">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das äußere Mengenargument angibt.</param>
      <param name="inner">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das innere Mengenargument angibt.</param>
      <param name="outerKey">Eine Methode, die angibt, wie der Wert des äußeren Schlüssels von einem Element der äußeren Menge abgeleitet werden soll.</param>
      <param name="innerKey">Eine Methode, die angibt, wie der Wert des inneren Schlüssels von einem Element der inneren Menge abgeleitet werden soll.</param>
      <param name="selector">Eine Methode, die angibt, wie ein Element des Resultsets von Elementen der inneren und äußeren Menge abgeleitet werden soll.Diese Methode muss eine Instanz eines Typs erzeugen, der mit Join kompatibel ist und in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> aufgelöst werden kann.Kompatibilitätsanforderungen für <paramref name="TSelector" /> werden in den Hinweisen erläutert.</param>
      <typeparam name="TSelector">Der Typ des Selektors.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> oder <paramref name="selector" /> ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> oder <paramref name="inner" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="outerKey" /> oder <paramref name="innerKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ergebnis von <paramref name="selector" /> nach Umwandlung in DbExpression ist Null.</exception>
      <exception cref="T:System.ArgumentException">Die Ausdrücke, die von <paramref name="outerKey" /> und <paramref name="innerKey" /> erzeugt wurden, sind hinsichtlich Gleichheit nicht kompatibel.</exception>
      <exception cref="T:System.ArgumentException">Das Ergebnis von <paramref name="selector" /> ist nicht mit SelectMany kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> mit der angegebenen Inlineimplementierung der Lambdafunktion und den formalen Parametern.</summary>
      <returns>Ein neues DbLambda, das eine Inlinelambdafunktion mit dem angegebenen Text und den formalen Parametern beschreibt.</returns>
      <param name="body">Ein Ausdruck, der die Logik der Lambda-Funktion definiert.</param>
      <param name="variables">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />-Sammlung, die die formalen Parameter der Lambdafunktion darstellt.Die Verwendung dieser Variablen im <paramref name="body" />-Ausdruck ist zulässig.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> ist NULL oder enthält NULL, oder <paramref name="body" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> enthält mindestens ein Element mit dem gleichen Variablennamen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> mit der angegebenen Inlineimplementierung der Lambdafunktion und den formalen Parametern.</summary>
      <returns>Ein neues DbLambda, das eine Inlinelambdafunktion mit dem angegebenen Text und den formalen Parametern beschreibt.</returns>
      <param name="body">Ein Ausdruck, der die Logik der Lambda-Funktion definiert.</param>
      <param name="variables">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />-Sammlung, die die formalen Parameter der Lambdafunktion darstellt.Die Verwendung dieser Variablen im body-Ausdruck ist zulässig.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> ist NULL oder enthält NULL, oder <paramref name="body" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> enthält mindestens ein Element mit dem gleichen Variablennamen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, der die vom linken und vom rechten Ausdruck in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem LeftOuterJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von LeftOuterJoin, der den Vorgang des linken äußeren Join darstellt, der auf den linken und rechten Eingabesets in der angegebenen Joinbedingung angewendet wurde.</returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Eine Methode, die die Bedingung für den Join darstellt.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Logik der Joinbedingung bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> oder <paramref name="right" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="joinCondition" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="joinCondition" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, der die von der linken und der rechten Ausdrucksbindung in der angegebenen Joinbedingung festgelegten Mengen verknüpft, indem LeftOuterJoin als <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> verwendet wird.</summary>
      <returns>Ein neues DbJoinExpression, mit <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von LeftOuterJoin, der den Vorgang des linken äußeren Join darstellt, der auf den linken und rechten Eingabesets in der angegebenen Joinbedingung angewendet wurde.</returns>
      <param name="left">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das linke Mengenargument angibt.</param>
      <param name="right">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das rechte Mengenargument angibt.</param>
      <param name="joinCondition">Ein Ausdruck, der die Bedingung für den Join angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> oder <paramref name="joinCondition" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das bestimmt, ob das linke Argument kleiner als das rechte Argument ist.</summary>
      <returns>Ein neues DbComparisonExpression, das den Kleiner-als-Vergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das bestimmt, ob das linke Argument kleiner oder gleich dem rechten Argument ist.</summary>
      <returns>Ein neues DbComparisonExpression, das den Kleiner-als-oder-gleich-Vergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />, das die angegebene Eingabezeichenfolge mit dem angegebenen Muster vergleicht.</summary>
      <returns>Ein neues DbLikeExpression mit der angegebenen Eingabe, dem Muster und einem Escapezeichen null.</returns>
      <param name="argument">Ein Ausdruck, der die Eingabezeichenfolge angibt.</param>
      <param name="pattern">Ein Ausdruck, der die Musterzeichenfolge angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="pattern" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> oder <paramref name="pattern" /> weist keinen Zeichenfolgenergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />, das mithilfe der optionalen Escapezeichenfolge die angegebene Eingabezeichenfolge mit dem angegebenen Muster vergleicht.</summary>
      <returns>Ein neues DbLikeExpression mit der angegebenen Eingabe, dem Muster und Escapezeichen.</returns>
      <param name="argument">Ein Ausdruck, der die Eingabezeichenfolge angibt.</param>
      <param name="pattern">Ein Ausdruck, der die Musterzeichenfolge angibt.</param>
      <param name="escape">Ein optionaler Ausdruck, der die Escapezeichenfolge angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> oder "escape" ist <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />, <paramref name="pattern" /> oder "escape" weist keinen Zeichenfolgenergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />, das die Anzahl der Elemente in der Argumentauflistung auf den angegebenen Zählgrenzwert beschränkt.Verknüpfte Ergebnisse sind nicht in der Ausgabe enthalten.</summary>
      <returns>Ein neues DbLimitExpression mit den angegebenen Argument- und Zählgrenzwerten, das verknüpfte Ergebnisse nicht einschließt.</returns>
      <param name="argument">Ein Ausdruck, der die Eingabeauflistung angibt.</param>
      <param name="count">Ein Ausdruck, der den Grenzwert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="count" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> hat keinen Auflistungsergebnistyp, oder <paramref name="count" /> hat keinen Ergebnistyp, der gleich einem 64-Bit-Ganzzahl-Typ oder zu einem solchen heraufstufbar ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das das rechte Argument vom linken Argument subtrahiert.</summary>
      <returns>Ein neues DbArithmeticExpression, das den Subtraktionsvorgang darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das den Rest der Division des linken Arguments durch das rechte Argument berechnet.</summary>
      <returns>Ein neues DbArithmeticExpression, das den Modulovorgang darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das das linke Argument mit dem rechten Argument multipliziert.</summary>
      <returns>Ein neues DbArithmeticExpression, das die Multiplikation darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Reihenfolge vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />, das die Navigation einer Zusammensetzungs- oder Zuordnungsbeziehung darstellt.</summary>
      <returns>Ein neues DbRelationshipNavigationExpression, das die Navigation der angegebenen Von-und-Zu-Beziehungsenden des angegebenen Beziehungstyps aus der angegebenen Navigationsquell-Instanz darstellt.</returns>
      <param name="navigateFrom">Ein Ausdruck, der die Instanz angibt, von der die Navigation erfolgen soll.</param>
      <param name="fromEnd">Metadaten für die Eigenschaft, die das Ende der Beziehung darstellt, von der die Navigation erfolgen soll.</param>
      <param name="toEnd">Metadaten für die Eigenschaft, die das Ende der Beziehung darstellt, zu der die Navigation erfolgen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />, <paramref name="toEnd" /> oder <paramref name="NavigateForm" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> und <paramref name="toEnd" /> werden nicht vom gleichen Beziehungstyp deklariert, oder <paramref name="navigateFrom" /> hat einen Ergebnistyp, der mit dem Eigenschaftentyp von <paramref name="fromEnd" /> nicht kompatibel ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />, das die Navigation einer Zusammensetzungs- oder Zuordnungsbeziehung darstellt.</summary>
      <returns>Ein neues DbRelationshipNavigationExpression, das die Navigation der angegebenen Von-und-Zu-Beziehungsenden des angegebenen Beziehungstyps aus der angegebenen Navigationsquell-Instanz darstellt.</returns>
      <param name="type">Metadaten für den Beziehungstyp, der die Beziehung darstellt.</param>
      <param name="fromEndName">Der Name der Eigenschaft des Beziehungstyps, der das Ende der Beziehung darstellt, von der aus die Navigation erfolgen soll.</param>
      <param name="toEndName">Der Name der Eigenschaft des Beziehungstyps, der das Ende der Beziehung darstellt, zu der aus die Navigation erfolgen soll.</param>
      <param name="navigateFrom">Ein Ausdruck, der die Instanz angibt, von der die Navigation erfolgen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />, <paramref name="toEndName" /> oder <paramref name="NavigateForm" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> ist dem Metadatenarbeitsbereich dieser Befehlsstruktur nicht zugeordnet, oder <paramref name="navigateFrom" /> ist einer anderen Befehlsstruktur zugeordnet, oder <paramref name="type" /> deklariert keine Beziehungsendeigenschaft mit dem Namen <paramref name="toEndName" /> oder <paramref name="fromEndName" />, oder <paramref name="navigateFrom" /> weist einen Ergebnistyp auf, der nicht kompatibel mit dem <paramref name="fromEndName" /> ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das den Wert des Arguments negiert.</summary>
      <returns>Ein neues DbArithmeticExpression, das den Negationsvorgang darstellt.</returns>
      <param name="argument">Ein Ausdruck, der das Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Kein numerischer Ergebnistyp für <paramref name="argument" /> vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Wenn das Typargument ein Auflistungstyp ist, geben die Argumente die Elemente der Auflistung an.Andernfalls werden die Argumente als Eigenschafts- oder Spaltenwerte in der neuen Instanz verwendet.</summary>
      <returns>Ein neues DbNewInstanceExpression mit dem angegebenen Typ und den Argumenten.</returns>
      <param name="instanceType">Der Typ der neuen Instanz.</param>
      <param name="arguments">Ausdrücke, die Werte der neuen Instanzen angeben, interpretiert gemäß dem Typ der Instanz.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> oder <paramref name="arguments" /> ist Null, oder <paramref name="arguments" /> enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> ist leer, oder die Ergebnistypen der enthaltenen Ausdrücke stimmen nicht mit den Anforderungen von <paramref name="instanceType" /> überein (wie unten im Abschnitt "Hinweise" erläutert).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Wenn das Typargument ein Auflistungstyp ist, geben die Argumente die Elemente der Auflistung an.Andernfalls werden die Argumente als Eigenschafts- oder Spaltenwerte in der neuen Instanz verwendet.</summary>
      <returns>Ein neues DbNewInstanceExpression mit dem angegebenen Typ und den Argumenten.</returns>
      <param name="instanceType">Der Typ der neuen Instanz.</param>
      <param name="arguments">Ausdrücke, die Werte der neuen Instanzen angeben, interpretiert gemäß dem Typ der Instanz.</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> oder <paramref name="arguments" /> ist Null, oder <paramref name="arguments" /> enthält Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, das eine Auflistung mit den angegebenen Elementen erstellt.Der Typ der Auflistung basiert auf dem gemeinsamen Typ der Elemente.Wenn kein gemeinsamer Elementtyp vorhanden ist, wird eine Ausnahme ausgelöst.</summary>
      <returns>Ein neues DbNewInstanceExpression mit dem angegebenen Auflistungstyp und den Argumenten.</returns>
      <param name="elements">Eine Liste von Ausdrücken, die die Elemente der Auflistung bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> ist Null oder enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> ist leer oder enthält Ausdrücke, für die kein gemeinsamer Ergebnistyp vorhanden ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, das eine Auflistung mit den angegebenen Elementen erstellt.Der Typ der Auflistung basiert auf dem gemeinsamen Typ der Elemente.Wenn kein gemeinsamer Elementtyp vorhanden ist, wird eine Ausnahme ausgelöst.</summary>
      <returns>Ein neues DbNewInstanceExpression mit dem angegebenen Auflistungstyp und den Argumenten.</returns>
      <param name="elements">Eine Liste von Ausdrücken, die die Elemente der Auflistung bereitstellen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> ist Null oder enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> ist leer oder enthält Ausdrücke, für die kein gemeinsamer Ergebnistyp vorhanden ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, das eine leere Auflistung vom angegebenen Auflistungstyp erstellt.</summary>
      <returns>Ein neuer DbNewInstanceExpression mit dem angegebenen Auflistungstyp und einer leeren Arguments-Liste.</returns>
      <param name="collectionType">Die Typmetadaten für die zu erstellende Auflistung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> ist kein Auflistungstyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, das eine Zeile mit den angegebenen benannten Spalten und den angegebenen Werten erzeugt, die als Ausdrücke angegeben werden.</summary>
      <returns>Ein neues DbNewInstanceExpression, das die Konstruktion der Zeile darstellt.</returns>
      <param name="columnValues">Eine Liste von Zeichenfolge-DbExpression-Schlüssel-Wert-Paaren, die die Struktur und die Werte der Zeile definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> ist Null oder enthält ein Element mit einem NULL-Spaltennamen oder -Ausdruck.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> ist leer oder enthält einen doppelten oder ungültigen Spaltennamen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, das die logische Negation des angegebenen Arguments ausführt.</summary>
      <returns>Ein neues DbNotExpression mit dem angegebenen Argument.</returns>
      <param name="argument">Ein boolescher Ausdruck, der das Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">"argument" weist keinen booleschen Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, das das linke und das rechte Argument auf Ungleichheit vergleicht.</summary>
      <returns>Ein neues DbComparisonExpression, das den Ungleichheitsvergleich darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner, auf Gleichheit vergleichbarer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, das einen typisierten Nullwert darstellt.</summary>
      <returns>Eine Instanz von DbNullExpression.</returns>
      <param name="nullType">Der Typ des Nullwerts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />, das einen Satz von Elementen des angegebenen Eingabesets erzeugt, die den angegebenen Typ aufweisen.</summary>
      <returns>Ein neuer DbOfTypeExpression mit dem angegebenen Mengenargument und -typ und ein ExpressionKind von <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />.</returns>
      <param name="argument">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das Eingabeset angibt.</param>
      <param name="type">Typmetadaten für den Typ, den Elemente des Eingabesets aufweisen müssen, damit sie in das Resultset eingeschlossen werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> hat keinen Auflistungsergebnistyp, oder <paramref name="type" /> ist kein Typ in der gleichen Typhierarchie wie der Elementtyp des Auflistungsergebnistyps von <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />, das einen Satz von Elementen des angegebenen Eingabesets erzeugt, die genau den angegebenen Typ aufweisen.</summary>
      <returns>Ein neuer DbOfTypeExpression mit dem angegebenen Mengenargument und -typ und ein ExpressionKind von <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />.</returns>
      <param name="argument">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, die das Eingabeset angibt.</param>
      <param name="type">Typmetadaten für den Typ, mit dem Elemente des Eingabesets genau übereinstimmen müssen, damit sie in das Resultset eingeschlossen werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> hat keinen Auflistungsergebnistyp, oder <paramref name="type" /> ist kein Typ in der gleichen Typhierarchie wie der Elementtyp des Auflistungsergebnistyps von <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />, das den logischen Or-Vorgang für das linke und das rechte Argument ausführt. </summary>
      <returns> Ein neues DbOrExpression mit den angegebenen Argumenten. </returns>
      <param name="left"> Ein boolescher Ausdruck, der das linke Argument angibt. </param>
      <param name="right"> Ein boolescher Ausdruck, der das rechte Argument angibt. </param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, das das angegebene Eingabeset in aufsteigender Sortierreihenfolge und mit Standardsortierung nach dem angegebenen Sortierschlüssel sortiert.</summary>
      <returns>Ein neues DbSortExpression, das den order-by-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="sortKey" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, das das angegebene Eingabeset in aufsteigender Sortierreihenfolge und mit der angegebenen Sortierung nach dem angegebenen Sortierschlüssel sortiert.</summary>
      <returns>Ein neues DbSortExpression, das den order-by-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <param name="collation">Die zu verwendende Sortierung</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> oder <paramref name="collation" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, der das angegebene Eingabeset in absteigender Sortierreihenfolge und mit Standardsortierung nach dem angegebenen Sortierschlüssel sortiert.</summary>
      <returns>Ein neues DbSortExpression, das den order-by-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="sortKey" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, der das angegebene Eingabeset in absteigender Sortierreihenfolge und mit Standardsortierung nach dem angegebenen Sortierschlüssel sortiert.</summary>
      <returns>Ein neues DbSortExpression, das den order-by-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <param name="collation">Die zu verwendende Sortierung</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> oder <paramref name="collation" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> zu einem leeren Satz ausgewertet wird, weisen den Anwendungsspaltenwert null auf.</summary>
      <returns>Ein neues DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen und einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von OuterApply.</returns>
      <param name="source">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das Eingabeset angibt.</param>
      <param name="apply">Eine Methode, die die Logik angibt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="apply" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ergebnis von "apply" enthält einen Namen oder Ausdruck, der Null ist.</exception>
      <exception cref="T:System.ArgumentException">Das Ergebnis von "apply" enthält einen Namen oder Ausdruck, der in einer Ausdrucksbindung ungültig ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> zu einem leeren Satz ausgewertet wird, weisen den Anwendungsspaltenwert null auf.</summary>
      <returns>Ein neues DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen und einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von OuterApply.</returns>
      <param name="input">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, das das Eingabeset angibt.</param>
      <param name="apply">Eine <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, die die Logik angibt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="apply" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />, das auf einen Parameter mit dem angegebenen Namen und Typ verweist.</summary>
      <returns>Ein DbParameterReferenceExpression, der einen Verweis auf einen Parameter mit dem angegebenen Namen und Typ darstellt; der Ergebnistyp des Ausdrucks ist derselbe wie <paramref name="type" />.</returns>
      <param name="type">Der Typ des Parameters, auf den verwiesen wird.</param>
      <param name="name">Der Name des Parameters, auf den verwiesen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das dem rechten Argument das linke Argument hinzufügt.</summary>
      <returns>Ein neues DbArithmeticExpression, das die Addition darstellt.</returns>
      <param name="left">Ein Ausdruck, der das linke Argument angibt.</param>
      <param name="right">Ein Ausdruck, der das rechte Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen links und rechts ist kein gemeinsamer numerischer Ergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, das den angegebenen Ausdruck über dem angegebenen Eingabeset projiziert.</summary>
      <returns>Ein neues DbProjectExpression, das den Projektionsvorgang darstellt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="projection">Ein Ausdruck, der über dem Satz projiziert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="projection" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, das das Abrufen der angegebenen Eigenschaft darstellt.</summary>
      <returns>Ein neues DbPropertyExpression, das das Abrufen von Eigenschaften darstellt.</returns>
      <param name="instance">Die Instanz, aus der die Eigenschaft abgerufen werden soll.Kann null sein, wenn die Eigenschaft statisch ist.</param>
      <param name="propertyMetadata">Metadaten für die abzurufende Eigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> ist Null, oder <paramref name="instance" /> ist Null und die Eigenschaft ist nicht statisch.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, das das Abrufen der angegebenen Navigationseigenschaft darstellt.</summary>
      <returns>Ein neues DbPropertyExpression, das das Abrufen von Navigationseigenschaften darstellt.</returns>
      <param name="instance">Die Instanz, aus der die Navigationseigenschaft abgerufen werden soll.</param>
      <param name="navigationProperty">Metadaten für die abzurufende Navigationseigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> ist Null, oder <paramref name="instance" /> ist Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, das das Abrufen des angegebenen Endmembers der Beziehung darstellt.</summary>
      <returns>Ein neues DbPropertyExpression, das das Abrufen des Endmembers der Beziehung darstellt.</returns>
      <param name="instance">Die Instanz, aus der der Endmember der Beziehung abgerufen werden soll.</param>
      <param name="relationshipEnd">Metadaten für den abzurufenden Endmember der Beziehung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> ist Null, oder <paramref name="instance" /> ist Null und die Eigenschaft ist nicht statisch.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, das das Abrufen der Instanzeigenschaft mit dem angegebenen Namen aus der angegebenen Instanz darstellt.</summary>
      <returns>Ein neuer DbPropertyExpression, der das Abrufen von Eigenschaften darstellt.</returns>
      <param name="instance">Die Instanz, aus der die Eigenschaft abgerufen werden soll.</param>
      <param name="propertyName">Der Name der abzurufenden Eigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> ist Null, oder <paramref name="instance" /> ist Null und die Eigenschaft ist nicht statisch.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Keine Eigenschaft mit dem angegebenen Namen wurde von diesem Typ von <paramref name="instance" /> deklariert.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität auf der Grundlage der Schlüsselwerte codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="keyRow">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das einen Datensatz mit Spalten erstellt, deren Anzahl, Typ und Reihenfolge mit den Schlüsseleigenschaften des Entitätstyps, auf den verwiesen wird, übereinstimmen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> oder <paramref name="keyRow" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, das einen Verweis auf eine bestimmte Entität auf der Grundlage der Schlüsselwerte codiert.</summary>
      <returns>Ein neues DbRefExpression, das auf das Element mit den angegebenen Schlüsselwerten in der angegebenen Entitätenmenge verweist.</returns>
      <param name="entitySet">Die Entitätenmenge mit dem Element, auf das verwiesen wird.</param>
      <param name="keyRow">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das einen Datensatz mit Spalten erstellt, deren Anzahl, Typ und Reihenfolge mit den Schlüsseleigenschaften des Entitätstyps, auf den verwiesen wird, übereinstimmen.</param>
      <param name="entityType">Der Typ der Entität, auf die der Verweis zeigen sollte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />, <paramref name="keyRow" /> oder <paramref name="entityType" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> befindet sich nicht in derselben Typhierarchie wie der Entitätstyp des Entitätssatzes, oder <paramref name="keyRow" /> hat keinen Datensatzergebnistyp, der den Schlüsseleigenschaften des Entitätstyps der Entitätenmenge entspricht, auf den verwiesen wird.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />, das auf die angegebene Entitätenmenge oder den angegebenen Beziehungssatz verweist.</summary>
      <returns>Ein neues DbScanExpression auf Grundlage des angegebenen Entitäts- oder Beziehungssatzes.</returns>
      <param name="targetSet">Metadaten für die Entitätenmenge oder den Beziehungssatz, auf die bzw. den verwiesen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, das den angegebenen Ausdruck über dem angegebenen Eingabeset auswählt.</summary>
      <returns> Ein neues DbProjectExpression, das den ausgewählten Vorgang darstellt. </returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="projection">Eine Methode, die angibt, wie der projizierte Ausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss eine Instanz eines Typs erzeugen, der mit Select kompatibel ist und in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> aufgelöst werden kann.Kompatibilitätsanforderungen für <paramref name="TProjection" /> werden in den Hinweisen erläutert.</param>
      <typeparam name="TProjection">Der Methodenergebnistyp von <paramref name="projection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="projection" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ergebnis von <paramref name="projection" /> ist Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> als leere Menge ausgewertet wird, werden nicht eingeschlossen.Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> wird dann erstellt, der den angegebenen <paramref name="selector" /> für jede Zeile auswählt und die Gesamtauflistung der Ergebnisse erzeugt.</summary>
      <returns>Ein neuer DbProjectExpression, der die apply-Spalte (Übernehmen) aus einem neuen DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen sowie einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von CrossApply auswählt.</returns>
      <param name="source">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das Eingabeset angibt.</param>
      <param name="apply">Eine Methode, die die Logik darstellt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="apply" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="apply" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="apply" /> erzeugte Ausdruck weist keinen Auflistungstyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, der den angegebenen <paramref name="apply" />-Ausdruck für jedes Element eines angegebenen Eingabesets einmal auswertet und eine Auflistung von Zeilen mit entsprechenden Eingabe- und Übernahmespalten erzeugt.Zeilen, für die <paramref name="apply" /> als leere Menge ausgewertet wird, werden nicht eingeschlossen.Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> wird dann erstellt, der den angegebenen <paramref name="selector" /> für jede Zeile auswählt und die Gesamtauflistung der Ergebnisse erzeugt.</summary>
      <returns>Ein neuer DbProjectExpression, der das Ergebnis des angegebenen Selektors aus einem neuen DbApplyExpression mit den angegebenen Eingabe- und Übernahmebindungen und einem <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> von CrossApply auswählt.</returns>
      <param name="source">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das das Eingabeset angibt.</param>
      <param name="apply">Eine Methode, die die Logik darstellt, die für jeden Member des Eingabesets einmal ausgewertet wird.</param>
      <param name="selector">Eine Methode, die angibt, wie ein Element des Resultsets bei Angabe eines Elements des Eingabe- und Übernahmesets abgeleitet werden soll.Diese Methode muss eine Instanz eines Typs erzeugen, der mit SelectMany kompatibel ist und in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> aufgelöst werden kann.Kompatibilitätsanforderungen für <paramref name="TSelector" /> werden in den Hinweisen erläutert.</param>
      <typeparam name="TSelector">Der Methodenergebnistyp von <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="apply" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="apply" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentNullException">Das Ergebnis von <paramref name="selector" /> bei Umwandlung in DbExpression ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="apply" /> erzeugte Ausdruck weist keinen Auflistungstyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" />, die das Festlegen einer Eigenschaft auf einen Wert darstellt.</summary>
      <returns>Die neu erstellte Set-Klausel.</returns>
      <param name="property">Die festzulegende Eigenschaft.</param>
      <param name="value">Der Wert, auf den die Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />, das das angegebene Eingabeset nach den angegebenen Sortiervorschriften sortiert, bevor die angegebene Anzahl von Elementen übersprungen wird.</summary>
      <returns>Ein neues DbSkipExpression, das den Vorgang des Überspringens darstellt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="sortOrder">Eine Liste der Sortiervorschriften, die bestimmen, wie die Elemente des Eingabesets sortiert werden sollen.</param>
      <param name="count">Ein Ausdruck, der die Anzahl der zu überspringenden Elemente des geordneten Satzes angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> oder <paramref name="count" /> ist Null, oder <paramref name="sortOrder" /> enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> ist leer, oder <paramref name="count" /> ist nicht <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> oder <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> weist einen Ergebnistyp auf, der nicht gleich einem 64-Bit-Ganzzahl-Typ oder auf diesen heraufstufbar ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />, das die angegebene Anzahl von Elementen aus dem angegebenen sortierten Eingabeset überspringt.</summary>
      <returns>Ein neues DbSkipExpression, das den Vorgang des Überspringens darstellt.</returns>
      <param name="argument">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, das das sortierte Eingabeset angibt.</param>
      <param name="count">Ein Ausdruck, der die Anzahl der zu überspringenden Elemente des geordneten Satzes angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="count" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> ist nicht <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> oder <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> oder weist einen Ergebnistyp auf, der nicht gleich einem 64-Bit-Ganzzahl-Typ oder auf diesen heraufstufbar ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, das das angegebene Eingabeset nach den angegebenen Sortiervorschriften sortiert.</summary>
      <returns>Ein neues DbSortExpression, das den Sortiervorgang darstellt.</returns>
      <param name="input">Eine Ausdrucksbindung, die das Eingabeset angibt.</param>
      <param name="sortOrder">Eine Liste der Sortiervorschriften, die bestimmen, wie die Elemente des Eingabesets sortiert werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="sortOrder" /> ist Null, oder <paramref name="sortOrder" /> enthält Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />, das die Anzahl der Elemente in der Argumentauflistung auf den angegebenen Zählgrenzwert beschränkt.Verknüpfte Ergebnisse sind nicht in der Ausgabe enthalten.</summary>
      <returns>Ein neues DbLimitExpression mit den angegebenen Argument- und Zählgrenzwerten, das verknüpfte Ergebnisse nicht einschließt.</returns>
      <param name="argument">Ein Ausdruck, der die Eingabeauflistung angibt.</param>
      <param name="count">Ein Ausdruck, der den Grenzwert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="count" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> hat keinen Auflistungsergebnistyp, oder <paramref name="count" /> hat keinen Ergebnistyp, der gleich einem 64-Bit-Ganzzahl-Typ oder zu einem solchen heraufstufbar ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> mit einer Sortierreihenfolge, die der Sortierreihenfolge des angegebenen geordneten Eingabesets zusammen mit dem angegebenen Sortierschlüssel in aufsteigender Sortierreihenfolge und der Standardsortierung entspricht.</summary>
      <returns>Ein neues DbSortExpression, das den neuen gesamten order-by-Vorgang darstellt.</returns>
      <param name="source">Eine DbSortExpression, die das geordnete Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der zusätzliche Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="sortKey" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> mit einer Sortierreihenfolge, die der Sortierreihenfolge des angegebenen geordneten Eingabesets zusammen mit dem angegebenen Sortierschlüssel in aufsteigender Sortierreihenfolge und der angegebenen Sortierung entspricht.</summary>
      <returns>Ein neues DbSortExpression, das den neuen gesamten order-by-Vorgang darstellt.</returns>
      <param name="source">Eine DbSortExpression, die das geordnete Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der zusätzliche Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <param name="collation">Die zu verwendende Sortierung</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> oder <paramref name="collation" /> hat den Wert Null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> mit einer Sortierreihenfolge, die der Sortierreihenfolge des angegebenen geordneten Eingabesets zusammen mit dem angegebenen Sortierschlüssel in absteigender Sortierreihenfolge und der Standardsortierung entspricht.</summary>
      <returns>Ein neues DbSortExpression, das den neuen gesamten order-by-Vorgang darstellt.</returns>
      <param name="source">Eine DbSortExpression, die das geordnete Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der zusätzliche Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="sortKey" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Ergebnistyp.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> mit einer Sortierreihenfolge, die der Sortierreihenfolge des angegebenen geordneten Eingabesets zusammen mit dem angegebenen Sortierschlüssel in absteigender Sortierreihenfolge und der angegebenen Sortierung entspricht.</summary>
      <returns>Ein neues DbSortExpression, das den neuen gesamten order-by-Vorgang darstellt.</returns>
      <param name="source">Eine DbSortExpression, die das geordnete Eingabeset angibt.</param>
      <param name="sortKey">Eine Methode, die angibt, wie der zusätzliche Sortierschlüsselausdruck für einen angegebenen Member des Eingabesets abgeleitet wird.Diese Methode muss einen Ausdruck mit einem in der Reihenfolge vergleichbaren Ergebnistyp erzeugen, der die Sortierschlüsseldefinition bereitstellt.</param>
      <param name="collation">Die zu verwendende Sortierung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> oder <paramref name="collation" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> weist keinen Auflistungsergebnistyp auf.</exception>
      <exception cref="T:System.ArgumentException">Der Ausdruck, der von <paramref name="sortKey" /> erzeugt wurde, hat keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> mit aufsteigender Sortierreihenfolge und Standardsortierung.</summary>
      <returns>Eine neue Sortierungsklausel mit dem angegebenen Sortierschlüssel und aufsteigender Sortierreihenfolge.</returns>
      <param name="key">Der Ausdruck, der den Sortierschlüssel definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> weist keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> mit aufsteigender Sortierreihenfolge und der angegebenen Sortierung.</summary>
      <returns>Eine neue Sortierungsklausel mit dem angegebenen Sortierschlüssel, der Sortierung und aufsteigender Sortierreihenfolge.</returns>
      <param name="key">Der Ausdruck, der den Sortierschlüssel definiert.</param>
      <param name="collation">Die zu verwendende Sortierung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> weist keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> mit absteigender Sortierreihenfolge und Standardsortierung.</summary>
      <returns>Eine neue Sortierungsklausel mit dem angegebenen Sortierschlüssel und absteigender Sortierreihenfolge.</returns>
      <param name="key">Der Ausdruck, der den Sortierschlüssel definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> weist keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> mit absteigender Sortierreihenfolge und der angegebenen Sortierung.</summary>
      <returns>Eine neue Sortierungsklausel mit dem angegebenen Sortierschlüssel, der Sortierung und absteigender Sortierreihenfolge.</returns>
      <param name="key">Der Ausdruck, der den Sortierschlüssel definiert.</param>
      <param name="collation">Die zu verwendende Sortierung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> ist leer oder enthält nur Leerzeichen.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> weist keinen in der Reihenfolge vergleichbaren Zeichenfolgen-Ergebnistyp auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>Ein neues DbTreatExpression mit dem angegebenen Argument und Typ.</returns>
      <param name="argument">Ein Ausdruck, der die Instanz angibt.</param>
      <param name="treatType">Typmetadaten für den mit 'treat as' angegebenen Typ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> oder <paramref name="treatType" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> befindet sich nicht in der gleichen Typenhierarchie wie der Ergebnistyp von <paramref name="argument" />.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> mit dem booleschen Wert true.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> mit dem booleschen Wert true.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, das den Wert des Arguments negiert.</summary>
      <returns>Ein neues DbArithmeticExpression, das den Negationsvorgang darstellt.</returns>
      <param name="argument">Ein Ausdruck, der das Argument angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Kein numerischer Ergebnistyp für <paramref name="argument" /> vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, das die Gesamtmenge der linken und der rechten Mengenargumente ohne Duplikate berechnet.</summary>
      <returns>Ein neues DbExpression, das die Gesamtmenge ohne Duplikate aus den linken und rechten Argumenten berechnet.</returns>
      <param name="left">Ein Ausdruck, der das linke Mengenargument definiert.</param>
      <param name="right">Ein Ausdruck, der das rechte Mengenargument definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner Auflistungsergebnistyp mit einem auf Gleichheit vergleichbaren Elementtyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />, das die Gesamtmenge der linken und der rechten Mengenargumente berechnet, ohne Duplikate zu entfernen.</summary>
      <returns>Ein neues DbUnionAllExpression als Union (einschließlich Duplikate) der Gesamtmenge der linken und rechten Argumente.</returns>
      <param name="left">Ein Ausdruck, der das linke Mengenargument definiert.</param>
      <param name="right">Ein Ausdruck, der das rechte Mengenargument definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Zwischen <paramref name="left" /> und <paramref name="right" /> ist kein allgemeiner Auflistungsergebnistyp vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />, das auf eine Variable mit dem angegebenen Namen und Typ verweist.</summary>
      <returns>Ein DbVariableReferenceExpression, das einen Verweis auf eine Variable mit dem angegebenen Namen und Typ darstellt; der Ergebnistyp des Ausdrucks ist derselbe wie <paramref name="type" />.</returns>
      <param name="type">Der Typ der Variablen, auf die verwiesen wird.</param>
      <param name="name">Der Name der Variablen, auf die verwiesen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, das die Elemente im angegebenen Eingabeset mithilfe des angegebenen Prädikats filtert.</summary>
      <returns>Ein neues DbQuantifierExpression, das den Any-Vorgang darstellt.</returns>
      <param name="source">Ein Ausdruck, der das Eingabeset angibt.</param>
      <param name="predicate">Eine Methode, die das Prädikat darstellt, das für jeden Member des Eingabesets ausgewertet werden soll.Diese Methode muss einen Ausdruck mit einem booleschen Ergebnistyp erzeugen, der die Prädikatlogik bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.ArgumentNullException">Der Ausdruck, der von <paramref name="predicate" /> erzeugt wurde, ist Null.</exception>
      <exception cref="T:System.ArgumentException">Der von <paramref name="predicate" /> erzeugte Ausdruck hat keinen booleschen Ergebnistyp.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>Stellt eine API zum Erstellen von <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s bereit, die kanonische EDM-Funktionen aufrufen, und lässt den Zugriff auf die API als Erweiterungsmethoden für den Ausdruckstypen selbst zu.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Abs'-Funktion mit dem angegebenen Argument aufruft, das jeweils einen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den absoluten Wert von <paramref name="value" /> zurückgibt.</returns>
      <param name="value">Ein Ausdruck, der den numerischen Wert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Abs'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddDays'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime oder DateTimeOffset und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="dateValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Tagen zu dem von <paramref name="dateValue" /> angegebenen Wert addiert.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Tagen angibt, die <paramref name="dateValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddDays'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddHours'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Stunden zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Stunden angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddHours'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddMicroseconds'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Mikrosekunden zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Mikrosekunden angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddMicroseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddMilliseconds'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Millisekunden zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Millisekunden angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddMilliseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddMinutes'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Minuten zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Minuten angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddMinutes'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddMonths'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime oder DateTimeOffset und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="dateValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Monaten zu dem von <paramref name="dateValue" /> angegebenen Wert addiert.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Monaten angibt, die <paramref name="dateValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddMonths'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddNanoseconds'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Nanosekunden zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Nanosekunden angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddNanoseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddSeconds'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime, DateTimeOffset oder Time und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="timeValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Sekunden zu dem von <paramref name="timeValue" /> angegebenen Wert addiert.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Sekunden angibt, die <paramref name="timeValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddSeconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AddYears'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp DateTime oder DateTimeOffset und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="dateValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der die von <paramref name="addValue" /> angegebene Anzahl von Jahren zu dem von <paramref name="dateValue" /> angegebenen Wert addiert.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, dem <paramref name="addValue" /> hinzugefügt werden soll.</param>
      <param name="addValue">Ein Ausdruck, der die Anzahl von Jahren angibt, die <paramref name="dateValue" /> hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> oder <paramref name="addValue" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'AddYears'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue" /> und <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Avg'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist mit dem Elementtyp der Auflistung identisch.</summary>
      <returns>Ein neues DbFunctionExpression, das den Durchschnittswert erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, deren Durchschnittswert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Avg'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'BitwiseAnd'-Funktion mit den angegebenen Argumenten aufruft, die denselben ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist derselbe Typ.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert zurückgibt, der durch das bitweise AND von <paramref name="value1" /> und <paramref name="value2" /> erzeugt wird.</returns>
      <param name="value1">Ein Ausdruck, der den ersten Operanden angibt.</param>
      <param name="value2">Ein Ausdruck, der den zweiten Operanden angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> oder <paramref name="value2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'BitwiseAnd'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="value1" /> und <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'BitwiseNot'-Funktion mit dem angegebenen Argument aufruft, das einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist derselbe Typ.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert zurückgibt, der durch das bitweise NOT von <paramref name="value" /> erzeugt wird.</returns>
      <param name="value">Ein Ausdruck, der den ersten Operanden angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'BitwiseNot'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'BitwiseOr'-Funktion mit den angegebenen Argumenten aufruft, die denselben ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist derselbe Typ.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert zurückgibt, der durch das bitweise OR von <paramref name="value1" /> und <paramref name="value2" /> erzeugt wird.</returns>
      <param name="value1">Ein Ausdruck, der den ersten Operanden angibt.</param>
      <param name="value2">Ein Ausdruck, der den zweiten Operanden angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> oder <paramref name="value2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'BitwiseOr'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="value1" /> und <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'BitwiseXor'-Funktion mit den angegebenen Argumenten aufruft, die denselben ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist derselbe Typ.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert zurückgibt, der durch das bitweise XOR (exclusive OR) <paramref name="value1" /> und <paramref name="value2" /> erzeugt wird.</returns>
      <param name="value1">Ein Ausdruck, der den ersten Operanden angibt.</param>
      <param name="value2">Ein Ausdruck, der den zweiten Operanden angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> oder <paramref name="value2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'BitwiseXor'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="value1" /> und <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Ceiling'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Single, Double oder Decimal aufweisen muss.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den kleinsten ganzzahligen Wert nicht kleiner als <paramref name="value" /> zurückgibt.</returns>
      <param name="value">Ein Ausdruck, der den numerischen Wert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Ceiling'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Concat'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist String (Zeichenfolge).</summary>
      <returns>Ein neues DbFunctionExpression, das die verkettete Zeichenfolge produziert.</returns>
      <param name="string1">Ein Ausdruck, der die Zeichenfolge angibt, die als erstes Element in der verketteten Ergebniszeichenfolge angezeigt werden soll.</param>
      <param name="string2">Ein Ausdruck, der die Zeichenfolge angibt, die als zweites Element in der verketteten Ergebniszeichenfolge angezeigt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> oder <paramref name="string2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Concat'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="string1" /> und <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Contains'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob <paramref name="searchedForString" /> innerhalb von <paramref name="searchedString" /> vorkommt oder nicht.</returns>
      <param name="searchedString">Ein Ausdruck, der die Zeichenfolge angibt, in der jedes Vorkommen von <paramref name="searchedForString" /> gesucht werden soll.</param>
      <param name="searchedForString">Ein Ausdruck, der die Zeichenfolge angibt, die in <paramref name="searchedString" /> gesucht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> oder <paramref name="searchedForString" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Contains'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="searchedString" /> und <paramref name="searchedForString" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Count'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neues DbFunctionExpression, das den Zählwert erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, über die der Wert für die Anzahl berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Count'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'CreateDateTime'-Funktion mit den angegebenen Argumenten aufruft.<paramref name="second" /> muss den Ergebnistyp Edm.Double aufweisen, und alle anderen Argumente müssen den Ergebnistyp Edm.Int32 aufweisen.Der Ergebnistyp des Ausdrucks ist Edm.DateTime.</summary>
      <returns>Ein neues DbFunctionExpression, das ein neues 'DateTime' basierend auf den angegebenen Werten zurückgibt.</returns>
      <param name="year">Ein Ausdruck, der den Jahreswert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="month">Ein Ausdruck, der den Monatswert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="day">Ein Ausdruck, der den Tageswert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="hour">Ein Ausdruck, der den Stundenwert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="minute">Ein Ausdruck, der den Minutenwert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="second">Ein Ausdruck, der den Sekundenwert für die neue DateTime-Instanz bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> und <paramref name="second" /> haben den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'CreateDateTime'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> und <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'CreateDateTimeOffset'-Funktion mit den angegebenen Argumenten aufruft.<paramref name="second" /> muss den Ergebnistyp Edm.Double aufweisen, und alle anderen Argumente müssen den Ergebnistyp Edm.Int32 aufweisen.Der Ergebnistyp des Ausdrucks ist Edm.DateTimeOffset.</summary>
      <returns>Ein neues DbFunctionExpression, das ein neues 'DateTimeOffset' basierend auf den angegebenen Werten zurückgibt.</returns>
      <param name="year">Ein Ausdruck, der den Jahreswert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="month">Ein Ausdruck, der den Monatswert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="day">Ein Ausdruck, der den Tageswert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="hour">Ein Ausdruck, der den Stundenwert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="minute">Ein Ausdruck, der den Minutenwert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="second">Ein Ausdruck, der den Sekundenwert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <param name="timeZoneOffset">Ein Ausdruck, der die Anzahl der Minuten im Zeitzonenoffsetwert für die neue DateTimeOffset-Instanz bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> oder <paramref name="timeZoneOffset" /> hat den Wert Null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'CreateDateTimeOffset'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> und <paramref name="timeZoneOffset" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'CreateTime'-Funktion mit den angegebenen Argumenten aufruft.<paramref name="second" /> muss den Ergebnistyp Edm.Double aufweisen, und alle anderen Argumente müssen den Ergebnistyp Edm.Int32 aufweisen.Der Ergebnistyp des Ausdrucks ist Edm.Time.</summary>
      <returns>Ein neues DbFunctionExpression, das ein neues 'Time' basierend auf den angegebenen Werten zurückgibt.</returns>
      <param name="hour">Ein Ausdruck, der den Stundenwert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="minute">Ein Ausdruck, der den Minutenwert für die neue DateTime-Instanz bereitstellt.</param>
      <param name="second">Ein Ausdruck, der den Sekundenwert für die neue DateTime-Instanz bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />, <paramref name="minute" /> oder <paramref name="second" /> hat den Wert Null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'CreateTime'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="hour" />, <paramref name="minute" /> und <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'CurrentDateTime'-Funktion aufruft.</summary>
      <returns>Ein neues DbFunctionExpression, das das aktuelle Datum und die aktuelle Uhrzeit als Edm.DateTime-Instanz zurückgibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'CurrentDateTimeOffset'-Funktion aufruft.</summary>
      <returns>Ein neues DbFunctionExpression, das das aktuelle Datum und die aktuelle Uhrzeit als Edm.DateTimeOffset-Instanz zurückgibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'CurrentUtcDateTime'-Funktion aufruft.</summary>
      <returns>Ein neues DbFunctionExpression, das das aktuelle Datum und die aktuelle Uhrzeit (UTC) als Edm.DateTime-Instanz zurückgibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Day'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime oder DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Wert für den Tag von <paramref name="dateValue" /> zurückgibt.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, aus dem der Tag abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Day'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DayOfYear'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime oder DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Wert für den Tag des laufenden Jahres von <paramref name="dateValue" /> zurückgibt.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, aus dem der Tag des laufenden Jahres abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DayOfYear'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffDays'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime oder DateTimeOffset aufweisen müssen.Der Ergebnistyp von <paramref name="dateValue1" /> muss mit dem Ergebnistyp von <paramref name="dateValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Tagen zwischen <paramref name="dateValue1" /> und <paramref name="dateValue2" />zurückgibt.</returns>
      <param name="dateValue1">Ein Ausdruck, der den ersten DateTime- oder DateTimeOffset-Wert angibt.</param>
      <param name="dateValue2">Ein Ausdruck, der den DateTime- oder DateTimeOffset-Wert angibt, für den die Differenz in Tagen von <paramref name="dateValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> oder <paramref name="dateValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffDays'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue1" /> und <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffHours'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Stunden zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Stunden von <paramref name="timeValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffHours'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffMicroseconds'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Mikrosekunden zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Mikrosekunden von <paramref name="timeValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffMicroseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffMilliseconds'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Millisekunden zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Millisekunden von <paramref name="timeValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffMilliseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffMinutes'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Minuten zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Minuten von <paramref name="timeValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffMinutes'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffMonths'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime oder DateTimeOffset aufweisen müssen.Der Ergebnistyp von <paramref name="dateValue1" /> muss mit dem Ergebnistyp von <paramref name="dateValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Monaten zwischen <paramref name="dateValue1" /> und <paramref name="dateValue2" />zurückgibt.</returns>
      <param name="dateValue1">Ein Ausdruck, der den ersten DateTime- oder DateTimeOffset-Wert angibt.</param>
      <param name="dateValue2">Ein Ausdruck, der den DateTime- oder DateTimeOffset-Wert angibt, für den die Differenz in Monaten von <paramref name="dateValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> oder <paramref name="dateValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffMonths'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue1" /> und <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffNanoseconds'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Nanosekunden zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Nanosekunden von <paramref name="timeValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffNanoseconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffSeconds'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen müssen.Der Ergebnistyp von <paramref name="timeValue1" /> muss mit dem Ergebnistyp von <paramref name="timeValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Sekunden zwischen <paramref name="timeValue1" /> und <paramref name="timeValue2" />zurückgibt.</returns>
      <param name="timeValue1">Ein Ausdruck, der den ersten DateTime-, DateTimeOffset- oder Time-Wert angibt.</param>
      <param name="timeValue2">Ein Ausdruck, der den DateTime-, DateTimeOffset- oder Time-Wert angibt, für den die Differenz in Sekunden von <paramref name="timeValue1" /> berechnet werden soll. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> oder <paramref name="timeValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffSeconds'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="timeValue1" /> und <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'DiffYears'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp DateTime oder DateTimeOffset aufweisen müssen.Der Ergebnistyp von <paramref name="dateValue1" /> muss mit dem Ergebnistyp von <paramref name="dateValue2" /> identisch sein.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Differenz in Jahren zwischen <paramref name="dateValue1" /> und <paramref name="dateValue2" />zurückgibt.</returns>
      <param name="dateValue1">Ein Ausdruck, der den ersten DateTime- oder DateTimeOffset-Wert angibt.</param>
      <param name="dateValue2">Ein Ausdruck, der den DateTime- oder DateTimeOffset-Wert angibt, für den die Differenz in Jahren von <paramref name="dateValue1" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> oder <paramref name="dateValue2" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'DiffYears'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="dateValue1" /> und <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'EndsWith'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der angibt, ob <paramref name="stringArgument" /> auf <paramref name="suffix" /> endet.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, die auf das angegebene <paramref name="suffix" /> überprüft werden soll.</param>
      <param name="suffix">Ein Ausdruck, der das Suffix angibt, auf das <paramref name="stringArgument" /> überprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> oder <paramref name="suffix" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'EndsWith'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="stringArgument" /> und <paramref name="suffix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Floor'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Single, Double oder Decimal aufweisen muss.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, das den größten ganzzahligen Wert zurückgibt, der nicht größer als <paramref name="value" /> ist.</returns>
      <param name="value">Ein Ausdruck, der den numerischen Wert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Floor'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GetTotalOffsetMinutes'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Anzahl von Minuten zurückgibt, um die <paramref name="dateTimeOffsetArgument" /> zu GMT versetzt ist.</returns>
      <param name="dateTimeOffsetArgument">Ein Ausdruck, der den DateTimeOffset-Wert angibt, aus dem der Minutenoffset von GMT abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'GetTotalOffsetMinutes'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="dateTimeOffsetArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Hour'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Stundenwert von <paramref name="timeValue" /> zurückgibt.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, aus dem die Stunde abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Hours'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IndexOf'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ersten Index aus <paramref name="stringToFind" /> in <paramref name="searchString" /> zurückgibt.</returns>
      <param name="searchString">Ein Ausdruck, der die Zeichenfolge angibt, die in <paramref name="stringToFind" /> gesucht werden soll.</param>
      <param name="stringToFind">Ein Ausdruck, der die Zeichenfolge angibt, die in <paramref name="searchString" /> gesucht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> oder <paramref name="stringToFind" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'IndexOf'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="searchString" /> und <paramref name="stringToFind" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Left'-Funktion mit den angegebenen Argumenten aufruft, die einen Zeichenfolgen-Ergebnistyp und einen ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der die äußersten linke Teilzeichenfolge der Länge <paramref name="length" /> von <paramref name="stringArgument" /> zurückgibt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der die äußerste linke Teilzeichenfolge extrahiert werden soll.</param>
      <param name="length">Ein Ausdruck, der die Länge der äußersten linken Teilzeichenfolge angibt, die aus <paramref name="stringArgument" /> extrahiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> oder <paramref name="length" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Left'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Length'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der die Länge von <paramref name="stringArgument" /> zurückgibt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, deren Länge berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Length'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'BigCount'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist Edm.Int64.</summary>
      <returns>Ein neues DbFunctionExpression, das den Zählwert erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, über die der Wert für die Anzahl berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'BigCount'-Funktion akzeptiert Argumente mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Max'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist mit dem Elementtyp der Auflistung identisch.</summary>
      <returns>Ein neues DbFunctionExpression, das den Höchstwert erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, aus der der Höchstwert abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Max'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Millisecond'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Millisekundenwert von <paramref name="timeValue" /> zurückgibt.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, aus dem die Millisekunde abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Millisecond'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Min'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist mit dem Elementtyp der Auflistung identisch.</summary>
      <returns>Ein neues DbFunctionExpression, das den Mindestwert erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, aus der der Mindestwert abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Min'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Minute'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Minutenwert von <paramref name="timeValue" /> zurückgibt.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, aus dem die Minute abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Minute'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Month'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime oder DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Monatswert von <paramref name="dateValue" /> zurückgibt.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, aus dem der Monat abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Month'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'NewGuid'-Funktion aufruft.</summary>
      <returns>Ein neues DbFunctionExpression, das einen neuen GUID-Wert zurückgibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Power'-Funktion mit den angegebenen Argumenten aufruft, die numerische Ergebnistypen aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="baseArgument" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert <paramref name="baseArgument" /> zurückgibt, der mit einer Potenz von <paramref name="exponent" /> berechnet wurde.</returns>
      <param name="baseArgument">Ein Ausdruck, der den numerischen Wert angibt, dessen angegebene Potenz berechnet werden soll.</param>
      <param name="exponent">Ein Ausdruck, der die Potenz angibt, mit der <paramref name="baseArgument" /> berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> oder <paramref name="exponent" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Power'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="baseArgument" /> und <paramref name="exponent" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Replace'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der eine neue Zeichenfolge auf Grundlage von <paramref name="stringArgument" /> zurückgibt, wobei jedes Vorkommen von <paramref name="toReplace" /> durch <paramref name="replacement" /> ersetzt wird.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, in der die Ersetzung ausgeführt werden soll.</param>
      <param name="toReplace">Ein Ausdruck, der die zu ersetzende Zeichenfolge angibt.</param>
      <param name="replacement">Ein Ausdruck, der die Ersetzungszeichenfolge angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="toReplace" /> or <paramref name="replacement" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Replace'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="stringArgument" />, <paramref name="toReplace" /> und <paramref name="replacement" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Reverse'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Kehrwert von <paramref name="stringArgument" /> erzeugt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die umzukehrende Zeichenfolge angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Reverse'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Right'-Funktion mit den angegebenen Argumenten aufruft, die einen Zeichenfolgen-Ergebnistyp und einen ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der die äußersten rechte Teilzeichenfolge der Länge <paramref name="length" /> von <paramref name="stringArgument" /> zurückgibt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der die äußerste rechte Teilzeichenfolge extrahiert werden soll.</param>
      <param name="length">Ein Ausdruck, der die Länge der äußersten rechten Teilzeichenfolge angibt, die aus <paramref name="stringArgument" /> extrahiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> oder <paramref name="length" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Right'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Round'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Single, Double oder Decimal aufweisen muss.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neues DbFunctionExpression, das das angegebene Argument auf den nächsten ganzzahligen Wert rundet.</returns>
      <param name="value">Ein Ausdruck, der den zu rundenden numerischen Wert angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Round'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Round'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp Single, Double oder Decimal und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der das angegebene Argument auf den nächsten ganzzahligen Wert mit einer durch <paramref name="digits" /> angegebenen Genauigkeit rundet.</returns>
      <param name="value">Ein Ausdruck, der den zu rundenden numerischen Wert angibt.</param>
      <param name="digits">Ein Ausdruck, der die beim Runden zu verwendende Anzahl gültiger Ziffern angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> oder <paramref name="digits" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Round'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="value" /> und <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Second'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime, DateTimeOffset oder Time aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Sekundenwert von <paramref name="timeValue" /> zurückgibt.</returns>
      <param name="timeValue">Ein Ausdruck, der den Wert angibt, aus dem die Sekunde abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Second'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'StartsWith'-Funktion mit den angegebenen Argumenten aufruft, die jeweils einen Zeichenfolgen-Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der angibt, ob <paramref name="stringArgument" /> mit <paramref name="prefix" /> beginnt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, die auf das angegebene <paramref name="prefix" /> überprüft werden soll.</param>
      <param name="prefix">Ein Ausdruck, der das Präfix angibt, auf das <paramref name="stringArgument" /> überprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> oder <paramref name="prefix" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'StartsWith'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="stringArgument" /> und <paramref name="prefix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'StDev'-Funktion über den Membern der angegebenen Auflistung aufruft, die nicht null sind.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neues DbFunctionExpression, das den Wert der Standardabweichung über die Member der Auflistung erzeugt, die nicht null sind.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, für die die Standardabweichung berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'StDev'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'StDevP'-Funktion über der Gesamtheit der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neues DbFunctionExpression, das den Wert der Standardabweichung erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, für die die Standardabweichung berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'StDevP'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Substring'-Funktion mit den angegebenen Argumenten aufruft, die einen Zeichenfolgen-Ergebnistyp und einen ganzzahligen numerischen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der die Teilzeichenfolge der Länge <paramref name="length" /> von <paramref name="stringArgument" /> zurückgibt, die bei <paramref name="start" /> beginnt.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der die Teilzeichenfolge extrahiert werden soll.</param>
      <param name="start">Ein Ausdruck, der den Startindex angibt, ab dem die Teilzeichenfolge extrahiert werden soll.</param>
      <param name="length">Ein Ausdruck, der die Länge der Teilzeichenfolge angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="start" /> or <paramref name="length" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Substring'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="stringArgument" />, <paramref name="start" /> und <paramref name="length" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische 'Sum'-Funktion über der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist mit dem Elementtyp der Auflistung identisch.</summary>
      <returns>Ein neues DbFunctionExpression, das die Summe ergibt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Sum'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'ToLower'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="stringArgument" /> zurückgibt, konvertiert in Kleinbuchstaben.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, die in Kleinbuchstaben konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'ToLower'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'ToUpper'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="stringArgument" /> zurückgibt, konvertiert in Großbuchstaben.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, die in Großbuchstaben konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'ToUpper'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Trim'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="stringArgument" /> zurückgibt, wobei das führende und das nachgestellte Leerzeichen entfernt sind.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der das führende und nachgestellte Leerzeichen entfernt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Trim'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'RTrim'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="stringArgument" /> zurückgibt, wobei das nachgestellte Leerzeichen entfernt ist.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der das nachgestellte Leerzeichen entfernt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'RTrim'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'LTrim'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist ebenfalls String (Zeichenfolge).</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="stringArgument" /> zurückgibt, wobei das führende Leerzeichen entfernt ist.</returns>
      <param name="stringArgument">Ein Ausdruck, der die Zeichenfolge angibt, aus der das führende Leerzeichen entfernt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'LTrim'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Truncate'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp Single, Double oder Decimal und einen ganzzahligen Ergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="value" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der das angegebene Argument auf den nächsten ganzzahligen Wert mit einer durch <paramref name="digits" /> angegebenen Genauigkeit abschneidet.</returns>
      <param name="value">Ein Ausdruck, der den abzuschneidenden numerischen Wert angibt.</param>
      <param name="digits">Ein Ausdruck, der die beim Abschneiden zu verwendende Anzahl gültiger Ziffern angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> oder <paramref name="digits" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Truncate'-Funktion akzeptiert Argumente mit den Ergebnistypen <paramref name="value" /> und <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'TruncateTime'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime oder DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist mit dem Ergebnistyp von <paramref name="dateValue" /> identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Wert von <paramref name="dateValue" /> zurückgibt, wobei die Uhrzeit auf Null gesetzt ist.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, dessen Uhrzeitteil abgeschnitten werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'TruncateTime'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Var'-Funktion über den Membern der angegebenen Auflistung aufruft, die nicht null sind.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neues DbFunctionExpression, das die statistische Varianz für die Member der Auflistung erzeugt, die nicht null sind.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, für die die statistische Varianz berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Var'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'VarP'-Funktion über der Gesamtheit der angegebenen Auflistung aufruft.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neues DbFunctionExpression, das den Wert der statistischen Varianz erzeugt.</returns>
      <param name="collection">Ein Ausdruck, der die Auflistung angibt, für die die statistische Varianz berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'VarP'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Year'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp DateTime oder DateTimeOffset aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen Jahreswert von <paramref name=" dateValue" /> zurückgibt.</returns>
      <param name="dateValue">Ein Ausdruck, der den Wert angibt, aus dem das Jahr abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">Keine Überladung der kanonischen 'Year'-Funktion akzeptiert ein Argument mit dem Ergebnistyp <paramref name="dateValue" />.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Stellt die Zeilenklasse dar, die dazu dient, ein konstruktorähnliches Verfahren zum Aufrufen von &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt; bereitzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" />-Klasse mit dem angegebenen Wert der ersten Spalte und optionalen aufeinander folgenden Spaltenwerten. </summary>
      <param name="columnValue">Ein Schlüssel-Wert-Paar, das die erste Spalte in der neuen Zeileninstanz bereitstellt (erforderlich).</param>
      <param name="columnValues">Schlüssel-Wert-Paare, die alle folgenden Spalten in der neuen Zeileninstanz bereitstellen (optional).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Konvertiert ein Row-Objekt in einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, der das konvertierte Row-Objekt darstellt.</returns>
      <param name="row">Das Row-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, der eine neue Zeile basierend auf den Spalten erstellt, die in dieser Row-Instanz enthalten sind.</summary>
      <returns>Ein neuer DbNewInstanceExpression, der eine Zeile mit den gleichen Spaltennamen und DbExpression-Werten wie diese Row-Instanz erstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>Stellt eine API bereit, um <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s zu erstellen, die räumliche verwandte kanonische EDM-Funktionen aufrufen, und lässt ggf. Zugriff auf diese API als Erweiterungsmethoden bei dem Ausdruckstyp selbst zu.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Area'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Bereich von spatialValue oder NULL zurückgibt, wenn spatialValue keine Oberfläche ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Oberflächenwert angibt, für den die Fläche berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AsBinary'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Binary.</summary>
      <returns>Ein neuer DbFunctionExpression, der die bekannte binäre Darstellung von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Wert angibt, aus dem die bekannte binäre Darstellung erstellt werden muss.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AsGml'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.String.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Darstellung der GML (Geography Markup Language) von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Wert angibt, aus dem die Darstellung der Geografie-Markupsprache (GML) erzeugt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'AsText'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.String.</summary>
      <returns>Ein neuer DbFunctionExpression, der die bekannte Textdarstellung von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Wert angibt, aus dem die bekannte Textdarstellung erstellt werden muss.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Centroid'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Flächenschwerpunkt geometryValue (ist möglicherweise nicht auf der Oberfläche selbst) oder NULL zurückgibt, wenn geometryValue keine Oberfläche ist.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometrieoberflächenwert angibt, aus dem der Schwerpunkt abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'CoordinateSystemId'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den ganzzahligen SRID-Wert von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den Wert angibt, aus dem die Koordinatensystem-ID (SRID) abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Distance'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Entfernung zwischen den naheliegendsten Punkten in spatialValue1 und spatialValue1 zurückgibt.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, ab dem die Entfernung vom spatialValue1 gemessen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Elevation'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Höhenwert von spatialValue oder NULL zurückgibt, wenn spatialValue kein Punkt ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Punktwert angibt, aus dem der Erhebungswert (z-Koordinate) abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'EndPoint'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp entspricht dem von spatialValue.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Endpunkt von spatialValue oder NULL zurückgibt, wenn spatialValue keine Kurve ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Kurvenwert angibt, aus dem der Endpunkt abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'ExteriorRing'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Außenring des Polygons geometryValue oder NULL zurückgibt, wenn geometryValue kein Polygon ist.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyCollectionFromBinary-Funktion mit den angegebenen Argumenten aufruft.geographyCollectionWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiesammlungswert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geographyCollectionWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiesammlungswerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiesammlungswerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyCollectionFromText-Funktion mit den angegebenen Argumenten aufruft.geographyCollectionWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiesammlungswert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geographyCollectionWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiesammlungswerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiesammlungswerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeographyFromBinary'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert anhand des angegebenen Binärwerts zurückgibt.</returns>
      <param name="wellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyFromBinary-Funktion mit den angegebenen Argumenten aufruft.wellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="wellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeographyFromGml'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert basierend auf dem angegebenen Wert mit der Standardkoordinatensystem-ID (SRID) des zugrunde liegenden Anbieters zurückgibt.</returns>
      <param name="geographyMarkup">Ein Ausdruck, der die Darstellung der Geografie-Markupsprache (GML) des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische GeographyFromGml-Funktion mit den angegebenen Argumenten aufruft.geographyMarkup muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geographyMarkup">Ein Ausdruck, der die Darstellung der Geografie-Markupsprache (GML) des Geografiewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeographyFromText'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.Der Wert besitzt die ID des Standardkoordinatensystems (SRID) für den zugrunde liegenden Anbieter.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert anhand des angegebenen Werts zurückgibt.</returns>
      <param name="wellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyFromText-Funktion mit den angegebenen Argumenten aufruft.wellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="wellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyLineFromBinary-Funktion mit den angegebenen Argumenten aufruft.lineWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiezeilenwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="lineWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiezeilenwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiezeilenwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyLineFromText-Funktion mit den angegebenen Argumenten aufruft.lineWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiezeilenwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="lineWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiezeilenwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiezeilenwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiLineFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiLineWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen mehrzeiligen Geografiewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiLineWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des mehrzeiligen Geografiewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des mehrzeiligen Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiLineFromText-Funktion mit den angegebenen Argumenten aufruft.multiLineWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen mehrzeiligen Geografiewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiLineWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des mehrzeiligen Geografiewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des mehrzeiligen Geografiewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiPointFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiPointWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiemultipunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPointWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiemultipunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiemultipunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiPointFromText-Funktion mit den angegebenen Argumenten aufruft.multiPointWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiemultipunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPointWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiemultipunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiemultipunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiPolygonFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiPolygonWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiemultipolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiemultipolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiemultipolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyMultiPolygonFromText-Funktion mit den angegebenen Argumenten aufruft.multiPolygonWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiemultipolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPolygonWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiemultipolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiemultipolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyPointFromBinary-Funktion mit den angegebenen Argumenten aufruft.pointWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiepunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="pointWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiepunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiepunktwerts bereitstellt.WellKnownBinaryValue.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyPointFromText-Funktion mit den angegebenen Argumenten aufruft.</summary>
      <returns>Die kanonische GeographyPointFromText-Funktion.</returns>
      <param name="pointWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiepunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiepunktwerts systempointWellKnownTextValue bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyPolygonFromBinary-Funktion mit den angegebenen Argumenten aufruft.polygonWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiepolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="polygonWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geografiepolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiepolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeographyPolygonFromText-Funktion mit den angegebenen Argumenten aufruft.polygonWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geography.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geografiepolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="polygonWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geografiepolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geografiepolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryCollectionFromBinary-Funktion mit den angegebenen Argumenten aufruft.geometryCollectionWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriesammlungswert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geometryCollectionWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriesammlungswerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriesammlungswerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryCollectionFromText-Funktion mit den angegebenen Argumenten aufruft.geometryCollectionWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriesammlungswert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geometryCollectionWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriesammlungswerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriesammlungswerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeometryFromBinary'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert anhand des angegebenen Binärwerts zurückgibt.</returns>
      <param name="wellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryFromBinary-Funktion mit den angegebenen Argumenten aufruft.wellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="wellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeometryFromGml'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert basierend auf dem angegebenen Wert mit der Standardkoordinatensystem-ID (SRID) des zugrunde liegenden Anbieters zurückgibt.</returns>
      <param name="geometryMarkup">Ein Ausdruck, der die Darstellung der Geografie-Markupsprache (GML) des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryFromGml-Funktion mit den angegebenen Argumenten aufruft.geometryMarkup muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="geometryMarkup">Ein Ausdruck, der die Darstellung der Geografie-Markupsprache (GML) des Geometriewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'GeometryFromText'-Funktion mit dem angegebenen Argument aufruft, das einen Zeichenfolgen-Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.Der Wert besitzt die ID des Standardkoordinatensystems (SRID) für den zugrunde liegenden Anbieter.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert anhand des angegebenen Werts zurückgibt.</returns>
      <param name="wellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryFromText-Funktion mit den angegebenen Argumenten aufruft.wellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="wellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryLineFromBinary-Funktion mit den angegebenen Argumenten aufruft.lineWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriezeilenwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="lineWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriezeilenwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriezeilenwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische GeometryLineFromText-Funktion mit den angegebenen Argumenten aufruft.lineWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriezeilenwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="lineWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometrielinienwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriezeilenwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiLineFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiLineWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen mehrzeiligen Geometriewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiLineWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des mehrzeiligen Geometriewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des mehrzeiligen Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiLineFromText-Funktion mit den angegebenen Argumenten aufruft.multiLineWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen mehrzeiligen Geometriewert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiLineWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des mehrzeiligen Geometriewerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des mehrzeiligen Geometriewerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiPointFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiPointWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriemultipunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPointWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriemultipunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriemultipunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiPointFromText-Funktion mit den angegebenen Argumenten aufruft.multiPointWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriemultipunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPointWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriemultipunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriemultipunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiPolygonFromBinary-Funktion mit den angegebenen Argumenten aufruft.multiPolygonWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriemultipolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriemultipolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriemultipolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryMultiPolygonFromText-Funktion mit den angegebenen Argumenten aufruft.multiPolygonWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriemultipolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="multiPolygonWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriemultipolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriemultipolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryPointFromBinary-Funktion mit den angegebenen Argumenten aufruft.pointWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriepunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="pointWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriepunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriepunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryPointFromText-Funktion mit den angegebenen Argumenten aufruft.pointWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriepunktwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="pointWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriepunktwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriepunktwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryPolygonFromBinary-Funktion mit den angegebenen Argumenten aufruft.polygonWellKnownBinaryValue muss einen binären Ergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriepolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="polygonWellKnownBinaryValue">Ein Ausdruck, der die bekannte binäre Darstellung des Geometriepolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriepolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, der die kanonische GeometryPolygonFromText-Funktion mit den angegebenen Argumenten aufruft.polygonWellKnownText muss einen Zeichenfolgenergebnistyp aufweisen, während coordinateSystemId einen ganzzahligen numerischen Ergebnistyp aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den neuen Geometriepolygonwert anhand der angegebenen Werte zurückgibt.</returns>
      <param name="polygonWellKnownText">Ein Ausdruck, der die bekannte Textdarstellung des Geometriepolygonwerts bereitstellt.</param>
      <param name="coordinateSystemId">Ein Ausdruck, der die Koordinatensystem-ID (SRID) des Koordinatensystems des Geometriepolygonwerts bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'InteriorRingAt'-Funktion mit den angegebenen Argumenten aufruft.Das erste Argument muss einen Edm.Geometry-Ergebnistyp haben.Das zweite Argument muss einen ganzzahligen numerischen Ergebnistyp aufweisen.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der den inneren Ring an der Position indexValue in geometryValue oder NULL zurückgibt, wenn geometryValue kein Polygon ist.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <param name="indexValue">Ein Ausdruck, der die Position des inneren Rings angibt, der aus dem Polygon abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'InteriorRingCount'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder die Anzahl der Innenringe des Polygons geometryValue oder NULL zurückgibt, wenn geometryValue kein Polygon ist.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IsClosedSpatial'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder einen booleschen Wert zurückgibt, der angibt, ob spatialValue geschlossen ist, oder NULL zurückgibt, wenn spatialValue keine Kurve darstellt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Kurvenwert angibt, aus dem der IsClosedSpatial-Wert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IsEmptySpatial'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob spatialValue leer ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Wert angibt, aus dem der IsEmptySpatial-Wert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IsRing'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder einen booleschen Wert zurückgibt, der angibt, ob geometryValue ein Ring ist (geschlossen oder einfach) oder NULL zurückgibt, wenn geometryValue keine Kurve darstellt.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriekurvenwert angibt, aus dem der IsRing-Wert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IsSimpleGeometry'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue eine einfache Geometrie ist.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'IsValidGeometry'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue gültig ist.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriewert angibt, der auf räumliche Gültigkeit getestet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Latitude'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Wert für die geografische Breite von geographyValue oder NULL zurückgibt, wenn geographyValue kein Punkt ist.</returns>
      <param name="geographyValue">Ein Ausdruck, der den Geografiepunktwert angibt, aus dem der Wert der geografische Breite abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Longitude'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Wert für die geografische Länge von geographyValue oder NULL zurückgibt, wenn geographyValue kein Punkt ist.</returns>
      <param name="geographyValue">Ein Ausdruck, der den Geografiepunktwert angibt, aus dem der Wert der geografische Länge abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'Measure'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Measure-Wert von spatialValue oder NULL zurückgibt, wenn spatialValue kein Punkt ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Punktwert angibt, aus dem der Measure-(M)-Koordinatenwert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'PointAt'-Funktion mit den angegebenen Argumenten aufruft.Das erste Argument muss einen Edm.Geography- oder Edm.Geometry-Ergebnistyp haben.Das zweite Argument muss einen ganzzahligen numerischen Ergebnistyp aufweisen.Der Ergebnistyp des Ausdrucks ist derselbe wie der von spatialValue.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Punkt an der Position indexValue in spatialValue oder NULL zurückgibt, wenn spatialValue keine Zeilenzeichenfolge ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Linienzeichenfolgenwert angibt.</param>
      <param name="indexValue">Ein Ausdruck, der die Position des Punkts angibt, der aus der Linienzeichenfolge abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'PointCount'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder die Anzahl der Punkte in spatialValue oder NULL zurückgibt, wenn spatialValue keine Zeilenzeichenfolge ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Linienzeichenfolgenwert angibt, aus dem die Anzahl der Punkte abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'PointOnSurface'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder einen Punkt zurückgibt, der sich garantiert auf der Oberfläche von geometryValue befindet, oder NULL zurückgibt, wenn geometryValue keine Oberfläche ist.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometrieoberflächenwert angibt, aus dem der Punkt abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialBoundary'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Begrenzung für geometryValue zurückgibt.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriewert angibt, aus dem der 'SpatialBoundary'-Wert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialBuffer'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Double aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen Geometriewert zurückgibt, der alle Punkte kleiner oder gleich dem Abstand von spatialValue darstellt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Wert angibt.</param>
      <param name="distance">Ein Ausdruck, der die Pufferentfernung angibt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialContains'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geometry aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 räumlich geometryValue2 enthält.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialConvexHull'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der die konvexe Hülle für geometryValue zurückgibt.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriewert angibt, aus dem der Wert der konvexen Hülle abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialCrosses'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geometry aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 die Schnittmenge von geometryValue2 überschneidet.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialDifference'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist mit dem Typ von spatialValue1 und spatialValue2 identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Geometriewert zurückgibt, der die Differenz von spatialValue2 mit spatialValue1 darstellt.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, für den die Differenz zu spatialValue1 berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialDimension'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Dimensionswert von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den Wert angibt, aus dem der Dimensionswert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialDisjoint'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob spatialValue1 und spatialValue2 räumlich getrennt sind.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, der mit spatialValue1 auf Disjunktheit verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialElementAt'-Funktion mit den angegebenen Argumenten aufruft.Das erste Argument muss einen Edm.Geography- oder Edm.Geometry-Ergebnistyp haben.Das zweite Argument muss einen ganzzahligen numerischen Ergebnistyp aufweisen.Der Ergebnistyp des Ausdrucks ist derselbe wie der von spatialValue.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder das Sammlungselement an der Position indexValue in spatialValue oder NULL zurückgibt, wenn spatialValue keine Sammlung ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den Geografie- oder Geometriesammlungswert angibt.</param>
      <param name="indexValue">Ein Ausdruck, der die Position des Elements angibt, das aus der Geometrie- oder Geografiesammlung abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialElementCount'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Int32.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder die Anzahl der Elemente in spatialValue oder NULL zurückgibt, wenn spatialValue keine Sammlung ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den Geografie- oder Geometriesammlungswert angibt, aus dem die Anzahl von Elementen abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialEnvelope'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Geometry.</summary>
      <returns>Ein neuer DbFunctionExpression, der das minimale umgebende Feld für geometryValue zurückgibt.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Wert angibt, aus dem der Umschlagwert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialEquals'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob spatialValue1 und spatialValue2 gleich sind.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, der mit spatialValue1 auf Gleichheit verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialIntersection'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist mit dem Typ von spatialValue1 und spatialValue2 identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den räumlichen Wert zurückgibt, der die Schnittmenge von spatialValue1 und spatialValue2 darstellt.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, für den die Schnittmenge mit spatialValue1 berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialIntersects'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob sich spatialValue1 und spatialValue2 überschneiden.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, der mit spatialValue1 auf eine Schnittmenge verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialLength'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder die Länge von spatialValue oder NULL zurückgibt, wenn spatialValue keine Kurve ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Kurvenwert angibt, aus dem die Länge abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialOverlaps'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geometry aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 räumlich geometryValue2 überlappt.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialRelate'-Funktion mit den angegebenen Argumenten aufruft, die den Ergebnistyp Edm.Geometry und den Zeichenfolgenergebnistyp aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 räumlich entsprechend der von intersectionPatternMatrix gekennzeichneten räumlichen Beziehung mit geometryValue2 verknüpft ist.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
      <param name="intersectionPatternMatrix">Ein Ausdruck, der die Textdarstellung des Dimensionally Extended Nine-Intersection Model-Schnittmengenmusters (DE-9IM-Musters) angibt, das verwendet wird, um geometryValue1 und geometryValue2 zu vergleichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialSymmetricDifference'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist mit dem Typ von spatialValue1 und spatialValue2 identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den Geometriewert zurückgibt, der die symmetrische Differenz von spatialValue2 mit spatialValue1 darstellt.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, für den die symmetrische Differenz zu spatialValue1 berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialTouches'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geometry aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 geometryValue2 berührt.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialTypeName'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.String.</summary>
      <returns>Ein neuer DbFunctionExpression, der die Zeichenfolge des Geometrie-Typnamens von spatialValue zurückgibt.</returns>
      <param name="spatialValue">Ein Ausdruck, der den Wert angibt, aus dem der Geometrie-Typnamen abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialUnion'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen müssen.Der Ergebnistyp des spatialValue1 muss mit dem Ergebnistyp des spatialValue2 übereinstimmen.Der Ergebnistyp des Ausdrucks ist mit dem Typ von spatialValue1 und spatialValue2 identisch.</summary>
      <returns>Ein neuer DbFunctionExpression, der den räumlichen Wert zurückgibt, der die Gesamtmenge von spatialValue1 und spatialValue2 darstellt.</returns>
      <param name="spatialValue1">Ein Ausdruck, der den ersten räumlichen Wert angibt.</param>
      <param name="spatialValue2">Ein Ausdruck, der den räumlichen Wert angibt, für den die Gesamtmenge mit spatialValue1 berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'SpatialWithin'-Funktion mit den angegebenen Argumenten aufruft, die jeweils den Ergebnistyp Edm.Geometry aufweisen müssen.Der Ergebnistyp des Ausdrucks ist Edm.Boolean.</summary>
      <returns>Ein neuer DbFunctionExpression, der einen booleschen Wert zurückgibt, der angibt, ob geometryValue1 räumlich innerhalb von geometryValue2 ist.</returns>
      <param name="geometryValue1">Ein Ausdruck, der den ersten Geometriewert angibt.</param>
      <param name="geometryValue2">Ein Ausdruck, der den Geometriewert angibt, der mit geometryValue1 verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'StartPoint'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geography oder Edm.Geometry aufweisen muss.Der Ergebnistyp entspricht dem von spatialValue.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Startpunkt von spatialValue oder NULL zurückgibt, wenn spatialValue keine Kurve ist.</returns>
      <param name="spatialValue">Ein Ausdruck, der den räumlichen Kurvenwert angibt, aus dem der Startpunkt abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'XCoordinate'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Wert der x-Koordinate von geometryValue oder NULL zurückgibt, wenn geometryValue kein Punkt ist.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriepunktwert angibt, aus dem der Wert der X-Koordinaten abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, das die kanonische 'YCoordinate'-Funktion mit dem angegebenen Argument aufruft, das den Ergebnistyp Edm.Geometry aufweisen muss.Der Ergebnistyp des Ausdrucks ist Edm.Double.</summary>
      <returns>Ein neuer DbFunctionExpression, der entweder den Wert der y-Koordinate von geometryValue oder NULL zurückgibt, wenn geometryValue kein Punkt ist.</returns>
      <param name="geometryValue">Ein Ausdruck, der den Geometriepunktwert angibt, aus dem der Wert der Y-Koordinaten abgerufen werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>Public Entity SQL-Parserklasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>Analysieren Sie die angegebene Abfrage mit den angegebenen Parametern.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> und ggf. Informationen enthält, die Inlinefunktionsdefinitionen beschreiben.</returns>
      <param name="query">Die zu analysierende EntitySQL-Abfrage.</param>
      <param name="parameters">Die optionalen Abfrageparameter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Analysiert eine bestimmte Abfrage mit bestimmten festgelegten Variablen und erstellt ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, das <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> und ggf. Informationen enthält, die Inlinefunktionsdefinitionen beschreiben.</returns>
      <param name="query">Die zu analysierende Abfrage.</param>
      <param name="variables">Die optionalen Abfragevariablen.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>Inlinefunktionsdefinition für Entity SQL-Abfragen, die als Teil des <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> zurückgegeben wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>Die Endposition der Funktionsdefinition im Text der eSQL-Abfrage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>Funktionstext und Parameter.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>Funktionsname.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>Die Anfangsposition der Funktionsdefinition im Text der eSQL-Abfrage.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Entity SQL-Parser-Informationen zum Ergebnis.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>Eine Befehlsstruktur, die während der Analyse erstellt wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>Liste der <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" />-Objekte, die Inlinefunktionsdefinitionen für Abfragen beschreiben.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>Klasse, die einen Befehl für die konzeptionelle Ebene darstellt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Klasse unter Verwendung der angegebenen Werte.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Klasse mit der angegebenen Anweisung.</summary>
      <param name="statement">Der Text des Befehls.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Klasse mit der angegebenen Anweisung und Verbindung.</summary>
      <param name="statement">Der Text des Befehls.</param>
      <param name="connection">Eine Verbindung mit der Datenquelle.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Klasse mit der angegebenen Anweisung, Verbindung und Transaktion.</summary>
      <param name="statement">Der Text des Befehls.</param>
      <param name="connection">Eine Verbindung mit der Datenquelle.</param>
      <param name="transaction">Die Transaktion, in der der Befehl ausgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Erstellt das EntityCommand-Objekt mit der angegebenen eSQL-Anweisung und dem zu verwendenden Verbindungsobjekt</summary>
      <param name="statement">Der auszuführende eSQL-Befehlstext</param>
      <param name="connection">Das Verbindungsobjekt</param>
      <param name="resolver">Konfliktlöser, der zum Auflösen von DbProviderServices verwendet wird</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>Bricht die Ausführung eines <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>Ruft eine Entity SQL-Anweisung ab, die einen auszuführenden Befehl oder eine auszuführende gespeicherte Prozedur angibt, oder legt diese fest.</summary>
      <returns>Die Entity SQL-Anweisung, die einen auszuführenden Befehl oder eine auszuführende gespeicherte Prozedur angibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>Ruft die Wartezeit bis zum Timeout auf bzw. legt diese fest.</summary>
      <returns>Die Dauer in Sekunden, für die auf die Ausführung des Befehls gewartet werden soll.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>Ruft die auszuführende Befehlsstruktur ab oder legt sie fest. Es kann nur die Befehlsstruktur oder der Befehlstext festgelegt werden, nicht beides.</summary>
      <returns>Die auszuführende Befehlsstruktur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>Ruft einen Wert ab, der angibt, wie die <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" />-Eigenschaft interpretiert werden soll, oder legt diesen fest.</summary>
      <returns>Einer der <see cref="T:System.Data.CommandType" />-Aufzählungswerte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>Ruft die vom <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> verwendete <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ab oder legt diese fest.</summary>
      <returns>Die vom EntityCommand verwendete Verbindung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>Erstellt und gibt ein neues Parameterobjekt zurück, das einen Parameter in der eSQL-Anweisung darstellt</summary>
      <returns>Das Parameterobjekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>Erstellt eine neue Instanz eines <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekts.</summary>
      <returns>Eine neue Instanz eines <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekts.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>Das Verbindungsobjekt zum Ausführen des Befehls</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>Die Parameterauflistung für diesen Befehl</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>Die Transaktion, in der dieser Befehl ausgeführt wird</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob das Befehlsobjekt in einem Steuerelement für Windows Form-Designer sichtbar sein soll.</summary>
      <returns>true, wenn das Befehlsobjekt in einem Steuerelement für Windows Form-Designer sichtbar sein soll, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob das Abfrageplan-Caching aktiviert ist.</summary>
      <returns>true, wenn das Abfrageplan-Caching aktiviert ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>Führt den Befehl aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück</summary>
      <returns>Ein DbDataReader-Objekt</returns>
      <param name="behavior">Das zu verwendende Verhalten, wenn der Befehl ausgeführt wird</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Führt den Befehl asynchron aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält ein DbDataReader-Objekt.</returns>
      <param name="behavior">Das zu verwendende Verhalten, wenn der Befehl ausgeführt wird</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Führt den aktuellen Befehl aus.</summary>
      <returns>Die Anzahl der betroffenen Zeilen.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>Führt den Befehl asynchron aus und verwirft alle Ergebnisse, die vom Befehl zurückgegeben werden</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der betroffenen Zeilen.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>Führt den Befehl aus und gibt einen Datenreader zurück.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />, der die Ergebnisse enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Kompiliert den <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> in eine Befehlsstruktur und übergibt ihn an den zugrunde liegende Speicheranbieter zur Ausführung. Anschließend wird ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> aus dem erzeugten Resultset mit dem angegebenen <see cref="T:System.Data.CommandBehavior" /> erstellt.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />, der die Ergebnisse enthält.</returns>
      <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>Führt den Befehl asynchron aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück.Kann nur für CommandType.CommandText aufgerufen werden (andernfalls verwenden Sie die Standard-Execute*-Methoden)</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält ein EntityDataReader-Objekt.</returns>
      <exception cref="T:System.InvalidOperationException">Für Befehle der gespeicherten Prozedur, beim Aufrufen aller Elemente außer einem Entitätsauflistungsergebnis</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>Führt den Befehl asynchron aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück.Kann nur für CommandType.CommandText aufgerufen werden (andernfalls verwenden Sie die Standard-Execute*-Methoden)</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält ein EntityDataReader-Objekt.</returns>
      <param name="behavior">Das zu verwendende Verhalten, wenn der Befehl ausgeführt wird</param>
      <exception cref="T:System.InvalidOperationException">Für Befehle der gespeicherten Prozedur, beim Aufrufen aller Elemente außer einem Entitätsauflistungsergebnis</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Führt den Befehl asynchron aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück.Kann nur für CommandType.CommandText aufgerufen werden (andernfalls verwenden Sie die Standard-Execute*-Methoden)</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält ein EntityDataReader-Objekt.</returns>
      <param name="behavior">Das zu verwendende Verhalten, wenn der Befehl ausgeführt wird</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Für Befehle der gespeicherten Prozedur, beim Aufrufen aller Elemente außer einem Entitätsauflistungsergebnis</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>Führt den Befehl asynchron aus und gibt einen Datenleser zum Lesen der Ergebnisse zurück.Kann nur für CommandType.CommandText aufgerufen werden (andernfalls verwenden Sie die Standard-Execute*-Methoden)</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält ein EntityDataReader-Objekt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Für Befehle der gespeicherten Prozedur, beim Aufrufen aller Elemente außer einem Entitätsauflistungsergebnis</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Führt den Befehl aus und gibt die erste Spalte der ersten Zeile im Resultset zurück.Zusätzliche Spalten oder Zeilen werden ignoriert.</summary>
      <returns>Die erste Spalte der ersten Zeile im Resultset oder ein NULL-Verweis (Nothing in Visual Basic), wenn das Resultset leer ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Ruft die Parameter der Entity SQL-Anweisung oder der gespeicherten Prozedur ab.</summary>
      <returns>Die Parameter der Entity SQL-Anweisung oder der gespeicherten Prozedur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>Kompiliert den Befehl auf Entitätsebene und erstellt eine vorbereitete Version des Befehls.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>Kompiliert den Befehl auf Entitätsebene und gibt den Speicherbefehlstext zurück.</summary>
      <returns>Der Speicherbefehlstext.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>Übernimmt oder bestimmt die Transaktion, die vom <see cref="T:System.Data.SqlClient.SqlCommand" /> ausgeführt wird.</summary>
      <returns>Die Transaktion, in der der <see cref="T:System.Data.SqlClient.SqlCommand" /> ausgeführt wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Ruft ab oder legt fest, wie Befehlsergebnisse auf zu aktualisierende Zeilen angewendet werden.</summary>
      <returns>Einer der <see cref="T:System.Data.UpdateRowSource" />-Werte.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>Klasse, die eine Verbindung für die konzeptionelle Ebene darstellt.Eine Entitäts-Verbindung kann nur einmal initialisiert werden (durch Öffnen der Verbindung).Es ist nicht möglich, anschließend die Verbindungszeichenfolge zu ändern, eine neue Speicherverbindung anzufügen oder die Speicherverbindungszeichenfolge zu ändern.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Klasse mit einer angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> und <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <param name="workspace">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, das <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> zugeordnet werden soll.</param>
      <param name="connection">Die zugrunde liegende Datenquellenverbindung für dieses <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Objekt.</param>
      <exception cref="T:System.ArgumentNullException">Der Arbeitsbereich oder Verbindungsparameter ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Das konzeptionelle Modell fehlt im Arbeitsbereich.– oder –Die Zuordnungsdatei fehlt im Arbeitsbereich.– oder –Das Speichermodell fehlt im Arbeitsbereich.– oder –Die Verbindung befindet sich nicht im geschlossenen Zustand.</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">Die Verbindung stammt nicht von einem ADO.NET Entity Framework-kompatiblen Anbieter.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>Erstellt das EntityConnection-Objekt aus Metadaten, die in den Arbeitsspeicher geladen werden</summary>
      <param name="workspace">Arbeitsbereich, der Metadateninformationen enthält.</param>
      <param name="connection">Speicher-Verbindung.</param>
      <param name="entityConnectionOwnsStoreConnection">Mit true wird die Verbindung verworfen, wenn die Entitätsverbindung verworfen wird, andernfalls muss der Aufrufer die Speicherverbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Initialisiert auf Grundlage der Verbindungszeichenfolge eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Klasse.</summary>
      <param name="connectionString">Die anbieterspezifische Verbindungszeichenfolge.</param>
      <exception cref="T:System.ArgumentException">Es wurde ein ungültiges Schlüsselwort für eine Verbindungszeichenfolge bereitgestellt, oder ein erforderliches Schlüsselwort für eine Verbindungszeichenfolge wurde nicht bereitgestellt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>Beginnt eine Datenbanktransaktion</summary>
      <returns>Ein Objekt, das die neue Transaktion darstellt</returns>
      <param name="isolationLevel">Die Isolationsstufe der Transaktion</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>Startet eine Transaktion mit dem zugrunde liegenden Anbieter.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.Die zurückgegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />-Instanz kann später <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> zugeordnet werden, um den Befehl unter dieser Transaktion auszuführen.</returns>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende Datenanbieter ist nicht bekannt.– oder –Der Aufruf von <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> wurde für eine <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ausgeführt, die bereits über eine aktuelle Transaktion verfügt.– oder –Der Status der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ist nicht <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Startet eine Transaktion mit dem zugrunde liegenden Anbieter mit der angegebenen Isolationsstufe.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.Die zurückgegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />-Instanz kann später <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> zugeordnet werden, um den Befehl unter dieser Transaktion auszuführen.</returns>
      <param name="isolationLevel">Die Isolationsstufe der Transaktion.</param>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende Datenanbieter ist nicht bekannt.– oder –Der Aufruf von <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> wurde für eine <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ausgeführt, die bereits über eine aktuelle Transaktion verfügt.– oder –Der Status der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ist nicht <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Nicht unterstützt.</summary>
      <param name="databaseName">Nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException">Wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>Schließt die Verbindung mit der Datenbank.</summary>
      <exception cref="T:System.InvalidOperationException">Ein Fehler ist beim Schließen der Verbindung aufgetreten.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Verbindungszeichenfolge ab oder legt diese fest.</summary>
      <returns>Die Verbindungszeichenfolge, die zur Herstellung der ersten Verbindung mit der Datenquelle erforderlich ist.Der Standardwert ist eine leere Zeichenfolge.Bei einer geschlossenen Verbindung wird der aktuell festgelegte Wert zurückgegeben.Wenn kein Wert festgelegt wurde, wird eine leere Zeichenfolge zurückgegeben.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Ruft die Anzahl von Sekunden ab, während der beim Verbindungsaufbau gewartet werden soll, bevor der Versuch beendet und ein Fehler generiert wird.</summary>
      <returns>Der Zeitraum in Sekunden, in dem auf das Öffnen einer Verbindung gewartet werden soll.Der Standardwert ist der Standardtimeout des zugrunde liegenden Datenanbieters.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>Erstellt eine neue Instanz einer <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, mit der <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> auf diese <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> festgelegt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Objekt.</returns>
      <exception cref="T:System.InvalidOperationException">Der Name des zugrunde liegenden Datenanbieters ist nicht bekannt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>Erstellt ein neues Befehlsobjekt, das dieses Verbindungsobjekt verwendet</summary>
      <returns>Das Befehlsobjekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>Ruft die aktuelle Transaktion ab, in der diese Verbindung aufgeführt ist.Ist möglicherweise NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>Ruft den Namen der aktuellen Datenbank oder der nach dem Öffnen einer Verbindung verwendeten Datenbank ab.</summary>
      <returns>Der Wert der Database-Eigenschaft des zugrunde liegenden Datenanbieters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>Ruft den Namen oder die Netzwerkadresse der Datenquelle ab, mit der eine Verbindung hergestellt werden soll.</summary>
      <returns>Der Name der Datenquelle.Der Standardwert ist eine leere Zeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>Ruft die Anbieterfactory ab, die der EntityConnection zugeordnet ist</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>Bereinigt dieses Verbindungsobjekt</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Trägt diese <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> in die angegebene Transaktion ein.</summary>
      <param name="transaction">Das Transaktionsobjekt, in das eingetragen wird.</param>
      <exception cref="T:System.InvalidOperationException">Der Zustand von <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> ist nicht <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Gibt die <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> zurück, die dieser <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, der diesem <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> zugeordnet ist.</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">Die Inlineverbindungszeichenfolge enthält einen ungültigen Metadaten-Schlüsselwortwert.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>Stellt durch das Aufrufen der Open-Methode des zugrunde liegenden Datenanbieters eine Verbindung mit der Datenquelle her.</summary>
      <exception cref="T:System.InvalidOperationException">Ein Fehler tritt auf, wenn die Verbindung geöffnet wird oder der Name des zugrunde liegenden Datenanbieters nicht bekannt ist.</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">Die Inlineverbindungszeichenfolge enthält einen ungültigen Metadaten-Schlüsselwortwert.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>Stellt asynchron durch das Aufrufen der Open-Methode des zugrunde liegenden Datenanbieters eine Verbindung mit dem Datenspeicher her</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>Ruft eine Zeichenfolge mit der Version der Datenquelle ab, mit der der Client verbunden ist.</summary>
      <returns>Die Version der Datenquelle, die in der Verbindungszeichenfolge für den Anbieter enthalten ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>Ruft den Zustand der EntityConnection ab, die zur Nachverfolgung des Zustands der zugrundeliegenden Datenbankverbindung eingerichtet wurde, die von dieser EntityConnection umschlossen wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>Bietet Zugriff auf die vom <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Objekt verwendete zugrunde liegende Datenquellenverbindung.</summary>
      <returns>Die <see cref="T:System.Data.Common.DbConnection" /> für die Datenquellenverbindung.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>Klasse, die einen Verbindungszeichenfolgen-Generator für den Entitäts-Clientanbieter darstellt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Initialisiert mithilfe der angegebenen Verbindungszeichenfolge eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />-Klasse.</summary>
      <param name="connectionString">Eine anbieterspezifische Verbindungszeichenfolge zur zugrunde liegenden Datenquelle.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Löscht den Inhalt der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />-Instanz.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Bestimmt, ob der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> einen bestimmten Schlüssel enthält.</summary>
      <returns>Gibt true zurück, wenn der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> ein Element mit dem angegebenen Schlüssel enthält, andernfalls false.</returns>
      <param name="keyword">Der im <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> zu suchende Schlüssel.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> eine feste Größe hat.</summary>
      <returns>Gibt in jedem Fall true zurück, da der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> eine Auflistung der Schlüsselwort-Wert-Paare mit fester Größe bereitstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Ruft den Wert ab, der dem angegebenen Schlüssel zugeordnet ist, oder legt diesen fest.In C# ist diese Eigenschaft der Indexer.</summary>
      <returns>Der dem angegebenen Schlüssel zugeordnete Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Ruft eine <see cref="T:System.Collections.ICollection" /> ab, die die Schlüssel in den <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.ICollection" />, die die Schlüssel in den <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Ruft die Speicherorte der Metadaten in der Verbindungszeichenfolge ab oder legt diese fest.</summary>
      <returns>Ruft die Speicherorte der Metadaten in der Verbindungszeichenfolge ab oder legt diese fest.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Ruft den in einer Konfigurationsdatei definierten Namen eines Abschnitts ab oder legt diesen fest.</summary>
      <returns>Der Name eines Abschnitts in einer Konfigurationsdatei.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Ruft den Namen des zugrunde liegenden .NET Framework-Datenanbieters in der Verbindungszeichenfolge ab oder legt diesen fest.</summary>
      <returns>Der invariante Name des zugrunde liegenden .NET Framework-Datenanbieters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Ruft die innere, anbieterspezifische Verbindungszeichenfolge ab oder legt diese fest.</summary>
      <returns>Die innere, anbieterspezifische Verbindungszeichenfolge.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Entfernt den Eintrag mit dem angegebenen Schlüssel aus der <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />-Instanz.</summary>
      <returns>Gibt true zurück, wenn der Schlüssel in der Verbindungszeichenfolge vorhanden war und entfernt wurde, false, wenn der Schlüssel nicht vorhanden war.</returns>
      <param name="keyword">Der Schlüssel des Schlüsselwort-Wert-Paars, der aus der Verbindungszeichenfolge in diesem <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> entfernt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Schlüsselwort ist NULL (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Ruft einen Wert ab, der dem von diesem <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> bereitgestellten Schlüssel entspricht.</summary>
      <returns>Gibt true zurück, wenn das keyword in der Verbindungszeichenfolge gefunden wurde, andernfalls false.</returns>
      <param name="keyword">Der Schlüssel des abzurufenden Elements.</param>
      <param name="value">Der dem keyword entsprechende Wert.</param>
      <exception cref="T:System.ArgumentNullException">keyword enthält einen NULL-Wert (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>Eine Datenleserklasse für den Entitäts-Clientanbieter</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>Schließt das <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />-Objekt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> für diesen <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" /> ab.</summary>
      <returns>Die Informationen eines Datensatzes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>Ruft einen Wert ab, der die Tiefe der Schachtelung für die aktuelle Zeile angibt.</summary>
      <returns>Die Tiefe der Schachtelung für die aktuelle Zeile.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Gibt die Ressourcen frei, die von diesem <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> verwendet werden, und ruft <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" /> auf.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben; false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>Ruft die Anzahl der Spalten in der aktuellen Zeile ab.</summary>
      <returns>Die Anzahl der Spalten in der aktuellen Zeile.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als booleschen Wert ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als ein Byte ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Liest einen Bytestream aus der angegebenen Spalte, beginnend an der durch dataIndex angegebenen Position, in den Puffer, beginnend an der durch bufferIndex angegebenen Position.</summary>
      <returns>Die tatsächlich gelesene Anzahl von Bytes.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
      <param name="dataOffset">Der Index in der Zeile, an dem der Lesevorgang beginnen soll.</param>
      <param name="buffer">Der Puffer, in den die Daten kopiert werden sollen.</param>
      <param name="bufferOffset">Der Index im Puffer, an den die Daten kopiert werden.</param>
      <param name="length">Die maximale Anzahl der zu lesenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als ein einzelnes Zeichen ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Liest einen Zeichenstream aus der angegebenen Spalte, beginnend an der durch dataIndex angegebenen Position, in den Puffer, beginnend an der durch bufferIndex angegebenen Position.</summary>
      <returns>Die tatsächlich gelesene Anzahl von Zeichen.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
      <param name="dataOffset">Der Index in der Zeile, an dem der Lesevorgang beginnen soll.</param>
      <param name="buffer">Der Puffer, in den die Daten kopiert werden sollen.</param>
      <param name="bufferOffset">Der Index im Puffer, an den die Daten kopiert werden.</param>
      <param name="length">Die maximale Anzahl der zu lesenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Gibt geschachtelte Leser als <see cref="T:System.Data.Common.DbDataReader" />-Objekte zurück.</summary>
      <returns>Der geschachtelte Reader als <see cref="T:System.Data.Common.DbDataReader" />-Objekte.</returns>
      <param name="i">Die Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Gibt einen geschachtelten <see cref="T:System.Data.Common.DbDataRecord" /> zurück.</summary>
      <returns>Die geschachtelten Datensatzdaten.</returns>
      <param name="i">Die Anzahl der zurückzugebenden DbDataRecord.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Ruft den Namen des Datentyps der angegebenen Spalte ab.</summary>
      <returns>Der Name des Datentyps.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als <see cref="T:System.DateTime" />-Objekt ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Gibt ein <see cref="T:System.Data.Common.DbDataReader" />-Objekt für die angeforderte Spaltenordnungszahl zurück, das mit einer anbieterspezifischen Implementierung überschrieben werden kann.</summary>
      <returns>Ein Datenleser.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als <see cref="T:System.Decimal" />-Objekt ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als Gleitkommazahl mit doppelter Genauigkeit ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, mit dem die Zeilen im Datenleser durchlaufen werden können.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, mit dem die Zeilen im Datenleser durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Ruft den Datentyp der angegebenen Spalte ab.</summary>
      <returns>Der Datentyp der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als Gleitkommazahl mit einfacher Genauigkeit ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als global eindeutigen Bezeichner (Globally Unique Identifier, GUID) ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als 16-Bit-Ganzzahl mit Vorzeichen ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als 32-Bit-Ganzzahl mit Vorzeichen ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als 64-Bit-Ganzzahl mit Vorzeichen ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Ruft den Namen der Spalte anhand der nullbasierten Spaltenordnungszahl ab.</summary>
      <returns>Der Name der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Ruft bei angegebenem Spaltennamen die Ordnungszahl der Spalte ab.</summary>
      <returns>Die nullbasierte Ordnungszahl der Spalte.</returns>
      <param name="name">Der Name der Spalte.</param>
      <exception cref="T:System.IndexOutOfRangeException">Der angegebene Name ist kein gültiger Spaltenname.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Gibt den anbieterspezifischen Feldtyp der angegebenen Spalte zurück.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Datentyp der angegebenen Spalte beschreibt.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als eine Instanz von <see cref="T:System.Object" /> ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Ruft alle anbieterspezifischen Attributspalten in der Auflistung der aktuellen Zeile ab.</summary>
      <returns>Die Anzahl der Instanzen von <see cref="T:System.Object" /> im Array.</returns>
      <param name="values">Ein Array von <see cref="T:System.Object" />, in das die Attributspalten kopiert werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Gibt eine <see cref="T:System.Data.DataTable" /> zurück, die die Spaltenmetadaten des <see cref="T:System.Data.Common.DbDataReader" /> beschreibt.</summary>
      <returns>Eine <see cref="T:System.Data.DataTable" />, die die Spaltenmetadaten beschreibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als eine Instanz von <see cref="T:System.String" /> ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als eine Instanz von <see cref="T:System.Object" /> ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Füllt ein Array von Objekten mit den Spaltenwerten der aktuellen Zeile auf.</summary>
      <returns>Die Anzahl der Instanzen von <see cref="T:System.Object" /> im Array.</returns>
      <param name="values">Ein Array von <see cref="T:System.Object" />, in das die Attributspalten kopiert werden sollen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>Ruft einen Wert ab, der angibt, ob dieser <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> eine oder mehrere Zeilen enthält.</summary>
      <returns>true, wenn der <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> eine oder mehrere Zeilen enthält, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> geschlossen ist.</summary>
      <returns>true, wenn der <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> geschlossen ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Ruft einen Wert ab, der angibt, ob die Spalte nicht vorhandene oder fehlende Werte enthält.</summary>
      <returns>true, wenn die angegebene Spalte <see cref="T:System.DBNull" /> entspricht, andernfalls false.</returns>
      <param name="ordinal">Die nullbasierte Ordnungszahl der Spalte.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Ruft den Wert der angegebenen Spalte als eine Instanz von <see cref="T:System.Object" /> ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Ruft den Wert der angegebenen Spalte als eine Instanz von <see cref="T:System.Object" /> ab.</summary>
      <returns>Der Wert der angegebenen Spalte.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>Setzt den Datenleser beim Lesen der Ergebnisse von Batchanweisungen auf das nächste Ergebnis.</summary>
      <returns>true, wenn weitere Resultsets vorhanden sind, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>Setzt den Datenleser beim Lesen von Batchanweisungen asynchron auf das nächste Resultset.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält true, wenn mehrere Resultsets vorhanden sind; andernfalls false.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>Setzt den Reader auf den nächsten Datensatz in einem Resultset.</summary>
      <returns>true, wenn weitere Zeilen vorhanden sind, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>Verschiebt den Leser asynchron auf die nächste Zeile des aktuellen Resultsets</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält true, wenn weitere Zeilen vorhanden sind, andernfalls false.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Ruft die Anzahl der durch die Ausführung der SQL-Anweisung geänderten, eingefügten oder gelöschten Zeilen ab.</summary>
      <returns>Die Anzahl der geänderten, eingefügten oder gelöschten Zeilen.Gibt -1 für SELECT-Anweisungen zurück, und 0, wenn keine Zeilen betroffen sind oder die Anweisung fehlgeschlagen ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Ruft die Anzahl der nicht ausgeblendeten Felder im <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> ab.</summary>
      <returns>Die Anzahl der nicht ausgeblendeten Felder.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>Klasse, die einen in EntityCommand verwendeten Parameter darstellt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse mit den Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse unter Verwendung des angegebenen Parameternamens und Datentyps.</summary>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse unter Verwendung des Parameternamens, des Datentyps und der Größe wie angegeben.</summary>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
      <param name="size">Die Größe des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse unter Verwendung der angegebenen Eigenschaften.</summary>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
      <param name="size">Die Größe des Parameters.</param>
      <param name="direction">Einer der <see cref="T:System.Data.ParameterDirection" />-Werte.</param>
      <param name="isNullable">true, um anzugeben, dass der Parameter NULL-Werte akzeptiert, andernfalls false.</param>
      <param name="precision">Die Anzahl von Stellen zur Darstellung des Werts.</param>
      <param name="scale">Die Anzahl der Dezimalstellen, in die der Wert aufgelöst wird.</param>
      <param name="sourceColumn">Der Name der Quellspalte.</param>
      <param name="sourceVersion">Einer der <see cref="T:System.Data.DataRowVersion" />-Werte.</param>
      <param name="value">Der Wert des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse unter Verwendung der angegebenen Eigenschaften.</summary>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
      <param name="size">Die Größe des Parameters.</param>
      <param name="sourceColumn">Der Name der Quellspalte.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>Ruft den <see cref="T:System.Data.DbType" /> des Parameters ab oder legt ihn fest.</summary>
      <returns>Einer der <see cref="T:System.Data.DbType" />-Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>Ruft die Richtung des Parameters ab oder legt diese fest.</summary>
      <returns>Einer der <see cref="T:System.Data.ParameterDirection" />-Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>Ruft den Wert des Parameters, ausgedrückt als EdmType, ab oder legt diesen fest.</summary>
      <returns>Der Typ des Parameters, ausgedrückt als EdmType.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>Ruft einen Wert ab, der angibt, ob der Parameter NULL-Werte akzeptiert, oder legt diesen fest.</summary>
      <returns>true, wenn NULL-Werte akzeptiert werden, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>Ruft den Namen des Entitätsparameters ab oder legt diesen fest.</summary>
      <returns>Der Name des Entitätsparameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>Ruft die Anzahl der Ziffern ab, die zur Darstellung der <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />-Eigenschaft verwendet werden, oder legt diese fest.</summary>
      <returns>Die Anzahl von Stellen zur Darstellung des Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>Setzt den dem <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> zugeordneten Typ zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>Ruft die Anzahl der Dezimalstellen ab, in die <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> aufgelöst wird, oder legt diese fest.</summary>
      <returns>Die Anzahl der Dezimalstellen, in die der Wert aufgelöst wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>Ruft die maximale Größe der Daten innerhalb der Spalte ab oder legt diese fest.</summary>
      <returns>Die maximale Größe der Daten in der Spalte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>Ruft den Namen der Quellspalte ab, die dem <see cref="T:System.Data.DataSet" /> zugeordnet ist und zum Laden oder Zurückgeben des <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> verwendet wird, oder legt diesen fest.</summary>
      <returns>Der Name der Quellspalte, die dem Datensatz zugeordnet ist und zum Laden oder Zurückgeben des Wertes verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Ruft einen Wert ab, der angibt, ob die Quellspalte NULL sein kann, oder legt den Wert fest.</summary>
      <returns>true, wenn die Quellspalte NULL sein kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>Ruft die <see cref="T:System.Data.DataRowVersion" />, die beim Laden des Werts verwendet werden soll, ab oder legt diese fest.</summary>
      <returns>Einer der <see cref="T:System.Data.DataRowVersion" />-Werte.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des Parameters zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des Parameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>Ruft den Wert des Parameters ab oder legt diesen fest.</summary>
      <returns>Der Wert des Parameters.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>Klasse, die eine in EntityCommand verwendete Parameterauflistung darstellt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Fügt der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> das angegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt hinzu.</summary>
      <returns>Ein neues <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt.</returns>
      <param name="value">Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, der der Auflistung hinzugefügt werden soll.</param>
      <exception cref="T:System.ArgumentException">Der im Wertparameter angegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> wurde bereits dieser oder einer anderen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> hinzugefügt.</exception>
      <exception cref="T:System.InvalidCastException">Der übergebene Parameter war kein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.ArgumentNullException">Der value-Parameter ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Fügt der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> das angegebene Objekt hinzu.</summary>
      <returns>Der Index des neuen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekts.</returns>
      <param name="value">Ein <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Fügt der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> einen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem angegebenen Parameternamen und dem Datentyp hinzu.</summary>
      <returns>Ein neues <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Fügt der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> einen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem Parameternamen, dem Datentyp und der Spaltenlänge hinzu.</summary>
      <returns>Ein neues <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="dbType">Einer der <see cref="T:System.Data.DbType" />-Werte.</param>
      <param name="size">Die Spaltenlänge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Fügt ein Array von Werten am Ende der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> hinzu.</summary>
      <param name="values">Die hinzuzufügenden <see cref="T:System.Array" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>Fügt ein Array von <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Werten am Ende der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> hinzu.</summary>
      <param name="values">Die hinzuzufügenden <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Fügt am Ende der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> einen Wert hinzu.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
      <param name="value">Der hinzuzufügende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>Entfernt alle <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekte aus der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> in dieser <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> vorhanden ist.</summary>
      <returns>true, wenn die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> den Wert enthält, andernfalls false.</returns>
      <param name="value">Der <see cref="T:System.Object" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> in dieser <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> vorhanden ist.</summary>
      <returns>true, wenn die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> den Wert enthält, andernfalls false.</returns>
      <param name="parameterName">Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Kopiert alle Elemente der aktuellen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend am angegebenen Index des Ziel-<see cref="T:System.Array" />.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der aktuellen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> kopierten Elemente ist.</param>
      <param name="index">Eine 32-Bit-Ganzzahl, die den Index im <see cref="T:System.Array" /> darstellt, ab dem kopiert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>Kopiert alle Elemente der aktuellen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> in die angegebene <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, beginnend am angegebenen Zielindex.</summary>
      <param name="array">Die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, die das Ziel der aus der aktuellen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> kopierten Elemente ist.</param>
      <param name="index">Eine 32-Bit-Ganzzahl, die den Index im <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> darstellt, ab dem kopiert werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>Ruft eine ganze Zahl ab, die die Anzahl der Elemente in der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> enthält.</summary>
      <returns>Die Anzahl der Elemente in der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> als ganze Zahl.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" /> für die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Ruft die Position des angegebenen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> in der Auflistung ab.</summary>
      <returns>Die nullbasierte Position des angegebenen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, das ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> in der Auflistung ist.Gibt -1 zurück, wenn das Objekt in der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> nicht vorhanden ist.</returns>
      <param name="value">Das zu suchende <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Ruft die Position des angegebenen <see cref="T:System.Object" /> in der Auflistung ab.</summary>
      <returns>Die nullbasierte Position des angegebenen <see cref="T:System.Object" />, das ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> in der Auflistung ist.Gibt -1 zurück, wenn das Objekt in der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> nicht vorhanden ist.</returns>
      <param name="value">Das zu suchende <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Ruft die Position des angegebenen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem angegebenen Namen ab.</summary>
      <returns>Die nullbasierte Position des angegebenen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem angegebenen Namen unter Berücksichtigung von Groß- und Kleinschreibung.Gibt -1 zurück, wenn das Objekt in der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> nicht vorhanden ist.</returns>
      <param name="parameterName">Der Name des zu suchenden <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> unter Berücksichtigung von Groß- und Kleinschreibung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Fügt ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt am angegebenen Index in die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> ein.</summary>
      <param name="index">Der nullbasierte Index, an dem der Wert eingefügt werden soll.</param>
      <param name="value">Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt, das in die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> eingefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Fügt ein <see cref="T:System.Object" /> am angegebenen Index in die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> ein.</summary>
      <param name="index">Der nullbasierte Index, an dem der Wert eingefügt werden soll.</param>
      <param name="value">Ein <see cref="T:System.Object" />, das in die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> eingefügt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> eine feste Größe hat.</summary>
      <returns>Gibt true zurück, wenn die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> eine feste Größe aufweist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> schreibgeschützt ist.</summary>
      <returns>Gibt true zurück, wenn die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> schreibgeschützt ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> synchronisiert ist.</summary>
      <returns>Gibt true zurück, wenn die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> synchronisiert wurde, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> am angegebenen Index ab.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> am angegebenen Index.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem angegebenen Namen ab.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> mit dem angegebenen Namen.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Entfernt den angegebenen <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> aus der Auflistung.</summary>
      <param name="value">Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.InvalidCastException">Der Parameter ist kein <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.SystemException">Der Parameter ist in der Auflistung nicht vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Entfernt den angegebenen Parameter aus der Auflistung.</summary>
      <param name="value">Ein <see cref="T:System.Object" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Entfernt den <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> am angegebenen Index aus der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Objekts.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Entfernt den <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> am angegebenen Parameternamen aus der <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="parameterName">Der Name des zu entfernenden <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>Klasse, die eine Anbieterfactory für den Entitätsclientanbieter darstellt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Gibt eine neue Instanz der Klasse des Anbieters zurück, die die <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />-Klasse implementiert.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Löst eine <see cref="T:System.NotSupportedException" /> aus.Diese Methode wird derzeit nicht unterstützt.</summary>
      <returns>Diese Methode wird derzeit nicht unterstützt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Gibt eine neue Instanz der Klasse des Anbieters zurück, die die <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Klasse implementiert.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Gibt eine neue Instanz der Klasse des Anbieters zurück, die die <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />-Klasse implementiert.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Löst eine <see cref="T:System.NotSupportedException" /> aus.Diese Methode wird derzeit nicht unterstützt.</summary>
      <returns>Diese Methode wird derzeit nicht unterstützt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Gibt eine neue Instanz der Klasse des Anbieters zurück, die die <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />-Klasse implementiert.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Löst eine <see cref="T:System.NotSupportedException" /> aus.Diese Methode wird derzeit nicht unterstützt.</summary>
      <returns>Diese Methode wird derzeit nicht unterstützt.</returns>
      <param name="state">Diese Methode wird derzeit nicht unterstützt.</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>Ein Singleton-Objekt für das Entitätsclientanbieter-Factoryobjekt.Dies bleibt ein öffentliches Feld (keine Eigenschaft), weil DbProviderFactory ein Feld erwartet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Gibt die angeforderte <see cref="T:System.IServiceProvider" />-Klasse zurück.</summary>
      <returns>Eine neue Instanz von <see cref="T:System.IServiceProvider" />.Die unterstützten Typen sind <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> und <see cref="T:System.Data.IEntityAdapter" />.Gibt für jeden anderen Typ NULL (oder Nothing in Visual Basic) zurück.</returns>
      <param name="serviceType">Der zurückzugebende <see cref="T:System.Type" />.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>Klasse, die eine Transaktion für die konzeptionelle Ebene darstellt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>Führt einen Commit der zugrunde liegenden Transaktion aus.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> für diesen <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> ab.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> der zugrunde liegenden Datenquelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>Das Verbindungsobjekt, das dieses Transaktionsobjekt besitzt</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>Bereinigt das Transaktionsobjekt.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Ruft die Isolationsstufe dieser <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.IsolationLevel" />-Aufzählungswert, der die Isolationsstufe der zugrunde liegenden Transaktion darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>Führt einen Rollback für die zugrunde liegende Transaktion aus.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>Ruft die DbTransaction für die zugrunde liegende Anbietertransaktion ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>Stellt die Zuordnungsmetadaten für ein AssociationSet im CS-Space dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialisiert eine neue AssociationSetMapping-Instanz.</summary>
      <param name="associationSet">Der Zuordnungssatz, der zugeordnet werden soll.</param>
      <param name="storeEntitySet">Die Speicherentitätenmenge, die zugeordnet werden soll.</param>
      <param name="containerMapping">Die übergeordnete Containerzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnungsbedingung hinzu.</summary>
      <param name="condition">Die hinzuzufügende Bedingung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>Ruft einen zugeordneten Zuordnungssatz ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>Ruft den enthaltenen Zuordnungstyp ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>Ruft die Eigenschaftenzuordnungsbedingungen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>Ruft die entsprechende Funktionszuordnung ab oder legt diese fest.Kann NULL sein.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnungsbedingung.</summary>
      <param name="condition">Die zu entfernende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>Ruft die Eigenschaftenzuordnung auf der Quellenseite ab oder legt diese fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>Ruft die Speicherentitätenmenge ab, die zugeordnet werden soll.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>Ruft die Eigenschaftenzuordnung auf der Zielseite ab oder legt diese fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>Beschreibt Änderungsfunktionszuordnungen für einen Zuordnungssatz.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Initialisiert eine neue <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" />-Instanz.</summary>
      <param name="associationSet">Ein Zuordnungssatz.</param>
      <param name="deleteFunctionMapping">Eine Löschfunktionszuordnung.</param>
      <param name="insertFunctionMapping">Eine Einfügefunktionszuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>Ruft den Zuordnungssatz ab.</summary>
      <returns>Der Zuordnungssatz.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Ruft die Löschfunktionszuordnung ab.</summary>
      <returns>Die Löschfunktionszuordnung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>Ruft die Einfügefunktionszuordnung ab.</summary>
      <returns>Die Einfügefunktionszuordnung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>Konvertiert den Wert dieser Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Die Zeichenfolgendarstellung des Wertes dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>Stellt die Zuordnungsmetadaten für einen Zuordnungstyp im CS-Space dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Erstellt eine AssociationTypeMapping-Instanz.</summary>
      <param name="associationSetMapping">Die AssociationSetMapping, die diese AssociationTypeMapping enthält.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>Ruft die AssociationSetMapping ab, die diese AssociationTypeMapping enthält.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>Ruft den Zuordnungstyp ab, der zugeordnet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>Ruft das einzelne Zuordnungsfragment ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>Zuordnungsmetadaten für komplexe Eigenschaften.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Erstellt ein neues Objekt der komplexen Eigenschaftenzuordnung.</summary>
      <param name="property">Das MemberMetadata-Objekt, welches diesen komplexe Member darstellt</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Fügt eine Typzuordnung hinzu, die dem geschachtelten komplexen Typen entspricht.</summary>
      <param name="typeMapping">Die Zuordnung des komplexen Typs, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Entfernt eine Typzuordnung, die dem geschachtelten komplexen Typen entspricht.</summary>
      <param name="typeMapping">Die Zuordnung des komplexen Typs, die entfernt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>Ruft eine schreibgeschützte Auflistung von Typzuordnungen ab, die den geschachtelten komplexen Typen entsprechen.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>Zuordnungsmetadaten für komplexe Typen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Erstellt eine ComplexTypeMapping-Instanz.</summary>
      <param name="complexType">Der zuzuordnende ComplexType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnungsbedingung hinzu.</summary>
      <param name="condition">Die hinzuzufügende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnung hinzu.</summary>
      <param name="propertyMapping">Die hinzuzufügende Eigenschaftenzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>Ruft den zuzuordnenden ComplexType ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungsbedingungen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungen ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnungsbedingung.</summary>
      <param name="condition">Die zu entfernende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnung.</summary>
      <param name="propertyMapping">Die zu entfernende Eigenschaftenzuordnung.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>Zuordnungsmetadaten für bedingte Eigenschaftenzuordnung für einen Typ.Bedingte Eigenschaftenzuordnung gibt eine Bedingung entweder auf der C-Seiteneigenschaft oder der S-Seiteneigenschaft an.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>Ruft eine EdmProperty ab, die die zugeordnete Spalte angibt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>Ruft eine EdmProperty ab, die die zugeordnete Eigenschaft angibt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>Zuordnungsmetadaten für End-Eigenschaft einer Zuordnung.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>Erstellt eine Zuordnung für die End-Eigenschaftenzuordnung.</summary>
      <param name="associationEnd">Ein AssociationEndMember, das das Zuordnungsende angibt, das zugeordnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Fügt eine untergeordnete Zuordnung zur Eigenschaftenspalte hinzu.</summary>
      <param name="propertyMapping">Ein ScalarPropertyMapping-Element, das die Zuordnung zur Eigenschaftenspalte angibt, die hinzugefügt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>Ruft ein AssociationEndMember ab, das das zugeordnete Zuordnungsende angibt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>Ruft eine ReadOnlyCollection der ScalarPropertyMapping ab, die untergeordnete Elemente dieser Zuordnung für die End-Eigenschaftenzuordnung angibt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Entfernt eine untergeordnete Zuordnung zur Eigenschaftenspalte.</summary>
      <param name="propertyMapping">Ein ScalarPropertyMapping-Element, das die Zuordnung zur Eigenschaftenspalte angibt, die entfernt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>Stellt die Zuordnungsmetadaten für die EntityContainer-Zuordnung im CS-Space dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" />-Klasse.</summary>
      <param name="conceptualEntityContainer">Der konzeptionelle Entitätencontainer, der zugeordnet werden soll.</param>
      <param name="storeEntityContainer">Der Speicherentitätencontainer, der zugeordnet werden soll.</param>
      <param name="mappingItemCollection">Die übergeordnete Zuordnung der Elementauflistung.</param>
      <param name="generateUpdateViews">Kennzeichen, das angibt, ob Updatesichten generiert werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Fügt eine Funktionsimportzuordnung hinzu.</summary>
      <param name="functionImportMapping">Die hinzuzufügende Funktionsimportzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Fügt eine Zuordnungssatzzuordnung hinzu.</summary>
      <param name="setMapping">Die hinzuzufügende Zuordnungssatzzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Fügt eine Entitätenmengenzuordnung hinzu.</summary>
      <param name="setMapping">Die hinzuzufügende Entitätenmengenzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>Ruft die Zuordnungssatzzuordnungen ab.</summary>
      <returns>Die Zuordnungssatzzuordnungen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>Ruft den Typ des Elements ab.</summary>
      <returns>Der Typ des Elements.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>Ruft den konzeptionellen Entitätencontainer ab.</summary>
      <returns>Der konzeptionelle Entitätencontainer.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>Ruft die Entitätenmengenzuordnung ab.</summary>
      <returns>Die Entitätenmengenzuordnungen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>Ruft die Funktionsimportzuordnungen ab.</summary>
      <returns>Die Funktionsimportzuordnungen.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>Ruft ein Kennzeichen ab, das angibt, ob die Updatesichten generiert werden sollen oder nicht.</summary>
      <returns>true, um die Updatesichten zu generieren; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>Ruft die übergeordnete Zuordnung der Elementauflistung ab.</summary>
      <returns>Die übergeordnete Zuordnung der Elementauflistung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Entfernt eine Funktionsimportzuordnung.</summary>
      <param name="functionImportMapping">Die zu entfernende Funktionsimportzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Entfernt eine Zuordnungssatzzuordnung.</summary>
      <param name="setMapping">Die zu entfernende Zuordnungssatzzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Entfernt eine Zuordnungssatzzuordnung.</summary>
      <param name="setMapping">Die zu entfernende Zuordnungssatzzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>Ruft den Speicherentitätencontainer ab.</summary>
      <returns>Der Speicherentitätencontainer.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>Stellt die Zuordnungsmetadaten für eine Erweiterung im CS-Space dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>Ruft die übergeordnete Containerzuordnung ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>Ruft die Abfrageansicht ab, die dieser Zuordnung zugeordnet ist, oder legt sie fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>Stellt die Zuordnungsmetadaten für ein EntitySet im CS-Space dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialisiert eine neue EntitySetMapping-Instanz.</summary>
      <param name="entitySet">Die Entitätenmenge, die zugeordnet werden soll.</param>
      <param name="containerMapping">Die übergeordnete Containerzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Fügt eine Funktionszuordnung hinzu.</summary>
      <param name="modificationFunctionMapping">Die hinzuzufügende Funktionszuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Fügt eine Typzuordnung hinzu.</summary>
      <param name="typeMapping">Die hinzuzufügende Typzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>Ruft die Entitätenmenge ab, die zugeordnet werden soll.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>Ruft die enthaltenen Typzuordnungen der Entität ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>Ruft die entsprechenden Funktionszuordnungen ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Entfernt eine Funktionszuordnung.</summary>
      <param name="modificationFunctionMapping">Die zu entfernende Funktionszuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Entfernt eine Typzuordnung.</summary>
      <param name="typeMapping">Die zu entfernende Typzuordnung.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>Zuordnungsmetadaten für Entitätstyp.Wenn ein EntitySet Entitäten von mehr als einem Typ darstellt, liegt mehr als ein EntityTypeMapping für ein EntitySet vor (wenn beispielsweise die PersonSet-Entitätenerweiterung die Entitäten der Typen Person und Customer darstellt, liegen unter der Zuordnung für PersonSet zwei EntityType-Zuordnungen vor).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Erstellt eine EntityTypeMapping-Instanz.</summary>
      <param name="entitySetMapping">Die EntitySetMapping, die diese EntityTypeMapping enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Fügt ein Zuordnungsfragment hinzu.</summary>
      <param name="fragment">Das hinzuzufügende Zuordnungsfragment.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Fügt eine Entitätstyphierarchie der Zuordnung hinzu.Diese Hierarchie wird durch den angegebenen Stammentitätstyp dargestellt.</summary>
      <param name="type">Der hinzuzufügende Stamm-EntityType der Hierarchie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Fügt der Zuordnung einen Entitätstyp hinzu.</summary>
      <param name="type">Der hinzuzufügende EntityType.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>Ruft die EntitySetMapping ab, die diese EntityTypeMapping enthält.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>Ruft den einzelnen EntityType ab, der zugeordnet wird.Löst bei Hierarchientypzuordnung eine Ausnahme aus.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>Ruft die zugeordneten Entitätstypen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>Ruft eine schreibgeschützte Auflistung der Zuordnungsfragmente ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>Ruft ein Flag ab, das angibt, ob dies eine Typhierarchienzuordnung ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>Ruft die zugeordneten Basistypen für eine Hierarchienzuordnung ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Entfernt ein Zuordnungsfragment.</summary>
      <param name="fragment">Das zu entfernende Zuordnungsfragment.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Entfernt eine Entitätstyphierarchie aus der Zuordnung.Diese Hierarchie wird durch den angegebenen Stammentitätstyp dargestellt.</summary>
      <param name="type">Der zu entfernende Stamm-EntityType der Hierarchie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Entfernt einen Entitätstyp aus der Zuordnung.</summary>
      <param name="type">Der zu entfernende EntityType.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>Beschreibt die Änderungsfunktionszuordnungen für einen Entitätstyp innerhalb einer Entitätenmenge.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />-Klasse.</summary>
      <param name="entityType">Der EDM-Entitätstyp.</param>
      <param name="deleteFunctionMapping">Die Zuordnung für die Löschung einer Funktion.</param>
      <param name="insertFunctionMapping">Die Zuordnung für die Einfügung einer Funktion.</param>
      <param name="updateFunctionMapping">Die Zuordnung für die Aktualisierung einer Funktion.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Ruft die Zuordnung für die Löschung einer Funktion ab.</summary>
      <returns>Die Zuordnung für die Löschung einer Funktion.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>Ruft den EDM-Entitätstyp ab.</summary>
      <returns>Der EDM-Entitätstyp.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>Ruft die Zuordnung für die Einfügung einer Funktion ab.</summary>
      <returns>Die Zuordnung für die Einfügung einer Funktion.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />-Objekts zurück.</summary>
      <returns>Die Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />-Objekts.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>Ruft die Zuordnung für die Aktualisierung einer Funktion ab.</summary>
      <returns>Die Zuordnung für die Aktualisierung einer Funktion.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>Basisklasse für den zur Entwurfszeit erstellten Typ zum Speichern der generierten Ansichten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Ruft den Namen von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> ab oder legt diesen fest.</summary>
      <returns>Der Containername.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Gibt das Schlüssel-Wert-Paar am angegebenen Index zurück, das die Ansicht und deren Schlüssel enthält.</summary>
      <returns>Das Schlüssel-Wert-Paar am angegebenen Index, das die Ansicht und deren Schlüssel enthält.</returns>
      <param name="index">Der Index der Ansicht.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Der Hashwert von Ansichten.</summary>
      <returns>Hashwert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Hashwert.</summary>
      <returns>Hashwert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Ruft <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> im Speicherschema ab oder legt dies fest.</summary>
      <returns>Der Containername.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>Ruft die Ansichtsanzahl ab oder legt diese fest.</summary>
      <returns>Ansichtsanzahl.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>Attribut, um die Assemblys zu kennzeichnen, die den Typ erstellter Sichten enthalten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" />-Klasse.</summary>
      <param name="viewGenerationType">Der Typ der Sicht.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Ruft T:System.Type der Sicht ab.</summary>
      <returns>Der T:System.Type der Sicht.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>Stellt eine komplexe Typzuordnung für ein Funktionsimportergebnis dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>Initialisiert eine neue FunctionImportComplexTypeMapping-Instanz.</summary>
      <param name="returnType">Der Rückgabetyp.</param>
      <param name="properties">Die Eigenschaftenzuordnungen für den Ergebnistyp eines Funktionsimports.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>Ruft den Rückgabetyp ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>Stellt eine Funktionsimport-Entitätstypzuordnung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>Initialisiert eine neue FunctionImportEntityTypeMapping-Instanz.</summary>
      <param name="isOfTypeEntityTypes">Die Entitätstypen auf der untersten Ebene der Typhierarchien, die zugeordnet werden sollen.</param>
      <param name="entityTypes">Die Entitätstypen, die zugeordnet werden sollen.</param>
      <param name="properties">Die Eigenschaftenzuordnungen für die Ergebnistypen eines Funktionsimports.</param>
      <param name="conditions">Die Zuordnungsbedingungen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>Ruft die Zuordnungsbedingungen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>Ruft die Entitätstypen ab, die zugeordnet werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>Ruft die Entitätstypen auf der untersten Ebene der Hierarchien ab, die zugeordnet werden.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>Stellt ein Zuordnungsbedingung für ein Funktionsimportergebnis dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>Ruft den Namen der Spalte ab, in der die Bedingung ausgewertet wurde.</summary>
      <returns>Der Name der Spalte, die zur Auswertung der Bedingung verwendet wurde.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>Konvertiert den Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>Stellt eine Zuordnungsbedingung für ein Funktionsimportergebnis dar, das durch eine Überprüfung auf NULL oder nicht NULL ausgewertet wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue FunctionImportEntityTypeMappingConditionIsNull-Instanz.</summary>
      <param name="columnName">Der Name der Spalte, die zur Auswertung der Bedingung verwendet wurde.</param>
      <param name="isNull">Kennzeichen, das angibt, ob eine NULL- oder Nicht-NULL-Überprüfung durchgeführt wird.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>Ruft ein Kennzeichen ab, das angibt, ob eine NULL- oder Nicht-NULL-Überprüfung durchgeführt wird.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>Stellt eine Zuordnungsbedingung für das Ergebnis eines Funktionsimport dar, der durch Vergleich mit einem angegebenen Wert ausgewertet wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue FunctionImportEntityTypeMappingConditionValue-Instanz.</summary>
      <param name="columnName">Der Name der Spalte, die zur Auswertung der Bedingung verwendet wurde.</param>
      <param name="value">Der zu vergleichende Wert.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>Ruft den für den Vergleich verwendeten Wert ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>Stellt eine Zuordnung zwischen einem Modellfunktionsimport und einer zusammensetzbaren oder nicht zusammensetzbaren Speicherfunktion dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>Ruft die Modellfunktion ab (oder Quelle der Zuordnung)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>Ruft die Speicherfunktion ab (oder Ziel der Zuordnung)</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>Stellt eine Zuordnung eines Modellfunktionsimports zu einer zusammensetzbaren Speicherfunktion dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialisiert eine neue FunctionImportMappingComposable-Instanz.</summary>
      <param name="functionImport">Der Modellfunktionsimport.</param>
      <param name="targetFunction">Die zusammensetzbare Speicherfunktion.</param>
      <param name="resultMapping">Die Ergebniszuordnung für den Funktionsimport.</param>
      <param name="containerMapping">Die übergeordnete Containerzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>Die Ergebniszuordnung für den Funktionsimport.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>Stellt eine Zuordnung eines Modellfunktionsimports zu einer nicht zusammensetzbaren Speicherfunktion dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialisiert eine neue FunctionImportMappingNonComposable-Instanz.</summary>
      <param name="functionImport">Der Modellfunktionsimport.</param>
      <param name="targetFunction">Die nicht zusammensetzbare Speicherfunktion.</param>
      <param name="resultMappings">Die Ergebniszuordnungen für den Funktionsimport.</param>
      <param name="containerMapping">Die übergeordnete Containerzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>Ruft die Ergebniszuordnungen für den Funktionsimport ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>Stellt eine Ergebniszuordnung für einen Funktionsimport dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Fügt eine Typzuordnung hinzu.</summary>
      <param name="typeMapping">Die hinzuzufügende Typzuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Entfernt eine Typzuordnung.</summary>
      <param name="typeMapping">Die zu entfernende Typzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>Ruft die Typzuordnungen ab.</summary>
      <returns>Die Typzuordnungen.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>Basisklasse für die Zuordnung einer Eigenschaft eines Funktionsimport-Rückgabetyps.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>Ordnet eine Eigenschaft eines Funktionsimport-Rückgabetyps einer Tabellenspalte zu.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue FunctionImportReturnTypeScalarPropertyMapping-Instanz.</summary>
      <param name="propertyName">Der zugeordnete Eigenschaftsname.</param>
      <param name="columnName">Der zugeordnete Name der Spalte.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>Ruft den zugeordneten Namen der Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>Ruft den zugeordneten Eigenschaftsnamen ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>Gibt die strukturelle Typzuordnung eines Funktionsimports an.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>Ruft die Eigenschaftenzuordnungen für den Ergebnistyp eines Funktionsimports ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>Gibt eine Zuordnungsbedingung an, die durch Überprüfung, ob der Wert einer Eigenschaft/Spalte NULL oder nicht NULL ist, ausgewertet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>Erstellt eine IsNullConditionMapping-Instanz.</summary>
      <param name="propertyOrColumn">Eine EdmProperty, die eine Eigenschaft oder Spalte angibt.</param>
      <param name="isNull">Ein boolescher Wert, der angibt, ob eine NULL- oder Nicht-NULL-Überprüfung durchgeführt werden kann.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>Ruft einen booleschen Wert ab, der angibt, ob eine Bedingung durch Durchführen einer NULL-Überprüfung oder einer Nicht-NULL-Überprüfung ausgewertet wurde.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>Stellt die grundlegende Elementklasse für alle Zuordnungsmetadaten dar.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>Stellt die Metadaten für das Zuordnungsfragment dar.Eine Menge an Zuordnungsfragmenten bildet die Set-Zuordnungen (EntitySet, AssociationSet oder CompositionSet). Jedes MappingFragment stellt eine Zuordnung für diese Eigenschaften eines Typs bereit, der einer einzelnen Tabelle zugeordnet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>Erstellt eine MappingFragment-Instanz.</summary>
      <param name="storeEntitySet">Das EntitySet, das der Tabelle bzw. Sicht entspricht, die zugeordnet wird.</param>
      <param name="typeMapping">Das TypeMapping, das dieses MappingFragment enthält.</param>
      <param name="makeColumnsDistinct">Kennzeichen, das angibt, ob 'DISTINCT' beim Generieren von Abfragen eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnungsbedingung hinzu.</summary>
      <param name="condition">Die hinzuzufügende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnung hinzu.</summary>
      <param name="propertyMapping">Die hinzuzufügende Eigenschaftenzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungsbedingungen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>Ruft ein Kennzeichen ab, das angibt, ob 'DISTINCT' beim Generieren von Abfragen eingeschlossen werden soll.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungen ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnungsbedingung.</summary>
      <param name="condition">Die zu entfernende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnung.</summary>
      <param name="propertyMapping">Die zu entfernende Eigenschaftenzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>Ruft das EntitySet ab, das der Tabelle bzw. Sicht entspricht, die zugeordnet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>Ruft das TypeMapping ab, das dieses MappingFragment enthält.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>Stellt eine Basisklasse für Elemente im Zuordnungsraum (DataSpace.CSSpace) dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Klasse zur Darstellung einer Zuordnungselementeauflistung im EDM-Space.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>Beschreibt die Änderungsfunktionsbindung für die Änderungsverarbeitung von Entitäten oder Zuordnungen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" />-Klasse.</summary>
      <param name="entitySet">Die Entitätenmenge oder der Zuordnungssatz.</param>
      <param name="entityType">Der Entitäts- oder Zuordnungstyp.</param>
      <param name="function">Die Metadaten der Funktion, an die gebunden werden soll.</param>
      <param name="parameterBindings">Die Bindungen für Funktionsparameter.</param>
      <param name="rowsAffectedParameter">Der Ausgabeparameter, der die Anzahl der betroffenen Zeilen erzeugt.</param>
      <param name="resultBindings">Die Bindungen für die Ergebnisse der Funktionsauswertung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>Ruft Metadaten der Funktion ab, an die gebunden werden soll.</summary>
      <returns>Die Metadaten der Funktion, an die gebunden werden soll.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>Ruft Bindungen für Funktionsparameter ab.</summary>
      <returns>Die Bindungen für Funktionsparameter.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>Ruft Bindungen für die Ergebnisse der Funktionsauswertung ab.</summary>
      <returns>Die Bindungen für die Ergebnisse der Funktionsauswertung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>Ruft den Ausgabeparameter ab, der die Anzahl der betroffenen Zeilen erzeugt.Ist möglicherweise NULL.</summary>
      <returns>Der Ausgabeparameter, der die Anzahl der betroffenen Zeilen erzeugt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>Konvertiert den Wert dieser Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>Beschreibt den Speicherort eines Elements in einer Entität oder Zuordnungstypstruktur.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" />-Klasse.</summary>
      <param name="members">Die Elemente auf dem Pfad vom Endpunkt (dem gebundenen Element) zum Stamm der Struktur.</param>
      <param name="associationSet">Der Zuordnungssatz, zu dem über dieses Element navigiert wird.Wenn der Wert NULL ist, handelt es sich nicht um den Navigationspfad eines Elements.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>Ruft den Zuordnungssatz ab, zu dem über dieses Element navigiert wird.Wenn der Wert NULL ist, handelt es sich nicht um den Navigationspfad eines Elements.</summary>
      <returns>Der Zuordnungssatz, zu dem über dieses Element navigiert wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>Ruft die Elemente auf dem Pfad vom Endpunkt (dem gebundenen Element) zum Stamm der Struktur ab.</summary>
      <returns>Die Elemente auf dem Pfad vom Endpunkt (dem gebundenen Element) zum Stamm der Struktur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>Konvertiert den Wert dieser Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung des Wertes dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>Stellt die Bindung eines Änderungsfunktionsparameters an einen Member der bearbeiteten Entität oder Zuordnung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" />-Klasse.</summary>
      <param name="parameter">Der Parameter, der den Wert verwendet.</param>
      <param name="memberPath">Der Pfad zu dem Entitäts- oder Zuordnungsmember, das den Wert definiert.</param>
      <param name="isCurrent">true, um den aktuellen oder den ursprünglichen Memberwert zu binden, andernfalls false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>Ruft ein Flag ab, das angibt, ob der aktuelle oder der ursprüngliche Memberwert gebunden ist.</summary>
      <returns>true, wenn der aktuelle oder der ursprüngliche Memberwert gebunden ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>Ruft den Pfad zu dem Entitäts- oder Zuordnungsmember ab, das den Wert definiert.</summary>
      <returns>Der Pfad zu dem Entitäts- oder Zuordnungsmember, das den Wert definiert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>Ruft den Parameter ab, der den Wert verwendet.</summary>
      <returns>Der Parameter, der den Wert verwendet.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>Konvertiert den Wert dieser Instanz mithilfe des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Die Zeichenfolgendarstellung des Wertes dieser Instanz wie durch das Format angegeben.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>Definiert eine Bindung von einer genannten Resultset-Spalte zu einem Member, das den Wert verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" />-Klasse.</summary>
      <param name="columnName">Der Name der Spalte, die von dem Funktions-Resultset gebunden werden soll.</param>
      <param name="property">Die Eigenschaft, die für die Entität festgelegt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>Ruft den Namen der Spalte ab, die von dem Funktions-Resultset gebunden werden soll.</summary>
      <returns>Der Name der Spalte, die von dem Funktions-Resultset gebunden werden soll.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>Ruft die Eigenschaft ab, die für die Entität festgelegt werden soll.</summary>
      <returns>Die Eigenschaft, die für die Entität festgelegt werden soll.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>Konvertiert den Wert dieser Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung des Wertes dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>Zuordnungsmetadaten für alle Typen von Eigenschaftenzuordnungen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>Ruft eine EdmProperty ab, die die zugeordnete Eigenschaft angibt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>Zuordnungsmetadaten für skalare Eigenschaften.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Erstellt eine Zuordnung zwischen einer einfachen Eigenschaft und einer Spalte.</summary>
      <param name="property">Die Eigenschaft, die zugeordnet werden soll.</param>
      <param name="column">Die Spalte, die zugeordnet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>Ruft eine EdmProperty ab, die die zugeordnete Spalte angibt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>Stellt eine Auflistung von Elementen am Speicherzuordnungs- (CS-Zuordnungs-)Platz dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> und XML-Reader.</summary>
      <param name="edmCollection">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, die diese Zuordnung verwenden soll.</param>
      <param name="storeCollection">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, die diese Zuordnung verwenden soll.</param>
      <param name="xmlReaders">Die XML-Reader, die von dieser Zuordnung verwendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, und einer Auflistung von Zeichenfolgen, die die Pfade der Metadatendateien angeben.</summary>
      <param name="edmCollection">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, die diese Zuordnung verwenden soll.</param>
      <param name="storeCollection">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, die diese Zuordnung verwenden soll.</param>
      <param name="filePaths">Die Dateipfade, die diese Zuordnung verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>Berechnet einen Hashwert für die einzige Containerzuordnung in der Auflistung.</summary>
      <returns>Eine Zeichenfolge, die den berechneten Hashwert angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>Berechnet einen Hashwert für die Containerzuordnung, die durch die Namen der zugeordneten Container angegeben wird.</summary>
      <returns>Eine Zeichenfolge, die den berechneten Hashwert angibt.</returns>
      <param name="conceptualModelContainerName">Der Name eines Containers im konzeptionellen Modell.</param>
      <param name="storeModelContainerName">Der Name eines Containers im Speichermodell.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Erstellt eine <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Die <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" />-Instanz, wenn keine Fehler festgestellt wurden.Andernfalls null.</returns>
      <param name="edmItemCollection">Die zuzuordnende EDM-Metadatenauflistung.Darf nicht null sein.</param>
      <param name="storeItemCollection">Die zuzuordnende Speichermetadatenauflistung.Darf nicht null sein.</param>
      <param name="xmlReaders">Die zu ladenden MSL-Artefakte.Darf nicht null sein.</param>
      <param name="filePaths">Die Pfade zu MSL-Artefakten.Wird in Fehlermeldungen verwendet.Kann null sein. In diesem Fall wird der Basis-URI von XmlReader als Pfad verwendet.</param>
      <param name="errors">Die beim Laden erkannte Fehlerauflistung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Erstellt ein Wörterbuch mit (Extent, generierte Sicht) für die einzige Containerzuordnung in der Auflistung.</summary>
      <returns>Ein Wörterbuch mit (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />), das die generierten Sichten angibt.</returns>
      <param name="errors">Eine Liste, die potenzielle Fehler anzeigt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Erstellt ein Wörterbuch mit (Extent, generierte Sicht) für eine Containerzuordnung, die durch die Namen der zugeordneten Container angegeben wird.</summary>
      <returns>Ein Wörterbuch mit (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />), das die generierten Sichten angibt.</returns>
      <param name="conceptualModelContainerName">Der Name eines Containers im konzeptionellen Modell.</param>
      <param name="storeModelContainerName">Der Name eines Containers im Speichermodell.</param>
      <param name="errors">Eine Liste, die potenzielle Fehler anzeigt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>Ruft die Version ab, die diese <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> darstellt.</summary>
      <returns>Die Version dieser <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>Ruft eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> ab oder legt diese fest, um <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />-Instanzen zu erstellen, die zum Abrufen vorab generierter Zuordnungssichten verwendet werden.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> zur Erstellung von <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />-Instanzen, die zum Abrufen vorab generierter Zuordnungssichten verwendet werden.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>Gibt eine strukturelle Typzuordnung an.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnungsbedingung hinzu.</summary>
      <param name="condition">Die hinzuzufügende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Fügt eine Eigenschaftenzuordnung hinzu.</summary>
      <param name="propertyMapping">Die hinzuzufügende Eigenschaftenzuordnung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungsbedingungen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>Ruft eine schreibgeschützte Auflistung von Eigenschaftenzuordnungen ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnungsbedingung.</summary>
      <param name="condition">Die zu entfernende Eigenschaftenzuordnungsbedingung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Entfernt eine Eigenschaftenzuordnung.</summary>
      <param name="propertyMapping">Die zu entfernende Eigenschaftenzuordnung.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>Stellt die Zuordnungsmetadaten für eine Typzuordnung in CS-Leerzeichen dar.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>Gibt eine Zuordnungsbedingung an, die durch einen Vergleich zwischen dem Wert einer Eigenschaft oder Spalte mit einem angegebenen Wert ausgewertet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>Erstellt eine ValueConditionMapping-Instanz.</summary>
      <param name="propertyOrColumn">Eine EdmProperty, die eine Eigenschaft oder Spalte angibt.</param>
      <param name="value">Ein Objekt, das den Wert angibt, mit dem verglichen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>Ruft ein Objekt ab, das den Wert angibt, gegen den geprüft werden soll.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>Stellt ein Ende eines Zuordnungstyps dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte AssociationEndMember-Instanz.</summary>
      <returns>Die neu erstellte AssociationEndMember-Instanz.</returns>
      <param name="name">Der Name des Endes des Zuordnungsendelements.</param>
      <param name="endRefType">Der Verweistyp für das Ende.</param>
      <param name="multiplicity">Die Multiplizität des Endes.</param>
      <param name="deleteAction">Kennzeichen, das das Löschverhalten des Endes anzeigt.</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Name ist NULL oder leer.</exception>
      <exception cref="T:System.ArgumentNullException">Der angegebene Verweistyp ist NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>Klasse zur Darstellung eines Zuordnungssatzes.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Ruft die Enden dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Enden dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte AssociationSet-Instanz aus den angegebenen Parametern.</summary>
      <returns>Die neu erstellte AssociationSet-Instanz.</returns>
      <param name="name">Der Name des Zuordnungssatzes.</param>
      <param name="type">Der Zuordnungstyp der Elemente im Zuordnungssatz.</param>
      <param name="sourceSet">Die Entitätenmenge für das Quellzuordnungssatz-Ende.</param>
      <param name="targetSet">Die Entitätenmenge für das Zielzuordnungssatz-Ende.</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Name ist NULL oder leer.</exception>
      <exception cref="T:System.ArgumentNullException">Der angegebene Zuordnungstyp ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Der Entitätstyp an einem Ende des angegebenen Zuordnungstyps stimmt nicht mit dem Entitätstyp des entsprechenden Entitätenmengenendes überein.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>Ruft die zu diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> gehörende Zuordnung ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />-Objekt, das die zu <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> gehörende Zuordnung darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>Klasse, die ein AssociationSet-Ende darstellt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Ruft den End-Member ab, dem dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />-Objekt entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />-Objekt, das den End-Member darstellt, dem dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />-Objekt entspricht.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Ruft die Entitätenmenge ab, auf die von dieser End-Rolle verwiesen wird.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt, das die Entitätenmenge darstellt, auf die diese End-Rolle verweist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Ruft den Namen von End für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> ab.</summary>
      <returns>Der Name von End für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Ruft einen übergeordneten Zuordnungssatz dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />-Objekt, das den übergeordneten Zuordnungssatz dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Ruft den Namen der End-Rolle für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> ab.</summary>
      <returns>Der Name der End-Rolle für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Gibt den Namen der End-Rolle für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> zurück.</summary>
      <returns>Der Name der End-Rolle für dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>Beschreibt eine Zuordnung/Beziehung zwischen zwei Entitäten im konzeptionellen Modell oder eine Fremdschlüsselbeziehung zwischen zwei Tabellen im Speichermodell.Möglicherweise ist im konzeptionellen Modell in der abhängigen Klasse eine Fremdschlüsseleigenschaft definiert.Wenn ein Fremdschlüssel definiert ist, ist die <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" />-Eigenschaft true, und die <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" />-Eigenschaft enthält Details zu den Fremdschlüsseln.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Ruft die Liste von Enden für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Enden für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>Ruft die referenzielle Einschränkung ab oder legt sie fest.</summary>
      <returns>Die referenzielle Einschränkung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte AssociationType-Instanz aus den angegebenen Parametern.</summary>
      <returns>Die neu erstellte AssociationType-Instanz.</returns>
      <param name="name">Der Name des Zuordnungstyps.</param>
      <param name="namespaceName">Der Namespace des Zuordnungstyps.</param>
      <param name="foreignKey">Kennzeichen, das eine Fremdschlüsselbeziehung (Foreign Key, FK) angibt.</param>
      <param name="dataSpace">Der Datenbereich für den Zuordnungstyp.</param>
      <param name="sourceEnd">Das Quellzuordnungsend-Element.</param>
      <param name="targetEnd">Das Zielzuordnungsende-Element.</param>
      <param name="constraint">Eine referenzielle Einschränkung.</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Name ist NULL oder leer.</exception>
      <exception cref="T:System.ArgumentException">Der angegebene Namespace ist NULL oder leer.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Ruft den booleschen Eigenschaftswert ab, der angibt, ob die Spalte ein Fremdschlüssel ist.</summary>
      <returns>Ein boolescher Wert, der angibt, ob die Spalte ein Fremdschlüssel ist.Bei true ist die Spalte ein Fremdschlüssel.Bei false (Standard) ist die Spalte kein Fremdschlüssel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Ruft die Liste der Einschränkungen für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Einschränkungen für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>Liste aller integrierten Typen.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Typart Zuordnung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Art AssociationSet Kind</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Art AssociationSetEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Typart Zuordnung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Art Auflistung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Art Auflistungstyp</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Art komplexer Typ</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Art Dokumentation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Art EdmFunctions</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Typart EdmMember</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Typart EdmProperty</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Typart Edm</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Art Entitätencontainer</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Art Entitätenmenge</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Art EntitySetBase</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Typart Entität</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Art Entitätstypbasis</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Art Aufzählungselement</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Typart Aufzählung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Art Facet</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Art Funktionsparameter</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Typart globales Element</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Typart Metadatenelement</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Art Metadateneigenschaft</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Art Navigationseigenschaft</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Typart DeleteActions</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Art Parametermodus</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Art primitiver Typ</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Art primitive Typart</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Typart ProviderManifest</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Typart referenzielle Einschränkung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Typart Ref</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Typart RelationshipEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Typart Beziehungsmultiplizität</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Typart Beziehungsmenge</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Typ Beziehung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Typart Zeile</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Typart einfach</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Typart strukturell</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Art Typinformationen</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>Art der Auflistung (auf Eigenschaften angewendet)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>Auflistung verfügt über eine Behältersemantik (unsortiert, Duplikate sind zulässig).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>Auflistung verfügt über eine Listensemantik (Reihenfolge ist deterministisch, Duplikate sind zulässig).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>Eigenschaft ist keine Auflistung.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Stellt den EDM-Auflistungstyp dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Ruft die Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Klasse ab, die den Typ des Elements enthält, das dieses aktuelle <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />-Objekt sowie Facets für diesen Typ enthält.</summary>
      <returns>Die Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Klasse, die den Typ des Elements enthält, das dieses aktuelle <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />-Objekt sowie Facets für diesen Typ enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Stellt den komplexen EDM-Typ dar.Kann zum Konfigurieren von komplexen Typen aus einer Konvention auf Grundlage eines konzeptionellen Bereichsmodells verwendet werden.Komplexe Typen werden im Speichermodell nicht unterstützt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine neue Instanz des <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />-Typs.</summary>
      <returns>Eine neue Instanz des <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />-Typs.</returns>
      <param name="name">Der Name des komplexen Typs.</param>
      <param name="namespaceName">Der Namespace des komplexen Typs.</param>
      <param name="dataSpace">Der Datenbereich, zu dem der komplexe Typ gehört.</param>
      <param name="members">Elemente des komplexen Typs.</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentNullException">Wird ausgelöst, wenn entweder das name-, namespace- oder members-Argument NULL ist.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>Ruft die Liste von Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, in der die Liste der Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> enthalten ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>Der Parallelitätsmodus für Eigenschaften.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Fester Parallelitätsmodus: Die Eigenschaft wird beim Schreibvorgang immer überprüft.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>Standardmäßiger Parallelitätsmodus: Die Eigenschaft wird beim Schreibvorgang nie überprüft.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>Serialisiert ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />, das den Einschränkungen einer einzelnen CSDL-Schemadatei für einen XML-Writer entspricht.Das zu serialisierende Modell muss ein einzelnes <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> enthalten.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" />-Klasse.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>Tritt ein, wenn ein Fehler beim Serialisieren des Modells auftritt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>Serialisiert das <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> in den XmlWriter.</summary>
      <returns>true, wenn das Modell gültig ist; andernfalls false.</returns>
      <param name="model">Das zu serialisierende EdmModel.</param>
      <param name="xmlWriter">Der XmlWriter, zu dem die Serialisierung vorgenommen werden soll.</param>
      <param name="modelNamespace">Der Namespace des serialisierten Modells.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Stellt Informationen über einen Fehler während der Verarbeitung des Entity Framework-Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>Ruft eine optionale Meldung auf, die den ausgelösten Fehler beschreibt.</summary>
      <returns>Eine optionale Meldung, die den ausgelösten Fehler beschreibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>Ruft einen Wert ab, der das <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> angibt, welches das Ereignis ausgelöst hat.</summary>
      <returns>true, wenn das <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> das Ereignis ausgelöst hat, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>Ruft einen optionalen Wert ab, der angibt, welche Eigenschaft des Quellelements das Ereignis ausgelöst hat.</summary>
      <returns>Ein optionaler Wert, der angibt, welche Eigenschaft des Quellelements das Ereignis ausgelöst hat.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace gibt das Element im CSpace an – primitive EDM-Typen + in CSDL definierte Typen</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>Zuordnung zwischen CSpace und SSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>Zuordnung zwischen OSpace und CSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace gibt das Element im CLR-Space an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace gibt das Element im SSpace an</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>Erweiterungsmethoden für <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Ruft das konzeptionelle Modell aus dem angegebenen DbModel ab.</summary>
      <returns>Eine Instanz von EdmModel, die das konzeptionelle Modell darstellt.</returns>
      <param name="model">Eine Instanz einer Klasse, die IEdmModelAdapter implementiert (z. B.DbModel).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Ruft das Speichermodell aus dem angegebenen DbModel ab.</summary>
      <returns>Eine Instanz von EdmModel, die das Speichermodell darstellt.</returns>
      <param name="model">Eine Instanz einer Klasse, die IEdmModelAdapter implementiert (z. B.DbModel).</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>Klasse, die die einem Element zugeordnete Dokumentation darstellt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Dokumentationsinstanz.</summary>
      <param name="summary">Ein Zusammenfassungstext.</param>
      <param name="longDescription">Eine lange Beschreibung in Textform.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />-Objekt nur eine NULL-wertige oder leere <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> und eine <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" /> enthält.</summary>
      <returns>"true", wenn dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />-Objekt nur eine NULL-wertige oder eine leere <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> und eine <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" /> enthält, andernfalls "false".</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>Ruft die ausführliche Beschreibung für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> ab.</summary>
      <returns>Die ausführliche Beschreibung für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>Ruft die Übersicht für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> ab.</summary>
      <returns>Die Übersicht für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>Gibt die Übersicht für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> zurück.</summary>
      <returns>Die Übersicht für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>Diese Klasse kapselt die Fehlerinformationen für einen generischen EDM-Fehler.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>Ruft die Fehlermeldung ab.</summary>
      <returns>Die Fehlermeldung.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>Klasse zur Darstellung einer Funktion.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>Fügt dieser Funktion einen Parameter hinzu.</summary>
      <param name="functionParameter">Der Parameter, der hinzugefügt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>Ruft das Aggregatattribut dieser Funktion ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>Ruft einen Wert ab, der anzeigt, ob die Funktion ein integriertes Attribut enthält.</summary>
      <returns>true, wenn das Attribut vorhanden ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> ab.</summary>
      <returns>Einer der Aufzählungswerte der <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Aufzählung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Ruft eine Abfrage in der Sprache ab, die vom Datenbankverwaltungssystem oder Speichermodell verwendet wird.</summary>
      <returns>Ein Zeichenfolgenwert in der Syntax, die vom Datenbankverwaltungssystem oder Speichermodell verwendet wird, das die Abfrage oder die Updateanweisung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />-Objekts.</summary>
      <returns>Eine neue schreibgeschützte Instanz des Typs <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Der Name der Funktion.</param>
      <param name="namespaceName">Der Namespace der Funktion.</param>
      <param name="dataSpace">Der Namespace, zu dem die Funktion gehört.</param>
      <param name="payload">Zusätzliche Funktionsattribute und Eigenschaften.</param>
      <param name="metadataProperties">Metadateneigenschaften, die der Funktion hinzugefügt werden.Kann NULL sein.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>Gibt den vollständigen Namen (Namespace und Name) dieses Typs zurück.</summary>
      <returns>Der vollständige Name dieses Typs.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>Ruft ab, ob diese Instanz einer Funktion oder einer gespeicherten Prozedur zugeordnet ist.</summary>
      <returns>true, wenn diese Instanz einer Funktion zugeordnet ist; false, wenn diese Instanz einer gespeicherten Prozedur zugeordnet ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz aus dem Anbietermanifest stammt.</summary>
      <returns>true, wenn diese Instanz aus dem Anbietermanifest stammt, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>Ruft einen Wert ab, der anzeigt, ob dies eine NILADIC-Funktion ist (eine Funktion, die keine Argumente zulässt).</summary>
      <returns>true, wenn die Funktion eine NILADIC-Funktion ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>Ruft die Parameter dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Parameter dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>Ruft das Attribut für die Parametertypsemantik dieser Funktion ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Ruft den Rückgabeparameter für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />-Objekt, das den Rückgabeparameter dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>Ruft die Rückgabeparameter für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Rückgabeparameter dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>Ruft das Schema ab, das der Funktion zugeordnet ist, oder legt es fest.</summary>
      <returns>Das der Funktion zugeordnete Schema.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>Ruft das Attribut für den Speicherfunktionsnamen dieser Funktion ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>Enthält zusätzliche Attribute und Eigenschaften der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>Ruft den Befehlstext ab oder legt ihn fest, der der Funktion zugeordnet ist.</summary>
      <returns>Der Befehlstext, welcher der Funktion zugeordnet ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>Ruft die Entitätenmengen für die Funktion ab bzw. legt sie fest.</summary>
      <returns>Die Entitätenmengen für die Funktion.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>Ruft einen Wert ab, der angibt, ob dies eine Aggregatfunktion ist.</summary>
      <returns>true, wenn eine Aggregatfunktion vorliegt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>Ruft ab oder legt fest, ob diese Funktion eine integrierte Funktion ist.</summary>
      <returns>true, wenn die Funktion eine integrierte Funktion ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>Ruft ab oder legt fest, ob diese Funktion eine zwischengespeicherte Speicherfunktion ist.</summary>
      <returns>true, wenn die Funktion eine zwischengespeicherte Speicherfunktion ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>Ruft ab oder legt fest, ob diese Funktion zusammengesetzt werden kann.</summary>
      <returns>true, wenn diese Funktion zusammengesetzt werden kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>Ruft ab oder legt fest, ob diese Funktion aus einem Anbietermanifest stammt.</summary>
      <returns>true, wenn diese Funktion aus einem Anbietermanifest stammt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>Ruft ab oder legt fest, ob die Funktion ein Funktionsimport ist.</summary>
      <returns>true, wenn die Funktion ein Funktionsimport ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>Ruft ab oder legt fest, ob die Funktion keine Argumente enthält.</summary>
      <returns>true, wenn die Funktion keine Argumente enthält, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>Ruft die Parameter der Funktion ab, oder legt sie fest.</summary>
      <returns>Die Funktionsparameter.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>Ruft die Parametertypsemantik ab oder legt sie fest.</summary>
      <returns>Die Parametertypsemantik.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>Ruft die Rückgabeparameter ab oder legt sie fest.</summary>
      <returns>Die Rückgabeparameter.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>Ruft das Funktionsschema ab, oder legt es fest.</summary>
      <returns>Das Funktionsschema.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>Ruft den Namen der Speicherfunktion ab oder legt diesen fest.</summary>
      <returns>Der Speicherfunktionsname.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Klasse zur Darstellung einer Elementeauflistung im EDM-Space.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />-Klasse unter Verwendung der Auflistung der XMLReader-Objekte, in denen sich die CSDL-Dateien (konzeptionelle Schemadefinitionssprache) befinden.</summary>
      <param name="xmlReaders">Die Auflistung der XMLReader-Objekte, in denen sich die CSDL-Dateien (konzeptionelle Schemadefinitionssprache) befinden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />-Klasse.</summary>
      <param name="model">Das Entity Data Model.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />-Klasse mithilfe der Pfade, die den Speicherort der CSDL-Dateien (konzeptionelle Schemadefinitionssprache) definieren.</summary>
      <param name="filePaths">Die Pfade, in denen sich die CSDL-Dateien (konzeptionelle Schemadefinitionssprache) befinden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Factorymethode, die eine <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> erstellt.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />-Instanz, wenn keine Fehler festgestellt wurden.Andernfalls ist der Wert null.</returns>
      <param name="xmlReaders">Zu ladende CSDL-Artefakte.Darf nicht null sein.</param>
      <param name="filePaths">Pfade zu CSDL-Artefakten.Wird in Fehlermeldungen verwendet.Kann null sein. In diesem Fall wird der Basis-URI von XmlReader als Pfad verwendet.</param>
      <param name="errors">Die beim Laden erkannte Fehlerauflistung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Ruft die Version des konzeptionellen Modells für diese Auflistung ab.</summary>
      <returns>Die Version des konzeptionellen Modells für diese Auflistung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Gibt eine Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte zurück.</summary>
      <returns>Ein ReadOnlyCollection-Objekt, das eine Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>Gibt eine Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte mit der angegebenen Version des konzeptionellen Modells zurück.</summary>
      <returns>Ein ReadOnlyCollection-Objekt, das eine Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte darstellt.</returns>
      <param name="edmVersion">Die Version des konzeptionellen Modells</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>Stellt die EDM-Elementenklasse dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Ruft den Typ auf, für den dieses Member deklariert wurde.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den Typ darstellt, für den dieses Member deklariert wurde.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>Gibt an, ob dieser Member als berechneter Member in der EDM-Definition markiert ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>Zeigt an, ob das generierte Muster des Speichers dieses Elements als Identity in der EDM-Definition markiert ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>Ruft den Namen der Eigenschaft ab oder legt diesen fest.Durch Festlegen aus einer Speicherbereichsmodell-Konvention wird der Name der Datenbankspalte für diese Eigenschaft geändert.Im konzeptionellen Modell sollte dieser mit der entsprechenden Eigenschaft aus der Entitätsklasse übereinstimmen und nicht geändert werden.</summary>
      <returns>Der Name dieses Members.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>Gibt den Namen dieses Members zurück.</summary>
      <returns>Der Name dieses Members.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Ruft die Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Klasse ab, die zugleich den Membertyp und die Facets für den Typ enthält.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, das zugleich den Membertyp und die Facets für den Typ enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>Stellt ein konzeptionelles Modell oder Speichermodell dar.Mit dieser Klasse kann auf Informationen über die Form des Modells und die Art seiner Konfiguration zugegriffen werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Fügt dem Modell einen Zuordnungstyp hinzu.</summary>
      <param name="item">Die hinzuzufügende AssociationType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Fügt dem Modell einen komplexen Typ hinzu.</summary>
      <param name="item">Die hinzuzufügende ComplexType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Fügt dem Modell eine Funktion hinzu.</summary>
      <param name="item">Die hinzuzufügende EdmFunction-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Fügt dem Modell einen Entitätstyp hinzu.</summary>
      <param name="item">Die hinzuzufügende EntityType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Fügt dem Modell einen Aufzählungstyp hinzu.</summary>
      <param name="item">Die hinzuzufügende EnumType-Instanz.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>Ruft die Zuordnungstypen in dem Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen Typ ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diesen Typ darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>Ruft die komplexen Typen in dem Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>Ruft den Container ab, in dem die Entitäts- und Zuordnungssätze sowie die Funktionsimporte gespeichert sind.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>Ruft den mit dem Modell verknüpften Datenraum ab, der angibt, ob es sich um ein konzeptionelles Modell (DataSpace.CSpace) oder um ein Speichermodell (DataSpace.SSpace) handelt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>Ruft die Entitätstypen in dem Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>Ruft die Aufzählungstypen in dem Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>Ruft die Funktionen in dem Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>Ruft die globalen Elemente ab, die dem Modell zugeordnet sind.</summary>
      <returns>Die globalen Elemente, die dem Modell zugeordnet sind.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Entfernt einen Zuordnungstyp aus dem Modell.</summary>
      <param name="item">Die zu entfernende AssociationType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Entfernt einen komplexen Typ aus dem Modell.</summary>
      <param name="item">Die zu entfernende ComplexType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Entfernt eine Funktion aus dem Modell.</summary>
      <param name="item">Die zu entfernende EdmFunction-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Entfernt einen Entitätstyp aus dem Modell.</summary>
      <param name="item">Die zu entfernende EntityType-Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Entfernt einen Aufzählungstyp aus dem Modell.</summary>
      <param name="item">Die zu entfernende EnumType-Instanz.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>Im konzeptionellen Bereich stellt EdmProperty eine Eigenschaft einer Entität dar.Im Speicherbereich stellt EdmProperty eine Spalte in einer Tabelle dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>Ruft die Art der Auflistung für dieses Modell ab oder legt sie fest.</summary>
      <returns>Die Art der Auflistung für dieses Modell.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>Ruft die Informationen zum komplexen Typ für diese Eigenschaft ab.</summary>
      <returns>Die Informationen zum komplexen Typ für diese Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>Ruft den Parallelitätsmodus für die Eigenschaft ab.</summary>
      <returns>Der Parallelitätsmodus für Eigenschaft.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Erstellt eine neue Instanz eines EdmProperty-Typs.</summary>
      <returns>Eine neue Instanz eines EdmProperty-Typs.</returns>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="typeUsage">Eigenschaft <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Erstellt eine neue komplexe Eigenschaft.</summary>
      <returns>Die neu erstellte Eigenschaft.</returns>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="complexType">Der Typ der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Erstellt eine neue Aufzählungseigenschaft.</summary>
      <returns>Die neu erstellte Eigenschaft.</returns>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="enumType">Der Typ der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Erstellt eine neue primitive Eigenschaft.</summary>
      <returns>Die neu erstellte Eigenschaft.</returns>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="primitiveType">Der Typ der Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Ruft den Standardwert für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> ab.</summary>
      <returns>Der Standardwert für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>Ruft die Informationen zum Aufzählungstyp für diese Eigenschaft ab.</summary>
      <returns>Die Informationen zum Aufzählungstyp für diese Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>Ruft ab, ob die Eigenschaft eine Auflistungstypeigenschaft ist.</summary>
      <returns>true, wenn die Eigenschaft eine Auflistungstypeigenschaft ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>Ruft ab, ob diese Eigenschaft eine Eigenschaft mit einem komplexen Typ ist.</summary>
      <returns>true, wenn diese Eigenschaft eine Eigenschaft mit komplexem Typ ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>Ruft ab, ob diese Eigenschaft eine Aufzählungstypeigenschaft ist.</summary>
      <returns>true, wenn diese Eigenschaft eine Aufzählungstypeigenschaft ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>Ruft ab oder legt fest, ob die Länge dieser Eigenschaft fest ist.</summary>
      <returns>true, wenn die Länge dieser Eigenschaft fest ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>Ruft ab, ob das FixedLength-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>Ruft ab, ob diese Eigenschaft die vom Anbieter unterstützte maximale Länge verwendet, oder legt dies fest.</summary>
      <returns>true, wenn diese Eigenschaft die vom Anbieter unterstützte maximale Länge verwendet, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>Ruft ab, ob das MaximumLength-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>Ruft ab, ob das Precision-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>Ruft ab, ob diese Eigenschaft ein primitiver Typ ist.</summary>
      <returns>true, wenn diese Eigenschaft ein primitiver Typ ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>Ruft ab, ob das Scale-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>Ruft ab, ob diese Eigenschaft ein zugrunde liegender primitiver Typ ist.</summary>
      <returns>true, wenn diese Eigenschaft ein zugrunde liegender primitiver Typ ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>Ruft ab oder legt fest, ob diese Eigenschaft eine Unicode-Eigenschaft ist.</summary>
      <returns>true, wenn diese Eigenschaft eine Unicode-Eigenschaft ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>Ruft ab, ob das Unicode-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>Ruft die Höchstlänge der Eigenschaft ab oder legt sie fest.</summary>
      <returns>Die maximale Länge der Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>Ruft einen Wert ab, der angibt, ob diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> den Wert NULL zulässt.</summary>
      <returns>true, wenn diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> den Wert NULL zulässt, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>Ruft die Genauigkeit dieser Eigenschaft ab oder legt sie fest.</summary>
      <returns>Die Genauigkeit dieser Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>Ruft die Informationen zum primitiven Typ für diese Eigenschaft ab.</summary>
      <returns>Die Informationen zum primitiven Typ für diese Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>Ruft die Skalierbarkeit dieser Eigenschaft ab oder legt sie fest.</summary>
      <returns>Die Skalierung dieser Eigenschaft.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Legt die Metadateneigenschaften fest.</summary>
      <param name="metadataProperties">Die festzulegenden Metadateneigenschaften.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>Ruft die Methode zur Datenbankgenerierung für die Datenbankspalte ab, die dieser Eigenschaft zugewiesen ist, oder legt sie fest.</summary>
      <returns>Das im Speicher generierte Muster für die Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>Ruft den Typnamen der Eigenschaft ab.</summary>
      <returns>Der Typname der Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>Ruft die Informationen zum zugrundeliegenden primitiven Typ für diese Eigenschaft ab.</summary>
      <returns>Die Informationen zum zugrundeliegenden primitiven Typ für diese Eigenschaft.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>Diese Klasse kapselt die Fehlerinformationen für einen festgestellten Schemafehler.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>Erstellt ein EdmSchemaError-Objekt.</summary>
      <param name="message">Die Beschreibung des Fehlers.</param>
      <param name="errorCode">Der Code, der diesem Fehler zugeordnet ist.</param>
      <param name="severity">Der Schweregrad des Fehlers.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>Ruft die Spalte ab, in der der Fehler aufgetreten ist.</summary>
      <returns>Die Spalte, in der der Fehler aufgetreten ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Ruft den Fehlercode ab.</summary>
      <returns>Der Fehlercode.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>Ruft die Nummer der Zeile ab, in der der Fehler aufgetreten ist.</summary>
      <returns>Die Nummer der Zeile, in der der Fehler aufgetreten ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Ruft den Speicherort des Schemas ab, das den Fehler enthält.Dieser String enthält am Ende auch den Namen des Schemas.</summary>
      <returns>Der Speicherort des Schemas, das den Fehler enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Ruft den Namen des Schemas ab, das den Fehler enthält.</summary>
      <returns>Der Name des Schemas, das den Fehler enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Ruft den Schweregrad des Fehlers ab.</summary>
      <returns>Einer der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" />-Werte.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Ruft eine Zeichenfolgendarstellung der Stapelüberwachung zum Fehlerzeitpunkt ab.</summary>
      <returns>Eine Zeichenfolgendarstellung der Stapelüberwachung zum Fehlerzeitpunkt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Gibt die Fehlermeldung zurück.</summary>
      <returns>Die Fehlermeldung.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Definiert den Schweregrad von Fehlern, die beim Validieren eines Entity Framework-Modells aufgetreten sind.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Ein Fehler, die die Verwendung des Modells ausschließt.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Eine Warnung, die die Verwendung des Modells nicht ausschließt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>Grundlegende EdmType-Klasse für alle Modelltypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>Ruft einen Wert ab, der angibt, ob es sich um einen abstrakten Typ handelt oder nicht.</summary>
      <returns>true, wenn es sich um einen abstrakten Typ handelt, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>Ruft den Basistyp dieses Typs ab.</summary>
      <returns>Der Basistyp dieses Typs.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>Ruft den vollständigen Namen dieses Typs ab.</summary>
      <returns>Der vollständige Name dieses Typs.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Gibt eine Instanz des <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> zurück, dessen Elementtyp diesem Typ entspricht.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />-Objekt, dessen Elementtyp diesem Typ entspricht.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>Ruft den Namen dieses Typs ab.</summary>
      <returns>Der Name dieses Typs.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>Ruft den Namespace dieses Typs ab.</summary>
      <returns>Der Namespace dieses Typs.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>Gibt den vollständigen Namen dieses Typs zurück.</summary>
      <returns>Der vollständige Name dieses Typs.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>Klasse zur Darstellung eines Entitätencontainers.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Erstellt einen Entitätencontainer mit dem angegebenen Namen und Datenbereich.</summary>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="dataSpace">Der Datenbereich des Entitätencontainers.</param>
      <exception cref="T:System.ArgumentNullException">Wird ausgelöst, wenn das Namenargument NULL ist.</exception>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn das Namenargument eine leere Zeichenfolge ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Fügt dem Container die angegebene Entitätenmenge hinzu.</summary>
      <param name="entitySetBase">Die Entitätenmenge, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Fügt dem Container einen Funktionsimport hinzu.</summary>
      <param name="function">Der hinzuzufügende Funktionsimport.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>Ruft die Zuordnungssätze für diesen Entitätencontainer ab.</summary>
      <returns>Die Zuordnungssätze für diesen Entitätencontainer.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Ruft eine Liste von Entitätenmengen und Zuordnungssätzen auf, die in diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> enthalten sind.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />-Objekt, das eine Liste von Entitätenmengen und Zuordnungssätzen enthält, die in diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> enthalten sind.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des EntityContainer-Objekts.</summary>
      <returns>Das EntityContainer-Objekt.</returns>
      <param name="name">Der Name des zu erstellenden Entitätencontainers.</param>
      <param name="dataSpace">Der Datenbereich, zu dem dieser Entitätencontainer gehört.</param>
      <param name="entitySets">Die Entitätenmengen, die in den neuen Container eingeschlossen werden.Kann NULL sein.</param>
      <param name="functionImports">Die Funktionen, die in den neuen Container eingeschlossen werden.Kann NULL sein.</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn das name-Argument NULL entspricht oder eine leere Zeichenfolge ist.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>Ruft die Entitätenmengen für diesen Entitätencontainer ab.</summary>
      <returns>Die Entitätenmengen für diesen Entitätencontainer.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Gibt eine Auflistung von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />-Elementen an.Jede Funktion enthält die Details einer gespeicherten Prozedur, die in der Datenbank oder im entsprechenden CommandText vorhanden ist, der einer Entität und ihren Eigenschaften zugeordnet ist.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />-Elemente enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Namens für die Entitätenmenge ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt, das die Entitätenmenge mit dem angegebenen Namen darstellt.</returns>
      <param name="name">Der Name der Entitätenmenge, die gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Namens für den Beziehungssatz ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt, das den Beziehungssatz mit dem angegebenen Namen darstellt.</returns>
      <param name="name">Der Name des Beziehungssatzes, der gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>Ruft den Namen dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> ab.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Entfernt eine bestimmte Entitätenmenge aus dem Container.</summary>
      <param name="entitySetBase">Die Entitätenmenge, die entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>Gibt den Namen dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> zurück.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>Gibt mithilfe des angegebenen Namens für die Entitätenmenge ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt zurück.</summary>
      <returns>true, wenn eine Entitätenmenge vorhanden ist, die den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="name">Der Name der Entitätenmenge, die gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="entitySet">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt.Wenn keine Entitätenmenge vorhanden ist, enthält dieser Ausgabeparamenter NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>Gibt mithilfe des angegebenen Namens für den Beziehungssatz ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt zurück.</summary>
      <returns>true, wenn ein Beziehungssatz vorhanden ist, der den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="name">Der Name des Beziehungssatzes, der gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="relationshipSet">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>Stellt eine bestimmte Verwendung einer in EntityType definierten Struktur dar.Im konzeptionellen Modell stellt dies eine Menge dar, die Entitäten abfragen und dauerhaft speichern kann.Im Speichermodell stellt dies eine Tabelle dar.Kann aus einer Speicherbereichsmodell-Konvention verwendet werden, um den Tabellennamen mit der <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" />-Eigenschaft und das Tabellenschema mit der <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" />-Eigenschaft zu konfigurieren.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des EntitySet-Objekts.</summary>
      <returns>Das EntitySet-Objekt.</returns>
      <param name="name">Der Name von EntitySet.</param>
      <param name="schema">Das Datenbankschema.Kann NULL sein.</param>
      <param name="table">Die DB-Tabelle.Kann NULL sein.</param>
      <param name="definingQuery">Die anbieterspezifische Abfrage, die verwendet werden sollte, um Daten für diesen EntitySet abzurufen.Kann NULL sein.</param>
      <param name="entityType">Der Entitätstyp der Entitäten, die dieser Entitätenmengentyp enthält.</param>
      <param name="metadataProperties">Metadateneigenschaften, die dem neu erstellten EntitySet hinzugefügt werden.Kann NULL sein.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn das name-Argument NULL entspricht oder eine leere Zeichenfolge ist.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>Ruft den Entitätstyp von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />-Objekt, das den Entitätstyp von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>Klasse zur Darstellung einer Entitätenmenge.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>Ruft ein durch Escapezeichen geschütztes anbieterspezifisches SQL-Element ab, das diese Entitätenmenge beschreibt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Ruft den Entitätstyp von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />-Objekt, das den Entitätstyp von <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Ruft den Entitätencontainer der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt, das den Entitätencontainer der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>Ruft den Namen der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes ab oder legt ihn fest.Wenn diese Eigenschaft aus dem Speicherbereich geändert wird, muss auch Zuordnungsebene so aktualisiert werden, dass sie den neuen Namen aufweist.Verwenden Sie die Table-Eigenschaft zum Ändern des Tabellennamens eines Speicherbereich-<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Der Name der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>Ruft das Datenbankschema für diese Entitätenmenge ab bzw. legt es fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>Ruft den Namen der Datenbanktabelle für diese Entitätenmenge ab oder legt ihn fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>Gibt den Namen der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes zurück.</summary>
      <returns>Der Name der aktuellen Entitätenmenge oder des aktuellen Beziehungssatzes.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>Stellt die Struktur eines <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> dar.Im konzeptionellen Modell stellt dies die Form und Struktur einer Entität dar.Im Speichermodell stellt dies die Struktur einer Tabelle dar.Um den Schema- und Tabellennamen zu ändern, verwenden Sie EntitySet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Fügt Elementen dieses Typs die angegebene Navigationseigenschaft hinzu.Die Navigationseigenschaft wird unabhängig vom Schreibschutzkennzeichen hinzugefügt.</summary>
      <param name="property">Die hinzuzufügende Navigationseigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des EntityType-Objekts.</summary>
      <returns>Das EntityType-Objekt.</returns>
      <param name="name">Der Name des Entitätstyps.</param>
      <param name="namespaceName">Der Namespace des Entitätstyps.</param>
      <param name="dataSpace">Der Datenbereich, zu dem der EntityType gehört.</param>
      <param name="keyMemberNames">Name des Schlüsselelements für den Typ.</param>
      <param name="members">Elemente des Entitätstyps (primitive und Navigationseigenschaften).</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn entweder Name, Namespace oder Argumente NULL ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des EntityType-Objekts.</summary>
      <returns>Das EntityType-Objekt.</returns>
      <param name="name">Der Name des Entitätstyps.</param>
      <param name="namespaceName">Der Namespace des Entitätstyps.</param>
      <param name="dataSpace">Der Datenbereich, zu dem der EntityType gehört.</param>
      <param name="baseType">Der Basistyp.</param>
      <param name="keyMemberNames">Name des Schlüsselelements für den Typ.</param>
      <param name="members">Elemente des Entitätstyps (primitive und Navigationseigenschaften).</param>
      <param name="metadataProperties">Die der Instanz zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn entweder Name, Namespace oder Argumente NULL ist.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>Ruft die Auflistung von deklarierten Membern für den Entitätstyp ab.</summary>
      <returns>Die Auflistung von deklarierten Membern für den Entitätstyp.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>Ruft die deklarierten Navigationseigenschaften ab, die dem Entitätstyp zugeordnet sind.</summary>
      <returns>Die deklarierten Navigationseigenschaften, die dem Entitätstyp zugeordnet sind.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>Ruft die Liste der deklarierten Eigenschaften für den Entitätstyp ab.</summary>
      <returns>Die deklarierten Eigenschaften für den Entitätstyp.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> -Objekt zurück, das auf diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> verweist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />-Objekt, das auf diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> verweist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Ruft die Navigationseigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Navigationseigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>Ruft die Liste von Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, in der die Liste der Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> enthalten ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>Stellt den Entitätstyp dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Fügt die angegebene Eigenschaft der Liste der Schlüssel für die aktuelle Entität hinzu.</summary>
      <param name="member">Die hinzuzufügende Eigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">wenn das member-Argument NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn EntityType über einen Basistyp eines anderen EntityTypeBase verfügt.In diesem Fall sollte dem Basistyp KeyMembers hinzugefügt werden.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn die EntityType-Instanz einen ReadOnly-Status aufweist</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Ruft die Liste aller Schlüsselmember des aktuellen Entitäts- oder Beziehungstyps ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />-Objekt, das die Liste aller Schlüsselmember des aktuellen Entitäts- oder Beziehungstyps darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>Ruft die Liste aller Schlüsseleigenschaften für diesen Entitätstyp ab.</summary>
      <returns>Die Liste aller Schlüsseleigenschaften für diesen Entitätstyp.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Entfernt das angegebene Schlüsselelement aus der Auflistung.</summary>
      <param name="member">Das zu entfernende Schlüsselelement.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>Stellt ein Aufzählungselement dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>Ruft die Art dieses Typs ab.</summary>
      <returns>Die Art dieses Typs.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumMember-Instanz.</summary>
      <returns>Die neu erstellte EnumMember-Instanz.</returns>
      <param name="name">Der Name des Aufzählungsmembers.</param>
      <param name="value">Der Wert des Aufzählungsmembers.</param>
      <param name="metadataProperties">Die dem Aufzählungsmember zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumMember-Instanz.</summary>
      <returns>Die neu erstellte EnumMember-Instanz.</returns>
      <param name="name">Der Name des Aufzählungsmembers.</param>
      <param name="value">Der Wert des Aufzählungsmembers.</param>
      <param name="metadataProperties">Die dem Aufzählungsmember zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumMember-Instanz.</summary>
      <returns>Die neu erstellte EnumMember-Instanz.</returns>
      <param name="name">Der Name des Aufzählungsmembers.</param>
      <param name="value">Der Wert des Aufzählungsmembers.</param>
      <param name="metadataProperties">Die dem Aufzählungsmember zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumMember-Instanz.</summary>
      <returns>Die neu erstellte EnumMember-Instanz.</returns>
      <param name="name">Der Name des Aufzählungsmembers.</param>
      <param name="value">Der Wert des Aufzählungsmembers.</param>
      <param name="metadataProperties">Die dem Aufzählungsmember zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumMember-Instanz.</summary>
      <returns>Die neu erstellte EnumMember-Instanz.</returns>
      <param name="name">Der Name des Aufzählungsmembers.</param>
      <param name="value">Der Wert des Aufzählungsmembers.</param>
      <param name="metadataProperties">Die dem Aufzählungsmember zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>Ruft den Namen des Aufzählungselements ab.</summary>
      <returns>Der Name dieses Aufzählungsmembers.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>System.Object.ToString wird überschrieben, um eine bessere Zeichenfolgendarstellung für diesen Typ bereitzustellen.</summary>
      <returns>Der Name dieses Aufzählungsmembers.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>Ruft den Wert dieses Aufzählungselements ab.</summary>
      <returns>Der Wert dieses Aufzählungsmembers.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>Stellt einen Aufzählungstyp dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>Gibt die Art des Typs zurück.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine schreibgeschützte EnumType-Instanz.</summary>
      <returns>Die neu erstellte EnumType-Instanz.</returns>
      <param name="name">Der Name des Aufzählungstyps.</param>
      <param name="namespaceName">Der Namespace des Aufzählungstyps.</param>
      <param name="underlyingType">Der zugrundeliegende Typ des Aufzählungstyps.</param>
      <param name="isFlags">Gibt an, ob der Aufzählungstyp als Bitfeld behandelt werden kann, das heißt als Satz von Flags.</param>
      <param name="members">Die Members des Aufzählungstyps.</param>
      <param name="metadataProperties">Die dem Aufzählungstyp zuzuordnenden Metadateneigenschaften.</param>
      <exception cref="T:System.ArgumentNullException">underlyingType ist Null.</exception>
      <exception cref="T:System.ArgumentException">Name ist Null oder leer.-oder- namespaceName ist Null oder leer.-oder- underlyingType ist kein unterstützter zugrundeliegender Typ.-oder- Die angegebenen Member haben keine eindeutigen Namen.-oder- Der Wert eines angegebenen Members befindet sich nicht im Bereich des zugrundeliegenden Typs.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>Ruft einen Wert ab, der angibt, ob der Aufzählungstyp als Kennzeichen definiert ist (und beispielsweiseals Bitfeld behandelt werden kann).</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>Ruft eine Auflistung der Aufzählungselemente für den Aufzählungstyp ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>Ruft den zugrunde liegenden Typ für diesen Aufzählungstyp ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>Klasse zur Darstellung eines Facetobjekts. Dieses Objekt ist unveränderlich (nicht einfach nur auf schreibgeschützt festgelegt), und einige Teile des Systems hängen von diesem Verhalten ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>Ruft die Beschreibung dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> ab.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" />-Objekt, das die Beschreibung dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>Ruft den Typ dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> ab.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den Typ dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert des Facets unbegrenzt (unbounded) ist.</summary>
      <returns>true, wenn der Wert des Facets unbounded ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>Ruft den Namen dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> ab.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>Gibt den Namen dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> zurück.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>Ruft den Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> ab.</summary>
      <returns>Der Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>Klasse zur Darstellung eines FacetDescription-Objekts.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Ruft den Standardwert eines Facets mit dieser Facetbeschreibung ab.</summary>
      <returns>Der Standardwert eines Facets mit dieser Facetbeschreibung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>Ruft den Namen dieses Facets ab.</summary>
      <returns>Der Name dieses Facets.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>Ruft den Typ dieses Facets ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den Typ dieses Facets darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert dieses Facets eine Konstante ist.</summary>
      <returns>true, wenn dieses Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Facet erforderlich ist.</summary>
      <returns>true, wenn dieses Facet erforderlich ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Ruft den Maximalwert für dieses Facet ab.</summary>
      <returns>Der Maximalwert für dieses Facet.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>Ruft den Minimalwert für dieses Facet ab.</summary>
      <returns>Der Minimalwert für dieses Facet.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>Gibt den Namen dieses Facets zurück.</summary>
      <returns>Der Name dieses Facets.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>Klasse, die einen Funktionsparameter darstellt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>Die Factorymethode zum Erstellen des <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />-Objekts.</summary>
      <returns>Eine neue schreibgeschützte Instanz des Typs <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Der Name des Parameters.</param>
      <param name="edmType">Der EdmType des Parameters.</param>
      <param name="parameterMode">Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> des Parameters.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> ab, für die dieser Parameter deklariert ist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />-Objekt, das die Funktion darstellt, für die dieser Parameter deklariert wurde.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>Ruft ab, ob der Parameter die vom Datenbankanbieter unterstützte maximale Länge verwendet.</summary>
      <returns>true, wenn der Parameter die vom Datenbankanbieter unterstützte maximale Länge verwendet, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>Ruft ab, ob das MaximumLength-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>Ruft ab, ob das Precision-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>Ruft ab, ob das Scale-Facet für den Datenbankanbieter konstant ist.</summary>
      <returns>true, wenn das Facet eine Konstante ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>Ruft die maximal zulässige Länge des Parameters ab.</summary>
      <returns>Die maximale Länge des Parameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>Ruft den Modus dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> ab.</summary>
      <returns>Einer der <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />-Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>Ruft den Namen dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> ab.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>Ruft den Genauigkeitswert des Parameters ab.</summary>
      <returns>Der Genauigkeitswert des Parameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>Ruft den Skalawert des Parameters ab.</summary>
      <returns>Der Skalawert des Parameters.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>Gibt den Namen dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> zurück.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>Ruft den Typnamen dieses Parameters ab.</summary>
      <returns>Der Typname dieses Parameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Ruft die Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Klasse ab, die sowohl den Typ des Parameters als auch Facets für den Typ enthält.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, das sowohl den Typ des Parameters als auch Facets für den Typ enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>Stellt die grundlegende Elementklasse für alle Metadaten dar.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>Eine Schnittstelle zum Abrufen des zugrunde liegenden Speicher- und konzeptionellen Modells für ein <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>Ruft das konzeptionelle Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>Ruft das Speichermodell ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>Klasse zur Darstellung einer Auflistung von Elementen.Die Implementierung für die tatsächliche Wartung der Auflistung erfolgt hauptsächlich durch MetadataCollection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Ruft das der Elementauflistung zugeordnete Datenmodell ab.</summary>
      <returns>Das der Elementauflistung zugeordnete Datenmodell.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Gibt mithilfe des angegebenen Entitätencontainernamens ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>Wenn kein Entitätencontainer vorhanden ist, gibt diese Methode NULL zurück, andernfalls wird der erste Entitätencontainer zurückgegeben.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Entitätencontainernamens ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>Wenn kein Entitätencontainer vorhanden ist, gibt diese Methode NULL zurück, andernfalls wird der erste Entitätencontainer zurückgegeben.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Namens dieser Elementauflistung alle Überladungen der Funktionen zurück.</summary>
      <returns>Eine Auflistung des Typs ReadOnlyCollection, in der alle Funktionen mit dem angegebenen Namen enthalten sind.</returns>
      <param name="functionCollection">Ein Funktionswörterbuch.</param>
      <param name="functionName">Der vollständige Name der Funktion.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Gibt mithilfe des angegebenen Namens dieser Elementauflistung alle Überladungen der Funktionen zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Funktionen mit dem angegebenen Namen enthalten sind.</returns>
      <param name="functionName">Der vollständige Name der Funktion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Namens dieser Elementauflistung alle Überladungen der Funktionen zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Funktionen mit dem angegebenen Namen enthalten sind.</returns>
      <param name="functionName">Der vollständige Name der Funktion.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Gibt mithilfe der angegebenen Identität ein stark typisiertes <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt zurück.</summary>
      <returns>Das Element, das von der Identität angegeben wird.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Gibt in einer Suche mit oder ohne Berücksichtigung der Groß/-Kleinschreibung und unter Verwendung der festgelegten Identität ein stark typisiertes <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt zurück.</summary>
      <returns>Das Element, das von der Identität angegeben wird.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Gibt alle Elemente des angegebenen Typs zurück, die zu dieser Elementauflistung gehören.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Elemente des angegebenen Typs enthalten sind.</returns>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Gibt mithilfe des angegebenen Typnamens und des Namespacenamens dieser Elementauflistung ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den Typ darstellt, der dem angegebenen Typnamen und Namespacenamen in dieser Elementauflistung entspricht.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Typnamens und des Namespacenamens dieser Elementauflistung ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den Typ darstellt, der dem angegebenen Typnamen und Namespacenamen in dieser Elementauflistung entspricht.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Gibt mithilfe des angegebenen Entitätencontainernamens ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.Wenn kein Entitätencontainer vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL, andernfalls enthält der Ausgabeparameter den ersten Entitätencontainer.</summary>
      <returns>true, wenn ein Entitätencontainer vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="entityContainer">Diese Methode gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.Wenn kein Entitätencontainer vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL, andernfalls enthält der Ausgabeparameter den ersten Entitätencontainer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Gibt mithilfe des angegebenen Entitätencontainernamens ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.Wenn kein Entitätencontainer vorhanden ist, enthält der Ausgabeparameter den Wert NULL, andernfalls enthält der Ausgabeparameter den ersten Entitätencontainer.</summary>
      <returns>true, wenn ein Entitätencontainer vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="entityContainer">Diese Methode gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.Wenn kein Entitätencontainer vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL, andernfalls enthält der Ausgabeparameter den ersten Entitätencontainer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Gibt mithilfe der angegebenen Identität dieser Elementauflistung ein stark typisiertes <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt zurück.</summary>
      <returns>true, wenn ein Element vorhanden ist, das den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="item">Wenn diese Methode einen Wert zurückgibt, enthält der Ausgabeparameter ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt.Wenn in der Elementauflistung kein globales Element mit der angegebenen Identität vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Gibt mithilfe der angegebenen Identität dieser Elementauflistung ein stark typisiertes <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt zurück.</summary>
      <returns>true, wenn ein Element vorhanden ist, das den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <param name="item">Wenn diese Methode einen Wert zurückgibt, enthält der Ausgabeparameter ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />-Objekt.Wenn in der Elementauflistung kein globales Element mit der angegebenen Identität vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Gibt mithilfe des angegebenen Typnamens und des Namespacenamens dieser Elementauflistung ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="type">Wenn diese Methode einen Wert zurückgibt, enthält dieser Ausgabeparameter ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt.Wenn in dieser Elementauflistung kein Typ mit dem angegebenen Namen und Namespacenamen vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Gibt mithilfe des angegebenen Typnamens und des Namespacenamens dieser Elementauflistung ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="type">Wenn diese Methode einen Wert zurückgibt, enthält dieser Ausgabeparameter ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt.Wenn in dieser Elementauflistung kein Typ mit dem angegebenen Namen und Namespacenamen vorhanden ist, enthält dieser Ausgabeparameter den Wert NULL.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>Stellt die grundlegende Elementklasse für alle Metadaten dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>Aktualisiert oder fügt eine Anmerkung mit dem angegebenen Namen und Wert hinzu.</summary>
      <param name="name">Der Name der Anmerkungseigenschaft.</param>
      <param name="value">Der Wert der Anmerkungseigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen Typ ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diesen Typ darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>Ruft die diesem Typ zugeordnete Dokumentation ab bzw. legt sie fest.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />-Objekt, das die Dokumentation dieses Typs darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>Gibt einen integrierten Typ des konzeptionellen Modells zurück, der einem der <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Werte entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den integrierten Typ im EDM darstellt.</returns>
      <param name="builtInTypeKind">Einer der <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Werte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Gibt eine Liste der allgemeinen Facetbeschreibungen für den angegebenen Typ zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />-Objekt, das die Liste der allgemeinen Facetbeschreibungen für einen angegebenen Typ darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Ruft eine Liste der Eigenschaften des aktuellen Typs ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die eine Liste der Eigenschaften des aktuellen Typs enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>Entfernt eine Anmerkung mit dem angegebenen Namen.</summary>
      <returns>true, wenn eine Anmerkung entfernt wurde, andernfalls false.</returns>
      <param name="name">Der Name der Anmerkungseigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>Klasse, die ein Metadatenattribut für ein Element darstellt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Die Factorymethode zum Erstellen des MetadataProperty-Objekts.</summary>
      <returns>Das MetadataProperty-Objekt.</returns>
      <param name="name">Der Name der Metadateneigenschaft.</param>
      <param name="typeUsage">Die Typenverwendung der Metadateneigenschaft.</param>
      <param name="value">Der Wert der Metadateneigenschaft.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="typeUsage" /> wird ausgelöst, ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>Erstellt eine Metadatenanmerkung mit dem angegebenen Namen und Wert.</summary>
      <returns>Eine MetadataProperty-Instanz, welche die erstellte Anmerkung darstellt.</returns>
      <param name="name">Der Anmerkungsname.</param>
      <param name="value">Der Anmerkungswert.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>Ruft einen booleschen Wert ab, der angibt, ob es sich bei der Metadateneigenschaft um eine Anmerkung handelt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>Ruft den Namen dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> ab.</summary>
      <returns>Der Name dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Ruft den Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> ab.</summary>
      <returns>Der Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Ruft die Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Klasse ab, die sowohl den Typ dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> als auch Facets für den Typ enthält.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, das sowohl den Typ dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> als auch Facets für den Typ enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>Ruft den Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> ab.</summary>
      <returns>Der Wert dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>Arbeitsbereich der Metadaten zur Laufzeit</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />-Klasse mit den angegebenen Pfaden und Assemblys.</summary>
      <param name="paths">Die Pfade zu Arbeitsbereichsmetadaten.</param>
      <param name="assembliesToConsider">Die Namen von Assemblys, die zum Erstellen des Arbeitsbereichs verwendet werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> mit Ladeprogrammen für Elementauflistungen ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" /> ) aus herkömmlichen EDMX-Zuordnungen.Es werden standardmäßige O-Space- und O/C-Zuordnungsauflistungen verwendet.Die Delegate der Elementauflistung werden verzögert ausgeführt, wenn eine bestimmte Auflistung zum ersten Mal verwendet wird.Es ist zulässig, einen Delegaten zu übergeben, der Null zurückgibt, wenn die Auflistung nicht verwendet wird. Dies ist jedoch selten der Fall, und jeder Versuch von EF, die Auflistung zu verwenden, löst in diesem Fall eine Ausnahme aus.</summary>
      <param name="cSpaceLoader">Delegat zum Zurückgeben der Elementauflistung im C-Space (CSDL).</param>
      <param name="sSpaceLoader">Delegat zum Zurückgeben der Elementauflistung im S-Space (SSDL).</param>
      <param name="csMappingLoader">Delegat zum Zurückgeben der Elementauflistung in der C-/S-Zuordnung (MSL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> mit Ladeprogrammen für alle Elementauflistungen (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />), die von EF benötigt werden, die O/C-Zuordnung ausgenommen. Diese wird automatisch basierend auf den angegebenen Ladeprogrammen für den O-Space und C-Space erstellt.Die Delegate der Elementauflistung werden verzögert ausgeführt, wenn eine bestimmte Auflistung zum ersten Mal verwendet wird.Es ist zulässig, einen Delegaten zu übergeben, der Null zurückgibt, wenn die Auflistung nicht verwendet wird. Dies ist jedoch selten der Fall, und jeder Versuch von EF, die Auflistung zu verwenden, löst in diesem Fall eine Ausnahme aus.</summary>
      <param name="cSpaceLoader">Delegat zum Zurückgeben der Elementauflistung im C-Space (CSDL).</param>
      <param name="sSpaceLoader">Delegat zum Zurückgeben der Elementauflistung im S-Space (SSDL).</param>
      <param name="csMappingLoader">Delegat zum Zurückgeben der Elementauflistung in der C-/S-Zuordnung (MSL).</param>
      <param name="oSpaceLoader">Delegat zum Zurückgeben der Elementauflistung im O-Space (SSDL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Löscht alle Metadaten-Cacheeinträge.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>Erstellt einen <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" />, der für die Verwendung des <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" />-Datenbereichs konfiguriert wurde.</summary>
      <returns>Das erstellte parser-Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />, die basierend auf dem angegebenen Abfrageausdruck an diesen Metadaten-Arbeitsbereich gebunden wird.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> mit dem angegebenen Ausdruck als <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" />-Eigenschaft</returns>
      <param name="query">Ein <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Objekt, das die Abfrage definiert.</param>
      <exception cref="T:System.ArgumentNullException">Wenn <paramref name="query" /> NULL ist.</exception>
      <exception cref="T:System.ArgumentException">Wenn <paramref name="query" /> Metadaten enthält, die in diesem Metadatenarbeitsbereich nicht aufgelöst werden können</exception>
      <exception cref="T:System.ArgumentException">Wenn <paramref name="query" /> auf struktureller Ebene ungültig ist, da nicht aufgelöste Variablenverweise enthalten sind</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt zurück, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt, der dem vom Parameter objectSpaceType angegebenen Typ entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Metadata.Edm.EnumlType" />, der den Typ im Objektraum bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt zurück, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt, der dem vom Parameter objectSpaceType angegebenen Typ entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, der den Typ im Objektraum bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe des angegebenen Namens des Entitätencontainers und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>Wenn kein Entitätencontainer vorhanden ist, gibt diese Methode NULL zurück, andernfalls wird der erste Entitätencontainer zurückgegeben.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Entitätencontainer gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe des angegebenen Namens des Entitätencontainers und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>Wenn kein Entitätencontainer vorhanden ist, gibt diese Methode NULL zurück, andernfalls wird der erste Entitätencontainer zurückgegeben.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Entitätencontainer gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe des angegebenen Namens, des Namespacenamens und des Datenmodells alle Überladungen der Funktionen zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die alle Funktionen im angegebenen Namespace und Datenmodell enthält, die den angegebenen Namen haben.</returns>
      <param name="name">Der Name der Funktion.</param>
      <param name="namespaceName">Der Namespace der Funktion.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach den Funktionen gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Gibt mithilfe des angegebenen Namens, des Namespacenamens und des Datenmodells alle Überladungen der Funktionen zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die alle Funktionen im angegebenen Namespace und Datenmodell enthält, die den angegebenen Namen haben.</returns>
      <param name="name">Der Name der Funktion.</param>
      <param name="namespaceName">Der Namespace der Funktion.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach den Funktionen gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe der angegebenen Identität und des Datenmodells ein Element zurück.</summary>
      <returns>Das Element, das der angegebenen Identität im angegebenen Datenmodell entspricht.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe der angegebenen Identität und des Datenmodells ein Element zurück.</summary>
      <returns>Das Element, das der angegebenen Identität im angegebenen Datenmodell entspricht.</returns>
      <param name="identity">Die Identität des Elements.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Ruft <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />-Elemente ab.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />-Elemente.</returns>
      <param name="dataSpace">Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />, aus dem Elemente abgerufen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Ruft alle Elemente im angegebenen Datenmodell ab.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Elemente im angegebenen Datenmodell enthalten sind.</returns>
      <param name="dataSpace">Das konzeptionelle Modell, für das die Liste von Elementen benötigt wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Ruft alle Elemente im angegebenen Datenmodell ab.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Elemente im angegebenen Datenmodell enthalten sind.</returns>
      <param name="dataSpace">Das konzeptionelle Modell, für das die Liste von Elementen benötigt wird.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt zurück, das den Objektraumtyp darstellt, der dem vom Parameter edmSpaceType angegebenen Typ entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den Objektraumtyp darstellt.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="edmSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt zurück, das den Objektraumtyp darstellt, der dem vom Parameter edmSpaceType angegebenen Typ entspricht.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den Objektraumtyp darstellt.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="edmSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt die Liste der primitiven Typen im angegebenen Datenmodell zurück.</summary>
      <returns>Eine Auflistung des Typs <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle primitiven Typen im angegebenen Datenmodell enthalten sind.</returns>
      <param name="dataSpace">Das Datenmodell, für das die Liste der primitiven Typen benötigt wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>Gibt Member eines angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> / <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> zurück, für die ursprüngliche Werte erforderlich sind, wenn eine Entität geändert wird.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />, für die der ursprüngliche Wert erforderlich ist.</returns>
      <param name="entitySet">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />, das zum C-Space gehört.</param>
      <param name="entityType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />, der am angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> beteiligt ist.</param>
      <param name="partialUpdateSupported">true, wenn Entitäten teilweise aktualisiert werden können, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>Ruft ursprüngliche Wertmember aus einer Entitätenmenge und einem Entitätstyp ab.</summary>
      <returns>Die ursprünglichen Wertmember aus einer Entitätenmenge und einem Entitätstyp.</returns>
      <param name="entitySet">Die Entitätenmenge, aus der ursprüngliche Werte abgerufen werden sollen.</param>
      <param name="entityType">Der Entitätstyp, von dem ursprüngliche Werte abgerufen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe des angegebenen Typnamens, des Namespacenamens und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Typ gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Gibt mithilfe des angegebenen Typnamens, des Namespacenamens und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das den Typ darstellt, der dem angegebenen Typnamen und Namespacenamen im angegebenen Datenmodell entspricht.Wenn kein entsprechender Typ vorhanden ist, gibt diese Methode NULL zurück.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Typ gesucht wird.</param>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der Bereich kein gültiger Bereich ist.Gültige Bereiche sind entweder C, O, CS oder OCSpace.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Lädt Metadaten aus der angegebenen Assembly.</summary>
      <param name="assembly">Die Assembly, aus der die Metadaten geladen werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Lädt Metadaten aus der angegebenen Assembly.</summary>
      <param name="assembly">Die Assembly, aus der die Metadaten geladen werden.</param>
      <param name="logLoadMessage">Der Delegat zum Protokollieren der Lademeldungen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Die höchste EDM-Version, die von der Laufzeit unterstützt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>Registriert die Elementauflistung zu jedem zugeordneten Datenmodell.</summary>
      <param name="collection">Die Auflistung der Ausgabeparameter, die gefüllt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt über den out-Parameter edmSpaceType zurück, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt, der dem vom Parameter objectSpaceType angegebenen Typ entspricht.</summary>
      <returns>True bei Erfolg, false, wenn Fehler auftreten.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt, das den Objektraumtyp darstellt.</param>
      <param name="edmSpaceType">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt über den out-Parameter edmSpaceType zurück, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt, der dem vom Parameter objectSpaceType angegebenen Typ entspricht.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den Objektraumtyp darstellt.</param>
      <param name="edmSpaceType">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Gibt mithilfe des angegebenen Namens des Entitätencontainers und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>true, wenn ein Entitätencontainer vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Entitätencontainer gesucht wird.</param>
      <param name="entityContainer">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt.Wenn kein Entitätencontainer vorhanden ist, enthält dieser Ausgabeparameter NULL, andernfalls wird der erste Entitätencontainer zurückgegeben.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Gibt mithilfe des angegebenen Namens des Entitätencontainers und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt zurück.</summary>
      <returns>true, wenn ein Entitätencontainer vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Entitätencontainers.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Entitätencontainer gesucht wird.</param>
      <param name="entityContainer">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />-Objekt.Wenn kein Entitätencontainer vorhanden ist, enthält dieser Ausgabeparameter NULL, andernfalls wird der erste Entitätencontainer zurückgegeben.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Gibt mithilfe der angegebenen Identität und des Datenmodells ein Element zurück.</summary>
      <returns>true, wenn ein Element vorhanden ist, das den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="identity">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <param name="item">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Metadata.Edm.GlobalIem" />-Objekt.Dieser Parameter wird nicht initialisiert übergeben.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Gibt mithilfe der angegebenen Identität und des Datenmodells ein Element zurück.</summary>
      <returns>true, wenn ein Element vorhanden ist, das den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="identity">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <param name="space">Das konzeptionelle Modell, in dem nach dem Element gesucht wird.</param>
      <param name="item">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Metadata.Edm.GlobalIem" />-Objekt.Dieser Parameter wird nicht initialisiert übergeben.</param>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>Testet den Abruf von <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>true, wenn der Abruf erfolgreich war, andernfalls false.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />, aus dem <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> abgerufen werden soll.</param>
      <param name="collection">Die Rückgabe dieser Methode enthält die Elementauflistung.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt über den out-Parameter objectSpaceType zurück, das den mit <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> übereinstimmenden Typ darstellt, der vom Parameter edmSpaceType angegeben wird.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="edmSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.</param>
      <param name="objectSpaceType">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />-Objekt, das den Objektraumtyp darstellt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt über den out-Parameter objectSpaceType zurück, das den mit <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> übereinstimmenden Typ darstellt, der vom Parameter edmSpaceType angegeben wird.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="edmSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> darstellt.</param>
      <param name="objectSpaceType">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />-Objekt, das den Objektraumtyp darstellt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Gibt mithilfe des angegebenen Typnamens, des Namespacenamens und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Typ gesucht wird.</param>
      <param name="type">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Gibt mithilfe des angegebenen Typnamens, des Namespacenamens und des Datenmodells ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt zurück.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="name">Der Name des Typs.</param>
      <param name="namespaceName">Der Namespace des Typs.</param>
      <param name="dataSpace">Das konzeptionelle Modell, in dem nach dem Typ gesucht wird.</param>
      <param name="type">Die Rückgabe dieser Methode enthält ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>Stellen Sie die EDM-Navigationseigenschaftenklasse dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Erstellt eine NavigationProperty-Instanz aus den angegebenen Parametern.</summary>
      <returns>Die neu erstellte NavigationProperty-Instanz.</returns>
      <param name="name">Der Name der Navigationseigenschaft.</param>
      <param name="typeUsage">Gibt den Navigationseigenschaftentyp und dessen Facets an.</param>
      <param name="relationshipType">Der Beziehungstyp für die Navigation.</param>
      <param name="from">Das Quellendenelement in der Navigation.</param>
      <param name="to">Das Zielendelement in der Navigation.</param>
      <param name="metadataProperties">Die Metadateneigenschaften der Navigationseigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Ruft das End-Member der "from"-Beziehung in dieser Navigation ab.</summary>
      <returns>Das End-Member der "from"-Beziehung in dieser Navigation.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Wenn sich die angegebene Navigationseigenschaft am Ende einer abhängigen referenziellen Einschränkung befindet, werden die Fremdschlüsseleigenschaften zurückgegeben.Andernfalls wird eine leere Menge zurückgegeben.Wir geben die Elemente in der Reihenfolge der Prinzipalendschlüssel-Eigenschaften zurück.</summary>
      <returns>Eine Auflistung der Fremdschlüsseleigenschaften.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Ruft den Beziehungstyp ab, den diese Navigationseigenschaft verarbeitet.</summary>
      <returns>Der Beziehungstyp, den diese Navigationseigenschaft verarbeitet.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Ruft das End-Member der "to"-Beziehung in dieser Navigation ab.</summary>
      <returns>Das End-Member der "to"-Beziehung in dieser Navigation.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>Klasse für die Darstellung einer Auflistung von Elementen für die Objektebene.Die Implementierung für die tatsächliche Wartung der Auflistung erfolgt hauptsächlich durch ItemCollection.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Die Methode gibt den zugrunde liegenden CLR-Typ für das angegebene OSpace-Typargument zurück.Wenn der DataSpace des Parameters nicht OSpace ist, wird eine ArgumentException ausgelöst.</summary>
      <returns>Der CLR-Typ des OSpace-Arguments.</returns>
      <param name="objectSpaceType">Der OSpace-Typ, der gesucht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Gibt den CLR-Typ zurück, der dem vom objectSpaceType-Parameter bereitgestellten <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> entspricht.</summary>
      <returns>Der CLR-Typ des OSpace-Arguments.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, der den Objektraumtyp darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Gibt alle Elemente des angegebenen Typs zurück, die zu dieser Elementauflistung gehören.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der alle Elemente des angegebenen Typs enthalten sind.</returns>
      <typeparam name="T">Der von der Methode zurückgegebene Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Gibt eine Auflistung von Objekten des primitiven Typs zurück.</summary>
      <returns>Eine Auflistung von Objekten des primitiven Typs.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Lädt Metadaten aus der angegebenen Assembly.</summary>
      <param name="assembly">Die Assembly, aus der die Metadaten geladen werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>Lädt Metadaten aus der angegebenen Assembly.</summary>
      <param name="assembly">Die Assembly, aus der die Metadaten geladen werden.</param>
      <param name="edmItemCollection">Die EDM-Metadatenquelle für die Objektbereichsmetadaten.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Lädt Metadaten aus der angegebenen Assembly.</summary>
      <param name="assembly">Die Assembly, aus der die Metadaten geladen werden.</param>
      <param name="edmItemCollection">Die EDM-Metadatenquelle für die Objektbereichsmetadaten.</param>
      <param name="logLoadMessage">Der Delegat, an den Protokollmeldungen gesendet werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>Gibt den zugrunde liegenden CLR-Typ des angegebenen enum-Typarguments von OSpace zurück.Wenn der DataSpace des Parameters nicht OSpace ist, gibt die Methode false zurück und legt den out-Parameter auf NULL fest.</summary>
      <returns>true bei Erfolg, false, wenn Fehler auftreten.</returns>
      <param name="objectSpaceType">Der OSpace enum-Typ, der gesucht werden soll.</param>
      <param name="clrType">Der CLR-Aufzählungstyp des OSpace-Arguments</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Gibt einen CLR-Typ zurück, der dem vom objectSpaceType-Parameter bereitgestellten <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> entspricht.</summary>
      <returns>true, wenn ein Typ vorhanden ist, der den Suchkriterien entspricht, andernfalls, false.</returns>
      <param name="objectSpaceType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, der den Objektraumtyp darstellt.</param>
      <param name="clrType">Der CLR-Typ.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>Stellt die Liste der möglichen Aktionen für den Löschvorgang dar.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>Überlappend zu anderen Enden.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>Keine Aktion.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>Die Aufzählung, die den Modus eines Parameters definiert.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>In-Parameter</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>In- und Out-Parameter</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Out-Parameter</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Rückgabeparameter</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>Die Aufzählung, die die Typsemantik definiert, die zum Auflösen von Funktionsüberladungen verwendet wird.Diese Kennzeichen sind im Anbietermanifest für jede Funktionsdefinition definiert.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Ermöglichen Sie die implizite Konvertierung zwischen den angegebenen und formalen Argumenttypen (Standard).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Ermöglichen Sie die Typerweiterung zwischen den angegebenen und formalen Argumenttypen.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Verwenden Sie ausschließlich die strenge Äquivalenz.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>Klasse, die einen primitiven Typ darstellt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Gibt den entsprechenden CLR-Typ dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> zurück.Die <see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" />-Eigenschaft gibt immer einen Typwert zurück, der keine NULL-Werte zulässt.</summary>
      <returns>Ein <see cref="T:System.Type" />-Objekt, das den entsprechenden CLR-Typ dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Ruft die Liste von Facetbeschreibungen für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der die Liste der Facetbeschreibungen für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> enthalten ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Gibt den entsprechenden <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> entspricht.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Gibt den entsprechenden <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> eines <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das dem angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> entspricht.</returns>
      <param name="primitiveTypeKind">Ein Wert vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Gibt die Liste der primitiven Typen zurück.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, in der die Liste der primitiven Typen enthalten ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Ruft einen <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" />-Aufzählungswert ab, der den primitiven Typ von diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> angibt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" />-Aufzählungswert, der den primitiven Typ von diesem <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> angibt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>Primitive Typen wie durch EDM definiert</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Typart Binary</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Typart Boolean</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Typart Byte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Typart DateTime</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Typart DateTimeOffset</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Typart Decimal</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Typart Double</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Typart Geografie</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Typart geografische Auflistung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Typart geografischer LineString</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Typart geografische Multilinien-Zeichenfolge</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Typart geografischer Multipunkt</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Typart geografisches Multipolygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Typart geografischer Punkt</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Typart geografisches Polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Typart Geometrie</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Typart geometrische Auflistung</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Typart geometrischer LineString</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Typart geometrische Multilinien-Zeichenfolge</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Typart geometrischer Multipunkt</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Typart geometrische Multipolygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Typart geometrischer Punkt</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Typart geometrisches Polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Typart GUID</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Typart Int16</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Typart Int32</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Typart Int64</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Typart SByte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Typart Single</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Typart String</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Typart Time</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>Gibt die Arten der Elementattribute im konzeptionellen Modell an.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>Ein Aufzählungsmember, der angibt, dass ein Elementattribut "Extended" ist.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>Ein Aufzählungsmember, der angibt, dass ein Elementattribut "System" ist.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Klasse, die einen schreibgeschützten Wrapper für MetadataCollection darstellt.</summary>
      <typeparam name="T">Der Typ der Elemente in dieser Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Bestimmt, ob die Auflistung ein Element mit der angegebenen Identität enthält.</summary>
      <returns>true, wenn das gesuchte Element in der Auflistung enthalten ist, andernfalls false.Der Standardwert ist false.</returns>
      <param name="identity">Die Identität des Elements.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der diese Auflistung durchlaufen kann.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />, die zum Durchlaufen von <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" /> verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Ruft unter Verwendung der angegebenen Identität ein Element aus dieser Auflistung ab.</summary>
      <returns>Ein Element aus dieser Auflistung.</returns>
      <param name="identity">Die Identität des Elements, nach dem gesucht werden soll.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Gibt den Index des angegebenen Werts in der Auflistung zurück.</summary>
      <returns>Der Index des angegebenen Werts in der Auflistung.</returns>
      <param name="value">Ein zu suchender Wert.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob diese Auflistung schreibgeschützt ist.</summary>
      <returns>true, wenn diese Auflistung schreibgeschützt ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Ruft unter Verwendung der angegebenen Identität ein Element aus dieser Auflistung ab.</summary>
      <returns>Ein Element aus dieser Auflistung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Ruft unter Verwendung der angegebenen Identität ein Element aus dieser Auflistung ab.</summary>
      <returns>true, wenn ein Element vorhanden ist, das den Suchkriterien entspricht, andernfalls false.</returns>
      <param name="identity">Die Identität des Elements, nach dem gesucht werden soll.</param>
      <param name="ignoreCase">true, wenn eine Suche ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="item">Nach dem Beenden dieser Methode enthält dieser Ausgabeparameter ein Element aus der Auflistung.Wenn kein übereinstimmendes Element vorhanden ist, enthält dieser Ausgabeparameter NULL.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Der Enumerator für MetadataCollection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Ruft den Member an der aktuellen Position ab.</summary>
      <returns>Der Member an der aktuellen Position.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Löscht diesen Enumerator.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Wechselt zum nächsten Member in der Auflistung des Typs <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>true, wenn der Enumerator in der Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> verschoben wurde, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Positioniert den Enumerator vor der ersten Position in der Auflistung des Typs <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft den Member an der aktuellen Position ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>Diese Klasse stellt eine referenzielle Einschränkung zwischen zwei Entitäten dar, die die Endpunkte "von" und "zu" der Beziehung angibt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Erstellt eine neue Einschränkung für die Beziehung.</summary>
      <param name="fromRole">Rolle, von der die Beziehung ausgeht.</param>
      <param name="toRole">Rolle, mit der die Beziehung verknüpft ist bzw. auf die sie abzielt.</param>
      <param name="fromProperties">Eigenschaften für Entitätstyp In Rolle, der an der Einschränkung teilnimmt.</param>
      <param name="toProperties">Eigenschaften für Entitätstyp Aus Rolle, der an der Einschränkung teilnimmt.</param>
      <exception cref="T:System.ArgumentNullException">Argument NULL-Ausnahme, wenn eines der Argumente NULL entspricht.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Ruft eine Liste der Eigenschaften für die "Quellrolle" ab, für die diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> definiert ist.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Eigenschaften der "Quellrolle" enthält, für die diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> definiert ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Ruft die zu dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> gehörige "Quellrolle" ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />-Objekt, das die zu dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> gehörige "Quellrolle" darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Ruft eine Liste der Eigenschaften der "Zielrolle" ab, für die diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> definiert ist.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Eigenschaften für die "Zielrolle" enthält, für die diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> definiert ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Ruft die zu dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> gehörige "Zielrolle" ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />-Objekt, das die zu dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> gehörige "Zielrolle" darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Gibt die Kombination der Namen von <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> und <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> zurück.</summary>
      <returns>Die Kombination der Namen von <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> und <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>Stellt eine Klasse für einen Verweistyp dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>Ruft den Entitätstyp ab, auf den von <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> verwiesen wird.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />-Objekt, das den Entitätstyp darstellt, auf den von <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> verwiesen wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>Initialisiert eine neue Instanz der RelationshipEndMember-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Ruft das Operationsverhalten dieses Endmembers der Beziehung ab.</summary>
      <returns>Einer der <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" />-Werte.Der Standardwert ist <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Greift auf den EntityType des EndMember in einer Zuordnung zu.</summary>
      <returns>Der EntityType des EndMember in einer Zuordnung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Ruft die Multiplizität dieses Endmembers der Beziehung ab.</summary>
      <returns>Einer der <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Werte.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>Stellt die Multiplizitätsinformationen über das End-Element eines Beziehungstyps dar.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>Der untere Grenzwert ist 0, und der obere Grenzwert ist NULL.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Der untere und obere Grenzwert beträgt 1.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>Der untere Grenzwert ist 0 und der obere Grenzwert 1.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>Klasse zur Darstellung einer Beziehungsmenge.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Ruft den Beziehungstyp dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" />-Objekt, das den Beziehungstyp dieses <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>Stellt den Beziehungstyp dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Ruft die Liste von Enden für diesen Beziehungstyp ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die die Liste der Enden dieses Beziehungstyps enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Stellt den EDM-Zeilentyp dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Die Factorymethode zum Erstellen des <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />-Objekts.</summary>
      <returns>Eine neue schreibgeschützte Instanz des Objekts <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
      <param name="properties">Eigenschaften des Zeilentypobjekts.</param>
      <param name="metadataProperties">Metadateneigenschaften, die der Funktion hinzugefügt werden.Kann NULL sein.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>Ruft eine Auflistung von Eigenschaften ab, die durch den aktuellen Typ definiert werden.</summary>
      <returns>Eine Auflistung von Eigenschaften, die durch den aktuellen Typ definiert werden.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>Ruft die Liste von Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, in der die Liste der Eigenschaften für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> enthalten ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>Klasse, die einen einfachen Typ darstellt.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>Stellt Methoden zur Serialisierung des Speicherabschnitts (Datenbank) eines <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> in XML bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" />-Klasse.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>Tritt ein, wenn ein Fehler beim Serialisieren des Modells auftritt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Serialisiert das <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> in den <see cref="T:System.Xml.XmlWriter" />.</summary>
      <returns>true, wenn model serialisiert werden kann, andernfalls false.</returns>
      <param name="dbDatabase">Das zu serialisierende EdmModel.</param>
      <param name="namespaceName">Der Namespacename für das Schemaelement.</param>
      <param name="provider">Die Anbieterinformationen zum Schemaelement.</param>
      <param name="providerManifestToken">Die ProviderManifestToken-Informationen zum Schemaelement.</param>
      <param name="xmlWriter">Der XmlWriter, zu dem die Serialisierung vorgenommen werden soll.</param>
      <param name="serializeDefaultNullability">Dieser Wert gibt an, ob Attribute, die NULL-Werte zulassen, serialisiert werden sollen, wenn diese auf den Standardwert gesetzt sind.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Serialisiert das <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> in den <see cref="T:System.Xml.XmlWriter" />.</summary>
      <returns>true, wenn model serialisiert werden kann, andernfalls false.</returns>
      <param name="dbDatabase">Das zu serialisierende EdmModel.</param>
      <param name="provider">Die Anbieterinformationen zum Schemaelement.</param>
      <param name="providerManifestToken">Die ProviderManifestToken-Informationen zum Schemaelement.</param>
      <param name="xmlWriter">Der XmlWriter, zu dem die Serialisierung vorgenommen werden soll.</param>
      <param name="serializeDefaultNullability">Dieser Wert gibt an, ob Attribute, die NULL-Werte zulassen, serialisiert werden sollen, wenn diese auf den Standardwert gesetzt sind.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>Das Muster für servergenerierte Eigenschaften.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Sowohl bei Verwendung von INSERT als auch bei Verwendung von UPDATE wird ein Wert generiert.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Bei Verwendung von INSERT wird ein Wert generiert, der bei Updates nicht geändert wird.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>Keine servergenerierte Eigenschaft.Dies ist die Standardeinstellung.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>Klasse zur Darstellung einer Elementeauflistung im Speicherbereich.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />-Klasse mit dem angegebenen XML-Reader.</summary>
      <param name="xmlReaders">XML-Reader, der zum Erstellen von Metadaten verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />-Klasse.</summary>
      <param name="model">Das Modell der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />-Auflistung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Initialisiert unter Verwendung der angegebenen Dateipfade eine neue Instanz der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />-Klasse.</summary>
      <param name="filePaths">Die Dateipfade, die zum Erstellen von Metadaten verwendet werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Factorymethode, die eine <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> erstellt.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />-Instanz, wenn keine Fehler festgestellt wurden.Andernfalls ist der Wert null.</returns>
      <param name="xmlReaders">Zu ladende SSDL-Artefakte.Darf nicht null sein.</param>
      <param name="filePaths">Pfade zu SSDL-Artefakten.Wird in Fehlermeldungen verwendet.Kann null sein. In diesem Fall wird der Basis-URI von XmlReader als Pfad verwendet.</param>
      <param name="resolver">Benutzerdefinierter Resolver.Wird aktuell verwendet, um die DbProviderServices-Implementierung aufzulösen.Wenn null vorliegt, wird der Standardresolver verwendet.</param>
      <param name="errors">Die beim Laden erkannte Fehlerauflistung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Gibt eine Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />-Objekt, das die Auflistung der <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />-Objekte darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>Ruft die Anbieterfactory der StoreItemCollection ab.</summary>
      <returns>Die Anbieterfactory der StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>Ruft den invarianten Namen der StoreItemCollection ab.</summary>
      <returns>Der invariante Namen der StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>Ruft das Anbietermanifest der StoreItemCollection ab.</summary>
      <returns>Das Anbietermanifest der StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>Ruft das Manifesttoken der StoreItemCollection ab.</summary>
      <returns>Das Manifesttoken der StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>Ruft die Version des Speicherschemas für diese Auflistung ab.</summary>
      <returns>Die Version des Speicherschemas für diese Auflistung.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>Stellt den strukturellen Typ dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Fügt diesem Typ ein Element hinzu.</summary>
      <param name="member">Das hinzuzufügende Element.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>Ruft eine Liste der Member dieses Typs ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die einen Satz von Membern dieses Typs enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Entfernt ein Element aus diesem Typ.</summary>
      <param name="member">Das zu entfernende Element.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>Klasse, die Typinformationen für ein Element darstellt.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Ruft die integrierte Typart für diesen <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />-Objekt, das die integrierte Typart für diese <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>Factorymethode zum Erstellen von TypeUsage mit angegebenem EdmType und Facets.</summary>
      <returns>neue TypeUsage-Instanz</returns>
      <param name="edmType">EdmType, wofür eine Typenverwendung erstellt wird.</param>
      <param name="facets">in das neue TypeUsage zu kopierende Facets</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Erstellt mithilfe der angegebenen Facetwerte ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines binary-Typs.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, durch das der binary-Typ mithilfe der angegebenen Facetwerte beschrieben wird.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
      <param name="isFixedLength">true legt die Länge des binary-Typs auf fixed fest, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Erstellt mithilfe der angegebenen Facetwerte ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines binary-Typs.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, durch das der binary-Typ mithilfe der angegebenen Facetwerte beschrieben wird.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
      <param name="isFixedLength">true legt die Länge des binary-Typs auf fixed fest, andernfalls false.</param>
      <param name="maxLength">Die maximale Länge des binary-Typs.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Erstellt ein <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />-Objekt des Typs, der von den Parametern beschrieben wird.</summary>
      <returns>Ein <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />-Objekt.</returns>
      <param name="primitiveType">Der einfache Typ, der die Maßeinheit des Offsets definiert.</param>
      <param name="precision">Der Grad der Granularität des <see cref="T:System." /> DateTimeOffset in Sekundenbruchteilen, beruhend auf der unterstützten Anzahl von Dezimalstellen.Zum Beispiel bedeutet die Genauigkeit 3, dass als Granularität Millisekunden unterstützt werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Erstellt ein <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />-Objekt des Typs, der von den Parametern beschrieben wird.</summary>
      <returns>Ein <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />-Objekt.</returns>
      <param name="primitiveType">Der einfache Typ, der die Maßeinheit des <see cref="T:System." /> DateTime-Objekts definiert.</param>
      <param name="precision">Der Grad der Granularität des <see cref="T:System." /> DateTimeOffset in Sekundenbruchteilen, beruhend auf der unterstützten Anzahl von Dezimalstellen.Zum Beispiel bedeutet die Genauigkeit 3, dass als Granularität Millisekunden unterstützt werden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines Dezimaltyps mit unbegrenzter Genauigkeit und Skalierungsfacetwerten.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, das einen Dezimaltyp mit unbegrenzter Genauigkeit und Skalierungsfacetwerten beschreibt.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Erstellt mithilfe der angegebenen Facetwerte ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines Dezimaltyps.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, durch das der Dezimaltyp mithilfe der angegebenen Facetwerte beschrieben wird.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
      <param name="precision">Die Genauigkeit des Dezimaltyps als Typ <see cref="T:System.Byte" />.</param>
      <param name="scale">Die Anzahl der Dezimalstellen des Dezimaltyps als Typ <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt mit dem angegebenen Typ des konzeptionellen Modells.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt mit den Standardfacetwerten für den angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</returns>
      <param name="edmType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Erstellt mithilfe der angegebenen Facetwerte und unbegrenzter MaxLength ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines Zeichenfolgentyps.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, mit dem ein Zeichenfolgentyp mithilfe der angegebenen Facetwerte und unbegrenzter MaxLength beschrieben wird.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
      <param name="isUnicode">true legt die Standardzeichencodierung des Zeichenfolgentyps auf Unicode fest, andernfalls false.</param>
      <param name="isFixedLength">true legt die Länge des Zeichenfolgentyps auf fixed fest, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Erstellt mithilfe der angegebenen Facetwerte ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt zur Beschreibung eines Zeichenfolgentyps.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt, durch das der Zeichenfolgentyp mithilfe der angegebenen Facetwerte beschrieben wird.</returns>
      <param name="primitiveType">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, für den das <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt erstellt wird.</param>
      <param name="isUnicode">true legt die Standardzeichencodierung des Zeichenfolgentyps auf Unicode fest, andernfalls false.</param>
      <param name="isFixedLength">true legt die Standardzeichencodierung des Zeichenfolgentyps auf Unicode fest, andernfalls false.</param>
      <param name="maxLength">true legt die Länge des Zeichenfolgentyps auf fixed fest, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Erstellt ein <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />-Objekt des Typs, der von den Parametern beschrieben wird.</summary>
      <returns>Ein <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />-Objekt.</returns>
      <param name="primitiveType">Der einfache Typ, der die Maßeinheit des <see cref="T:System." /> DateTime-Objekts definiert.</param>
      <param name="precision">Der Grad der Granularität des <see cref="T:System." /> DateTimeOffset in Sekundenbruchteilen, beruhend auf der unterstützten Anzahl von Dezimalstellen.Zum Beispiel bedeutet die Genauigkeit 3, dass als Granularität Millisekunden unterstützt werden.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>Ruft die in dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typinformationen ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />-Objekt, das die in dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typinformationen darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>Ruft die Liste der Facets für den in dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typ ab.</summary>
      <returns>Eine Auflistung vom Typ <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, die eine Liste mit Facets für den in dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typ enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Überprüft, ob es sich bei dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> um einen Untertyp der angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> handelt.</summary>
      <returns>true, wenn es sich bei dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> um einen Untertyp der angegebenen <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> handelt, andernfalls false.</returns>
      <param name="typeUsage">Das zu überprüfende <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Objekt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>Gibt eine Modelltypverwendung für einen Anbietertyp zurück.</summary>
      <returns>Typenverwendung von Modell (CSpace)</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>Gibt den vollständigen Namen des in dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typs zurück.</summary>
      <returns>Der vollständige Name des von dieser <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> beschriebenen Typs als Zeichenfolge.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>Nimmt die Zwischenspeicherung einer ELinq-Abfrage vor.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`10" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`11" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`12" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`13" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg11">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg11 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`14" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg11">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg11 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg12">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg12 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`15" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg11">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg11 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg12">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg12 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg13">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg13 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`16" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg11">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg11 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg12">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg12 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg13">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg13 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg14">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg14 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`17" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg8">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg8 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg9">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg9 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg10">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg10 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg11">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg11 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg12">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg12 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg13">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg13 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg14">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg14 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg15">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg15 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`2" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`3" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`4" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`5" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`6" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`7" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`8" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Erstellt einen neuen Delegaten, der die kompilierte LINQ to Entities-Abfrage darstellt.</summary>
      <returns>
        <see cref="T:System.Func`9" />, ein generischer Delegat, der die kompilierte LINQ to Entities-Abfrage darstellt.</returns>
      <param name="query">Der zu kompilierende Lambda-Ausdruck.</param>
      <typeparam name="TArg0">Ein von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> abgeleiteter Typ.</typeparam>
      <typeparam name="TArg1">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg1 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg2">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg2 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg3">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg3 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg4">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg4 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg5">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg5 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg6">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg6 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TArg7">Stellt den Parametertyp dar, der übergeben werden muss, wenn der von dieser Methode zurückgegebene Delegat ausgeführt wird.TArg7 muss ein primitiver Typ sein.</typeparam>
      <typeparam name="TResult">Der T-Typ der Abfrageergebnisse, der durch die Ausführung des bei der <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />-Methode zurückgegebenen Delegats zurückgegeben wird.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>Die Werte, die derzeit den Eigenschaften einer Entität zugewiesen sind.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>Bietet Zugriff auf die ursprünglichen Werte von Objektdaten.Die DbUpdatableDataRecord-Klasse implementiert Methoden, die Aktualisierungen der ursprünglichen Werte eines Objekts ermöglichen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Ruft Datensatzinformationen ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />-Objekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Ruft die Anzahl von Feldern im Datensatz ab.</summary>
      <returns>Ein ganzzahliger Wert, der der Feldanzahl entspricht.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Ruft den Feldwert als booleschen Wert ab.</summary>
      <returns>Der Feldwert als boolescher Wert.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Ruft den Feldwert als Byte ab.</summary>
      <returns>Der Feldwert als Byte.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Ruft den Feldwert als Bytearray ab.</summary>
      <returns>Die Anzahl der kopierten Bytes.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
      <param name="dataIndex">Der Index, an dem mit dem Kopieren von Daten begonnen wird.</param>
      <param name="buffer">Der Zielpuffer, in den die Daten kopiert werden.</param>
      <param name="bufferIndex">Der Index im Zielpuffer, an dem der Kopiervorgang beginnt.</param>
      <param name="length">Die Anzahl der zu kopierenden Bytes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Ruft den Feldwert als Zeichen ab.</summary>
      <returns>Der Feldwert als Zeichen.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Ruft den Feldwert als Zeichenarray ab.</summary>
      <returns>Die Anzahl der kopierten Zeichen.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
      <param name="dataIndex">Der Index, an dem mit dem Kopieren von Daten begonnen wird.</param>
      <param name="buffer">Der Zielpuffer, in den die Daten kopiert werden.</param>
      <param name="bufferIndex">Der Index im Zielpuffer, an dem der Kopiervorgang beginnt.</param>
      <param name="length">Die Anzahl der zu kopierenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Common.DbDataReader" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Ruft einen Feldwert als <see cref="T:System.Data.Common.DbDataRecord" /> ab.</summary>
      <returns>Ein Feldwert als <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Ruft den Namen des Felddatentyps ab.</summary>
      <returns>Der Name des Felddatentyps.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.DateTime" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.DateTime" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Common.DbDataReader" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Ruft den Feldwert als Dezimalzahl ab.</summary>
      <returns>Der Feldwert als Dezimalzahl.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Ruft den Feldwert als Double-Wert ab.</summary>
      <returns>Der Feldwert als Double.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Ruft den Typ eines Felds ab.</summary>
      <returns>Der Typ des Felds.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Ruft den Feldwert als Float-Wert ab.</summary>
      <returns>Der Feldwert als Float.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Guid" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Guid" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Int16" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Int16" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Int32" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Int32" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Int64" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Int64" />.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Ruft den Namen eines Felds ab.</summary>
      <returns>Der Name des Felds.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Ruft die Ordinalzahl eines Felds anhand des Feldnamens ab.</summary>
      <returns>Die Ordinalzahl des Felds.</returns>
      <param name="name">Der Name des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Ruft den Wert eines Felds ab.</summary>
      <returns>Der Wert des Felds.</returns>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Ruft den Feldwert als Zeichenfolge ab.</summary>
      <returns>Der Wert des Felds.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Ruft den Wert eines Felds ab.</summary>
      <returns>Der Wert des Felds.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Füllt ein Array von Objekten mit den Feldwerten des aktuellen Datensatzes auf.</summary>
      <returns>Die Anzahl an zurückgegebenen Feldwerten.</returns>
      <param name="values">Ein Objektarray zum Speichern der Feldwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Gibt zurück, ob das angegebene Feld auf <see cref="T:System.DBNull" /> festgelegt ist.</summary>
      <returns>true, wenn das Feld auf <see cref="T:System.DBNull" /> festgelegt ist, andernfalls false.</returns>
      <param name="i">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Gibt einen Wert mit der angegebenen Ordinalzahl des Felds zurück.</summary>
      <returns>Der Wert mit der angegebenen Feldordinalzahl.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Ruft einen Wert mit dem angegebenen Feldnamen ab.</summary>
      <returns>Der Wert des Felds.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Legt ein Feld auf den <see cref="T:System.DBNull" />-Wert fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Legt den Wert eines Felds in einem Datensatz fest.</summary>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
      <param name="value">Der Wert des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Legt Feldwerte in einem Datensatz fest.</summary>
      <returns>Die Anzahl der festgelegten Felder.</returns>
      <param name="values">Die Werte des Felds.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Ruft den Feldwert als <see cref="T:System.Data.IDataReader" /> ab.</summary>
      <returns>Der Feldwert als <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">Die Ordinalzahl des Felds.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>Stellt CLR-Methoden (Common Language Runtime) bereit, die die kanonischen EDM-Funktionen für die Verwendung in <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities-Abfragen verfügbar macht.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddDays-EDM-Funktion auf, um die angegebene Anzahl von Tagen einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Tage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddDays-EDM-Funktion auf, um die angegebene Anzahl von Tagen einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Tage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddHours-EDM-Funktion auf, um die angegebene Anzahl von Stunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddHours-EDM-Funktion auf, um die angegebene Anzahl von Stunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddHours"-EDM-Funktion auf, um die angegebene Anzahl von Stunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Stunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMicroseconds-EDM-Funktion auf, um die angegebene Anzahl von Mikrosekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Mikrosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMilliseconds-EDM-Funktion auf, um die angegebene Anzahl von Millisekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Millisekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMinutes-EDM-Funktion auf, um die angegebene Anzahl von Minuten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMinutes-EDM-Funktion auf, um die angegebene Anzahl von Minuten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddMinutes"-EDM-Funktion auf, um die angegebene Anzahl von Minuten einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Minuten.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMonths-EDM-Funktion auf, um die angegebene Anzahl von Monaten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Monate.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddMonths-EDM-Funktion auf, um die angegebene Anzahl von Monaten einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Monate.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddNanoseconds-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddNanoseconds-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddNanoseconds"-EDM-Funktion auf, um die angegebene Anzahl von Nanosekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Nanosekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddSeconds-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddSeconds-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "AddSeconds"-EDM-Funktion auf, um die angegebene Anzahl von Sekunden einer Zeitspanne hinzuzufügen.</summary>
      <returns>Ein resultierender Zeitraum.</returns>
      <param name="timeValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddYears-EDM-Funktion auf, um die angegebene Anzahl von Jahren einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Jahre.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische AddYears-EDM-Funktion auf, um die angegebene Anzahl von Jahren einem Datum bzw. einer Uhrzeit hinzuzufügen.</summary>
      <returns>Eine resultierendes Datum/eine resultierende Uhrzeit.</returns>
      <param name="dateValue">Das Eingabedatum/die Eingabezeit.</param>
      <param name="addValue">Die Anzahl der hinzuzufügenden Jahre.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, fungiert diese Methode als ein Operator, um sicherzustellen, dass die Eingabe als Nicht-Unicode-Zeichenfolge verarbeitet wird.</summary>
      <returns>Die Eingabezeichenfolge, behandelt als Nicht-Unicode-Zeichenfolge.</returns>
      <param name="value">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, fungiert diese Methode als ein Operator, um sicherzustellen, dass die Eingabe als Unicode-Zeichenfolge verarbeitet wird.</summary>
      <returns>Die Eingabezeichenfolge, behandelt als Unicode-Zeichenfolge.</returns>
      <param name="value">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateDateTime"-EDM-Funktion auf, um ein neues <see cref="T:System.DateTime" />-Objekt zu erstellen.</summary>
      <returns>Das neue Datum/die neue Uhrzeit.</returns>
      <param name="year">Das Jahr.</param>
      <param name="month">Der Monat (1-basiert).</param>
      <param name="day">Der Tag (1-basiert).</param>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateDateTimeOffset"-EDM-Funktion auf, um ein neues <see cref="T:System.DateTimeOffset" />-Objekt zu erstellen.</summary>
      <returns>Das neue Datum/die neue Uhrzeit.</returns>
      <param name="year">Das Jahr.</param>
      <param name="month">Der Monat (1-basiert).</param>
      <param name="day">Der Tag (1-basiert).</param>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
      <param name="timeZoneOffset">Der Zeitzonenoffsetteil des neuen Datums.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "CreateTime"-EDM-Funktion auf, um ein neues <see cref="T:System.TimeSpan" />-Objekt zu erstellen.</summary>
      <returns>Die neue Zeitspanne.</returns>
      <param name="hour">Die Stunden.</param>
      <param name="minute">Die Minuten.</param>
      <param name="second">Die Sekunden, bei Bedarf einschließlich der Bruchteile von Sekunden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffDays EDM-EDM-Funktion auf, um die Anzahl an Tagen zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Tage zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffDays EDM-EDM-Funktion auf, um die Anzahl an Tagen zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Tage zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffHours-EDM-Funktion auf, um die Anzahl an Stunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Stunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMicroseconds-EDM-Funktion auf, um die Anzahl an Mikrosekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Mikrosekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMilliseconds-EDM-Funktion auf, um die Anzahl an Millisekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Millisekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMinutes-EDM-Funktion auf, um die Anzahl an Minuten zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Minuten zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMonths-EDM-Funktion auf, um die Anzahl an Monaten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Monate zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffMonths-EDM-Funktion auf, um die Anzahl an Monaten zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Monate zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffNanoseconds-EDM-Funktion auf, um die Anzahl an Nanosekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Nanosekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="timeValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="timeValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffSeconds-EDM-Funktion auf, um die Anzahl an Sekunden zwischen zwei Zeitspannen zu berechnen.</summary>
      <returns>Die Anzahl der Sekunden zwischen dem ersten und zweiten Zeitraum.</returns>
      <param name="timeValue1">Die erste Zeitspanne.</param>
      <param name="timeValue2">Die zweite Zeitspanne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffYears-EDM-Funktion auf, um die Anzahl an Jahren zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Jahre zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische DiffYears-EDM-Funktion auf, um die Anzahl an Jahren zwischen zwei Daten/Uhrzeiten zu berechnen.</summary>
      <returns>Die Anzahl der Jahre zwischen dem ersten und zweiten Datum/der ersten und zweiten Uhrzeit.</returns>
      <param name="dateValue1">Das erste Datum/die erste Uhrzeit.</param>
      <param name="dateValue2">Das zweite Datum/die zweite Uhrzeit.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "GetTotalOffsetMinutes"-EDM-Funktion auf, um die Anzahl an Minuten zurückzugeben, die die angegebene Zeit von der UTC-Zeit abweicht.Dieser Wert beträgt im Allgemeinen zwischen +780 und -780 (+13 Stunden bzw. -13 Stunden).</summary>
      <returns>Der Offset der Eingabe aus UTC.</returns>
      <param name="dateTimeOffsetArgument">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Left"-EDM-Funktion auf, um eine gegebene Anzahl des äußersten linken Zeichens in einer Zeichenfolge zurückzugeben.</summary>
      <returns>Eine Zeichenfolge, die die Anzahl der Zeichen enthält, nach der vom linken Rand der Eingabezeichenfolge gefragt wurde.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
      <param name="length">Die Anzahl der zurückzugebenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Reverse"-EDM-Funktion auf, um eine angegebene Zeichenfolge mit umgekehrten Zeichenreihenfolge zurückzugeben.</summary>
      <returns>Die Eingabezeichenfolge mit umgekehrter Reihenfolge der Zeichen.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische "Right"-EDM-Funktion auf, um eine gegebene Anzahl des äußersten rechten Zeichens in einer Zeichenfolge zurückzugeben.</summary>
      <returns>Eine Zeichenfolge, die die Anzahl der Zeichen enthält, nach der vom rechten Rand der Eingabezeichenfolge gefragt wurde.</returns>
      <param name="stringArgument">Die Eingabezeichenfolge.</param>
      <param name="length">Die Anzahl der zurückzugebenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDev-EDM-Funktion auf, um die Standardabweichung der Auflistung zu berechnen.</summary>
      <returns>Die Standardabweichung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische StDevP-EDM-Funktion auf, um die Standardabweichung für die Auffüllung zu berechnen.</summary>
      <returns>Die Standardabweichung für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Truncate-EDM-Funktion auf, um den angegebenen Wert auf die Anzahl der angegebenen Ziffern zu kürzen.</summary>
      <returns>Der abgeschnittene Wert.</returns>
      <param name="value">Der abzuschneidende Wert.</param>
      <param name="digits">Die Anzahl der beizubehaltenden Stellen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Truncate-EDM-Funktion auf, um den angegebenen Wert auf die Anzahl der angegebenen Ziffern zu kürzen.</summary>
      <returns>Der abgeschnittene Wert.</returns>
      <param name="value">Der abzuschneidende Wert.</param>
      <param name="digits">Die Anzahl der beizubehaltenden Stellen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische TruncateTime-EDM-Funktion auf, um das angegebene Datum mit gelöschtem Zeitbereich zurückzugeben.</summary>
      <returns>Das Eingabedatum mit gelöschtem Uhrzeitteil.</returns>
      <param name="dateValue">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische TruncateTime-EDM-Funktion auf, um das angegebene Datum mit gelöschtem Zeitbereich zurückzugeben.</summary>
      <returns>Das Eingabedatum mit gelöschtem Uhrzeitteil.</returns>
      <param name="dateValue">Der zu verwendende Datums-/Uhrzeitwert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische Var-EDM-Funktion auf, um die Varianz der Auflistung zu berechnen.</summary>
      <returns>Die Varianz.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Wenn sie als Teil einer LINQ to Entities-Abfrage verwendet wird, ruft diese Methode die kanonische VarP-EDM-Funktion auf, um die Varianz für die Auffüllung zu berechnen.</summary>
      <returns>Die Varianz für die Auffüllung.</returns>
      <param name="collection">Die Auflistung, mit deren Hilfe die Berechnung ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>Stellt Optionen für die Abfrageausführung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Erstellt eine neue Instanz von <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Die für Entitätsergebnisse zu verwendende Zusammenführungsoption.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>Erstellt eine neue Instanz von <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Die für Entitätsergebnisse zu verwendende Zusammenführungsoption.</param>
      <param name="streaming">true, wenn die Abfrage streamt oder puffert; andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>Ruft die für Entitätsergebnisse zu verwendende Zusammenführungsoption ab.</summary>
      <returns>Die für Entitätsergebnisse zu verwendende Zusammenführungsoption.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Bestimmt, ob die angegebenen Objekte gleich sind.</summary>
      <returns>true, wenn die beiden Objekte gleich sind, andernfalls false.</returns>
      <param name="left">Das zu vergleichende Objekt auf der linken Seite.</param>
      <param name="right">Das zu vergleichende Objekt auf der rechten Seite.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Bestimmt, ob die angegebenen Objekte ungleich sind.</summary>
      <returns>true, wenn die beiden Schlüssel ungleich sind, andernfalls false.</returns>
      <param name="left">Das zu vergleichende Objekt auf der linken Seite.</param>
      <param name="right">Das zu vergleichende Objekt auf der rechten Seite.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>Ruft einen Wert ab, der angibt, ob die Abfrage Streams oder Puffer verwendet.</summary>
      <returns>true, wenn die Abfrage Streams verwendet, andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>Definiert das Verhalten für Implementierungen von IQueryable, das Änderungen an der Mitgliedschaft des Resultset ermöglicht.</summary>
      <typeparam name="TEntity">Typ der vom Abfrageelement zurückgegebenen Entitäten.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Benachrichtigt den Satz, dass dem Satz ein Objekt hinzugefügt werden muss, das eine neue Entität darstellt.</summary>
      <param name="entity">Das neue Objekt, das dem Satz hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>Benachrichtigt den Satz, dass dem Satz ein Objekt hinzugefügt werden muss, das eine vorhandene Entität darstellt.</summary>
      <param name="entity">Das vorhandene Objekt, das dem Satz hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Benachrichtigt den Satz, dass ein Objekt, das eine vorhandene Entität darstellt, aus dem Satz gelöscht werden muss.</summary>
      <param name="entity">Das vorhandene Objekt, das aus dem Satz gelöscht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>Benachrichtigt den Satz, dass ein Objekt, das eine vorhandene Entität darstellt, von dem Satz getrennt werden muss.</summary>
      <param name="entity">Das vom Satz zu trennende Objekt.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>Die verschiedenen Möglichkeiten, wie neue Objekte, die aus der Datenbank geladen wurden, mit vorhandenen Objekten, die bereits im Speicher vorhanden sind, zusammengeführt werden können.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>Fügt nur neue (eindeutige, auf oberster Ebene) Zeilen an.Dies ist das Standardverhalten.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>Ändert den Cache nicht.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>Das gleiche Verhalten wie bei LoadOption.OverwriteChanges.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>Das gleiche Verhalten wie bei LoadOption.PreserveChanges.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext ist das Objekt auf oberster Ebene, das eine Verbindung zwischen der CLR und der Datenbank kapselt und als Gateway für Vorgänge zum Erstellen, Lesen, Aktualisieren und Löschen dient.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />-Klasse mit der angegebenen Verbindung.Während der Konstruktion wird der Metadaten-Arbeitsbereich aus dem <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />-Objekt extrahiert.</summary>
      <param name="connection">Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, das Verweise auf das Modell und die Datenquellenverbindung enthält.</param>
      <exception cref="T:System.ArgumentNullException">connection ist NULL.</exception>
      <exception cref="T:System.ArgumentException">connection oder Metadaten-Arbeitsbereich ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>Erstellt einen ObjectContext mit der angegebenen Verbindung und dem Metadaten-Arbeitsbereich.</summary>
      <param name="connection">Verbindung zum Speicher.</param>
      <param name="contextOwnsConnection">Mit true wird die Verbindung verworfen, wenn der Kontext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />-Klasse mit einer angegebenen Verbindung und einem angegebenen Entitätencontainernamen.</summary>
      <param name="connection">Ein <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, das Verweise auf das Modell und die Datenquellenverbindung enthält.</param>
      <param name="defaultContainerName">Der Name des standardmäßigen Entitätencontainers.Wenn der defaultContainerName mit dieser Methode festgelegt wird, ist die Eigenschaft schreibgeschützt.</param>
      <exception cref="T:System.ArgumentNullException">connection ist NULL.</exception>
      <exception cref="T:System.ArgumentException">connection, defaultContainerName oder Metadaten-Arbeitsbereich ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />-Klasse mit der angegebenen Verbindungszeichenfolge und dem standardmäßigen Entitätencontainernamen.</summary>
      <param name="connectionString">Die Verbindungszeichenfolge, die auch den Zugriff auf die Metadateninformationen bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException">connectionString ist NULL.</exception>
      <exception cref="T:System.ArgumentException">connectionString oder Metadaten-Arbeitsbereich ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />-Klasse mit einer angegebenen Verbindungszeichenfolge und einem angegebenen Entitätencontainernamen.</summary>
      <param name="connectionString">Die Verbindungszeichenfolge, die auch den Zugriff auf die Metadateninformationen bereitstellt.</param>
      <param name="defaultContainerName">Der Name des standardmäßigen Entitätencontainers.Wenn der defaultContainerName mit dieser Methode festgelegt wird, ist die Eigenschaft schreibgeschützt.</param>
      <exception cref="T:System.ArgumentNullException">connectionString ist NULL.</exception>
      <exception cref="T:System.ArgumentException">connectionString, defaultContainerName oder Metadaten-Arbeitsbereich ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>Übernimmt alle Änderungen, die an Objekten im Objektkontext vorgenommen werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Fügt dem Objektkontext ein Objekt hinzu.</summary>
      <param name="entitySetName">Stellt den Namen der Entitätenmenge dar, der optional durch den Entitätencontainernamen qualifiziert werden kann.</param>
      <param name="entity">Das hinzuzufügende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Der entity-Parameter ist NULL oder entitySetName ist nicht geeignet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Kopiert die Skalarwerte aus dem angegebenen Objekt in das Objekt im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, das über den gleichen Schlüssel verfügt.</summary>
      <returns>Das aktualisierte Objekt.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge, der das Objekt angehört.</param>
      <param name="currentEntity">Das getrennte Objekt, das über Eigenschaftsaktualisierungen verfügt, die für das ursprüngliche Objekt übernommen werden sollen.Der Entitätsschlüssel von currentEntity muss zur <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />-Eigenschaft eines Eintrags in <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> passen.</param>
      <typeparam name="TEntity">Der Entitätstyp des Objekts.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName oder current ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus entitySetName stimmt nicht mit der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus dem <see cref="T:System.Data.Entity.Core.EntityKey" /> des Objekts überein oder das Objekt ist nicht im <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> oder befindet sich in einem <see cref="F:System.Data.Entity.EntityState.Detached" />-Zustand oder der Entitätsschlüssel des angegebenen Objekts ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">entitySetName ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Kopiert die skalaren Werte aus dem angegebenen Objekt in den Satz der ursprünglichen Werte des Objekts im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, der über den gleichen Schlüssel verfügt.</summary>
      <returns>Das aktualisierte Objekt.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge, der das Objekt angehört.</param>
      <param name="originalEntity">Das getrennte Objekt mit ursprünglichen Werten, die auf das Objekt angewendet werden sollen.Der Entitätsschlüssel von originalEntity muss zur <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />-Eigenschaft eines Eintrags in <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> passen.</param>
      <typeparam name="TEntity">Der Typ des Entitätsobjekts.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName oder original ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus entitySetName stimmt nicht mit der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus dem <see cref="T:System.Data.Entity.Core.EntityKey" /> des Objekts überein oder ein <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das Objekt ist nicht im <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> vorhanden oder das Objekt befindet sich in einem <see cref="F:System.Data.Entity.EntityState.Added" />- oder <see cref="F:System.Data.Entity.EntityState.Detached" />-Zustand oder der Entitätsschlüssel des angegebenen Objekts ist ungültig oder weist Eigenschaftenänderungen auf.</exception>
      <exception cref="T:System.ArgumentException">entitySetName ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Übernimmt Eigenschaftsänderungen eines getrennten Objekts für ein Objekt, das bereits an den Objektkontext angefügt wurde.</summary>
      <param name="entitySetName">Der Name der Entitätenmenge, der das Objekt angehört.</param>
      <param name="changed">Das getrennte Objekt, das über Eigenschaftsaktualisierungen verfügt, die für das ursprüngliche Objekt übernommen werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">Wenn entitySetName NULL oder eine leere Zeichenfolge ist oder wenn changed den Wert NULL hat.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus entitySetName nicht mit der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus der <see cref="T:System.Data.Entity.Core.EntityKey" /> des Objekts übereinstimmt oder das Objekt nicht im Zustand <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Unchanged" /> ist oder das ursprüngliche Objekt nicht an den Kontext angefügt ist.</exception>
      <exception cref="T:System.ArgumentException">Wenn der Typ des changed-Objekts nicht dem Typ des ursprünglichen Objekts entspricht.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>Fügt ein Objekt oder Objektdiagramm an den Objektkontext an, wenn das Objekt über einen Entitätsschlüssel verfügt.</summary>
      <param name="entity">Das anzufügende Objekt.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Ungültiger Entitätsschlüssel.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Fügt ein Objekt oder Objektdiagramm an den Objektkontext in einer bestimmten Entitätenmenge an.</summary>
      <param name="entitySetName">Stellt den Namen der Entitätenmenge dar, der optional durch den Entitätencontainernamen qualifiziert werden kann.</param>
      <param name="entity">Das anzufügende <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Ungültige Entitätenmenge oder das Objekt verfügt über einen temporären Schlüssel oder das Objekt verfügt über einen <see cref="T:System.Data.Entity.Core.EntityKey" />, und die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> stimmt nicht mit der Entitätenmenge überein, die der Methode als Argument übergeben wurde; oder das Objekt verfügt nicht über einen <see cref="T:System.Data.Entity.Core.EntityKey" />, und es ist keine Entitätenmenge angegeben; oder ein Objekt aus dem Objektdiagramm verfügt über einen temporären <see cref="T:System.Data.Entity.Core.EntityKey" /> oder ein Objekt aus dem Objektdiagramm verfügt über einen ungültigen <see cref="T:System.Data.Entity.Core.EntityKey" /> (Beispiel: Werte im Schlüssel stimmen nicht mit Werten im Objekt überein) oder die Entitätenmenge konnte anhand eines angegebenen entitySetName und Entitätencontainernamens nicht gefunden werden oder ein Objekt aus dem Objektdiagramm ist bereits in einem anderen Status-Manager vorhanden.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>Ruft den Timeoutwert in Sekunden für alle Operationen im Objektkontext ab oder legt diesen fest.Ein NULL-Wert gibt an, dass der Standardwert des zugrunde liegenden Anbieters verwendet wird.</summary>
      <returns>Ein <see cref="T:System.Int32" />-Wert, der den Timeoutwert in Sekunden darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>Ruft die vom Objektkontext verwendete Verbindung ab.</summary>
      <returns>Ein <see cref="T:System.Data.Common.DbConnection" />-Objekt, das der Verbindung entspricht.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>Ruft eine <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" />-Instanz ab, die Optionen enthält, die sich auf das Verhalten des <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> auswirken.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" />-Instanz, die Optionen enthält, die sich auf das Verhalten des <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> auswirken.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>Erstellt die Datenbank mithilfe der aktuellen Datenquellenverbindung und der Metadaten in der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Generiert ein DDL (Data Definition Language)-Skript, das Schemaobjekte (Tabellen, Primärschlüssel, Fremdschlüssel) für die Metadaten in der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> erstellt.<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> lädt Metadaten aus SSDL (Datenspeicherschema-Definitionssprache)-Dateien.</summary>
      <returns>Ein DDL-Skript, das Schemaobjekte für die Metadaten in der <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> erstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Erstellt den Entitätsschlüssel für ein bestimmtes Objekt, oder gibt den Entitätsschlüssel zurück, wenn dieser bereits existiert.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityKey" /> des Objekts.</returns>
      <param name="entitySetName">Der voll qualifizierte Name der Entitätenmenge, der das Entitätsobjekt angehört.</param>
      <param name="entity">Das Objekt, für das der Entitätsschlüssel abgerufen wird.</param>
      <exception cref="T:System.ArgumentNullException">Wenn einer der Parameter NULL ist.</exception>
      <exception cref="T:System.ArgumentException">Wenn entitySetName leer ist oder wenn der Typ des entity-Objekts nicht in der Entitätenmenge vorhanden ist oder wenn entitySetName nicht voll qualifiziert ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn der Entitätsschlüssel anhand der angegebenen Parameter nicht erstellt werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>Erstellt eine Instanz des angeforderten Typs und gibt diese zurück.</summary>
      <returns>Eine Instanz des angeforderten Typs T, oder eine Instanz eines abgeleiteten Typs, der die Verwendung von T mit dem Entity Framework ermöglicht.Das zurückgegebene Objekt ist entweder eine Instanz des angeforderten Typs oder eine Instanz eines abgeleiteten Typs, der es ermöglicht, dass der angeforderte Typ mit dem Entity Framework verwendet wird.</returns>
      <typeparam name="T">Der Typ des zurückzugebenden Objekts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Instanz, die verwendet wird, um Objekte des angegebenen Entitätstyps abzufragen, hinzuzufügen, zu ändern und zu löschen.</summary>
      <returns>Die neue <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Instanz.</returns>
      <typeparam name="TEntity">Der Entitätstyp des angeforderten <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Objekts.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die Eigenschaft <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> ist nicht im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> festgelegt oder der angegebene Typ gehört zu mehr als einer Entitätenmenge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Instanz, die verwendet wird, um Objekte des angegebenen Typs mit dem angegebenen Entitätenmengennamen abzufragen, hinzuzufügen, zu ändern und zu löschen.</summary>
      <returns>Die neue <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Instanz.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge für das zurückgegebene <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Objekt.Die Zeichenfolge muss mit dem Standardcontainernamen qualifiziert werden, wenn die <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" />-Eigenschaft nicht für <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> festgelegt ist.</param>
      <typeparam name="TEntity">Der Entitätstyp des angeforderten <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Objekts.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus entitySetName stimmt nicht mit der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> aus dem <see cref="T:System.Data.Entity.Core.EntityKey" /> des Objekts überein oder die Eigenschaft <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> ist nicht im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> festgelegt und der Name nicht als Teil des entitySetName-Parameters qualifiziert oder der angegebene Typ gehört zu mehr als einer Entitätenmenge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Generiert einen gleichwertigen Typ, der mit dem Entity Framework für jeden Typ in der angegebenen Aufzählung verwendet werden kann.</summary>
      <param name="types">Eine Aufzählung von <see cref="T:System.Type" />-Objekten, die dem konzeptionellen Modell entsprechende benutzerdefinierte Datenklassen darstellen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Erstellt im aktuellen Objektkontext mit der angegebenen Abfragezeichenfolge eine <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> des angegebenen Typs.</returns>
      <param name="queryString">Die auszuführende Abfragezeichenfolge.</param>
      <param name="parameters">Der Abfrage zu übergebende Parameter.</param>
      <typeparam name="T">Der Entitätstyp des zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Der queryString-Parameter oder der parameters-Parameter ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>Überprüft, ob die Datenbank, die in der aktuellen Speicherverbindung als Datenbank angegeben ist, im Speicher vorhanden ist.Das meiste der tatsächlichen Arbeit wird von der DbProviderServices-Implementierung für die aktuelle Speicherverbindung absolviert.</summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>Ruft den Standardcontainernamen ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Standardcontainernamen darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>Löscht die Datenbank, die in der aktuellen Datenquellenverbindung als Datenbank angegeben ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Markiert ein Objekt zum Löschen.</summary>
      <param name="entity">Ein Objekt, das die zu löschende Entität angibt.Das Objekt kann jeden Status außer <see cref="F:System.Data.Entity.EntityState.Detached" /> haben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>Entfernt das Objekt aus dem Objektkontext.</summary>
      <param name="entity">Zu trennendes Objekt.Nur die Entität wird entfernt. Wenn verbundene Objekte vorhanden sind, die vom selben <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> nachverfolgt werden, werden diese nicht automatisch getrennt.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Entität ist diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> nicht zugeordnet (Beispiel: sie wurde neu erstellt und noch keinem Kontext zugeordnet, sie wurde durch einen anderen Kontext abgerufen oder sie wurde bereits getrennt).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>Stellt sicher, dass <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />-Änderungen mit Änderungen in allen von <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> nachverfolgten Objekten synchronisiert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>Gibt die vom Objektkontext verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Gibt die vom Objektkontext verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben; false, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Führt die angegebene Funktion für den Standardcontainer aus.</summary>
      <returns>Ein Objekt, das das Ergebnis der Ausführung dieser Funktion darstellt.</returns>
      <param name="functionName">Name der Funktion.Enthält möglicherweise einen Container (z. B.ContainerName.FunctionName) oder einfach nur einen Funktionsnamen, wenn DefaultContainerName bekannt ist.</param>
      <param name="executionOptions">Die Optionen für das Ausführen dieser Funktion.</param>
      <param name="parameters">Die für die Funktion zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Elementtyp für Funktionsergebnisse.</typeparam>
      <exception cref="T:System.ArgumentException">Wenn function NULL oder leer ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn function ungültig ist (Syntaxfehler, ist nicht vorhanden, verweist auf eine Funktion mit einem mit T inkompatiblen Rückgabetyp).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Führt die angegebene gespeicherte Prozedur oder Funktion, die in der Datenquelle definiert ist und im konzeptionellen Modell ausgedrückt wird, mit den angegebenen Parametern und der angegebenen Zusammenführungsoption aus.Gibt ein typisiertes <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> für die von der gespeicherten Prozedur zurückgegebenen Daten.</returns>
      <param name="functionName">Der Name der gespeicherten Prozedur oder Funktion.Der Name kann den Containernamen enthalten, z. B. &lt;Container Name&gt;.&lt;Function Name&gt;.Wenn der Standardcontainername bekannt ist, wird nur der Funktionsname benötigt.</param>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Objekten.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Entitätstyp des zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, wenn die Funktion für die Datenquelle ausgeführt wird.Dieser Typ muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> implementieren.</typeparam>
      <exception cref="T:System.ArgumentException">function ist NULL oder leer oder function konnte nicht gefunden werden.</exception>
      <exception cref="T:System.InvalidOperationException">Diese function wird vom Entitätsreader nicht unterstützt oder es liegt ein Typenkonflikt zwischen Reader und function vor.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Führt eine gespeicherte Prozedur oder eine Funktion, die in der Datenquelle definiert ist und im konzeptionellen Modell zugeordnet wird, mit den angegebenen Parametern aus.Gibt ein typisiertes <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> für die von der gespeicherten Prozedur zurückgegebenen Daten.</returns>
      <param name="functionName">Der Name der gespeicherten Prozedur oder Funktion.Der Name kann den Containernamen enthalten, z. B. &lt;Container Name&gt;.&lt;Function Name&gt;.Wenn der Standardcontainername bekannt ist, wird nur der Funktionsname benötigt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Objekten.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Entitätstyp des zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, wenn die Funktion für die Datenquelle ausgeführt wird.Dieser Typ muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> implementieren.</typeparam>
      <exception cref="T:System.ArgumentException">function ist NULL oder leer oder function konnte nicht gefunden werden.</exception>
      <exception cref="T:System.InvalidOperationException">Diese function wird vom Entitätsreader nicht unterstützt oder es liegt ein Typenkonflikt zwischen Reader und function vor.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Führt eine gespeicherte Prozedur oder eine Funktion aus, die in der Datenquelle definiert ist und im konzeptionellen Modell ausgedrückt wird, verwirft alle von der Funktion zurückgegebenen Ergebnisse, und gibt die von der Ausführung betroffene Anzahl von Zeilen zurück.</summary>
      <returns>Die Anzahl der betroffenen Zeilen.</returns>
      <param name="functionName">Der Name der gespeicherten Prozedur oder Funktion.Der Name kann den Containernamen enthalten, z. B. &lt;Container Name&gt;.&lt;Function Name&gt;.Wenn der Standardcontainername bekannt ist, wird nur der Funktionsname benötigt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Objekten.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <exception cref="T:System.ArgumentException">function ist NULL oder leer oder function konnte nicht gefunden werden.</exception>
      <exception cref="T:System.InvalidOperationException">Diese function wird vom Entitätsreader nicht unterstützt oder es liegt ein Typenkonflikt zwischen Reader und function vor.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Die Anzahl der betroffenen Zeilen.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Die Anzahl der betroffenen Zeilen.</returns>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle asynchron aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der betroffenen Zeilen.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle asynchron aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der betroffenen Zeilen.</returns>
      <param name="transactionalBehavior">Steuert die Erstellung einer Transaktion für diesen Befehl.</param>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle asynchron aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der betroffenen Zeilen.</returns>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt einen beliebigen Befehl unter Verwendung der vorhandenen Verbindung direkt für die Datenquelle asynchron aus.Der Befehl wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der betroffenen Zeilen.</returns>
      <param name="commandText">Der in der systemeigenen Abfragesprache des Servers angegebene Befehl.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufzählung von Objekten vom Typ <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufzählung von Objekten vom Typ <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nach Kontext nachverfolgt.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufzählung von Objekten vom Typ <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="entitySetName">Die Entitätenmenge vom TResult-Typ.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nicht nachverfolgt.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nach Kontext nachverfolgt.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufzählung von Objekten vom Typ <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="entitySetName">Die Entitätenmenge vom TResult-Typ.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nicht nachverfolgt.</param>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nach Kontext nachverfolgt.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="entitySetName">Die Entitätenmenge vom TResult-Typ.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nicht nachverfolgt.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nach Kontext nachverfolgt.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="entitySetName">Die Entitätenmenge vom TResult-Typ.Wenn kein Entitätenmengenname angegeben wird, werden die Ergebnisse nicht nachverfolgt.</param>
      <param name="executionOptions">Die Optionen für die Ausführung dieser Abfrage.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Führt eine Abfrage, die eine Sequenz typisierter Ergebnisse zurückgibt, direkt für die Datenquelle asynchron aus.Die Abfrage wird mithilfe der systemeigenen Abfragesprache des Servers, wie SQL, angegeben.Ergebnisse werden nicht nach Kontext nachverfolgt; verwenden Sie eine Überladung, die einen Entitätenmengennamen angibt, um die Ergebnisse zu verfolgen.Wie bei allen APIs, die SQL akzeptieren, müssen Sie darauf achten, alle Benutzereingaben zum Schutz vor SQL-Injection-Angriffen zu parametrisieren.Sie können in der SQL-Abfragezeichenfolge Platzhalter für Parameter einschließen und die Parameterwerte anschließend als zusätzliche Argumente angeben.Alle angegebenen Parameterwerte werden automatisch in einen DbParameter konvertiert.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Als Alternative können Sie auch einen DbParameter erstellen und an SqlQuery übergeben.Auf diese Weise können Sie benannte Parameter in der SQL-Abfragezeichenfolge verwenden.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält eine Aufzählung von Objekten des Typs <paramref name="TElement" />.</returns>
      <param name="commandText">Die in der systemeigenen Abfragesprache des Servers angegebene Abfrage.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <param name="parameters">Die für die Abfrage zu verwendenden Parameterwerte.Werden Ausgabeparameter verwendet, sind deren Werte erst nach vollständigem Lesen der Ergebnisse verfügbar.Dies liegt an dem zugrundeliegenden Verhalten von DbDataReader; weitere Informationen finden Sie unter http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Der Elementtyp der Ergebnissequenz.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>Schließt eine Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />-Klasse ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Gibt alle vorhandenen Proxytypen zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> aller vorhandenen Proxytypen.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>Gibt ein Objekt mit dem angegebenen Entitätsschlüssel zurück.</summary>
      <returns>Ein <see cref="T:System.Object" />, bei dem es sich um die Instanz eines Entitätstyps handelt.</returns>
      <param name="key">Der Schlüssel des zu suchenden Objekts.</param>
      <exception cref="T:System.ArgumentNullException">Der key-Parameter ist NULL.</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">Das Objekt wurde weder im <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> noch in der Datenquelle gefunden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Gibt den Entitätstyp der POCO-Entität mit einem Proxyobjekt eines angegebenen Typs zurück.</summary>
      <returns>Der <see cref="T:System.Type" /> der zugeordneten POCO-Entität.</returns>
      <param name="type">Das <see cref="T:System.Type" /> des Proxyobjekts.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>Gibt den <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> zurück, der für diesen Kontext verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Lädt ein mit dem angegebenen Objekt verbundenes Objekt explizit anhand der angegebenen Navigationseigenschaft und unter Verwendung der standardmäßigen Zusammenführungsoption.</summary>
      <param name="entity">Die Entität, für die verbundene Objekte geladen werden sollen.</param>
      <param name="navigationProperty">Der Name der Navigationseigenschaft, die die zu ladenden verbundenen Objekte zurückgibt.</param>
      <exception cref="T:System.InvalidOperationException">Die Entität befindet sich im Zustand <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder die Entität ist an eine andere Instanz von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt ein mit dem angegebenen Objekt verbundenes Objekt explizit anhand der angegebenen Navigationseigenschaft und unter Verwendung der angegebenen Zusammenführungsoption.</summary>
      <param name="entity">Die Entität, für die verbundene Objekte geladen werden sollen.</param>
      <param name="navigationProperty">Der Name der Navigationseigenschaft, die die zu ladenden verbundenen Objekte zurückgibt.</param>
      <param name="mergeOption">Der beim Laden der verbundenen Objekte zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />-Wert.</param>
      <exception cref="T:System.InvalidOperationException">Die Entität befindet sich im Zustand <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder die Entität ist an eine andere Instanz von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Lädt ein mit dem angegebenen Objekt verbundenes Objekt explizit anhand der angegebenen LINQ-Abfrage und unter Verwendung der standardmäßigen Zusammenführungsoption.</summary>
      <param name="entity">Das Quellobjekt, für das verbundene Objekte geladen werden sollen.</param>
      <param name="selector">Ein LINQ-Ausdruck, der die zu ladenden verbundenen Objekte definiert.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
      <exception cref="T:System.ArgumentException">selector gibt keinen gültigen Eingabeparameter zurück.</exception>
      <exception cref="T:System.ArgumentNullException">selector ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Entität befindet sich im Zustand <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder die Entität ist an eine andere Instanz von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt ein mit dem angegebenen Objekt verbundenes Objekt explizit anhand der angegebenen LINQ-Abfrage und unter Verwendung der angegebenen Zusammenführungsoption.</summary>
      <param name="entity">Das Quellobjekt, für das verbundene Objekte geladen werden sollen.</param>
      <param name="selector">Ein LINQ-Ausdruck, der die zu ladenden verbundenen Objekte definiert.</param>
      <param name="mergeOption">Der beim Laden der verbundenen Objekte zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />-Wert.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
      <exception cref="T:System.ArgumentException">selector gibt keinen gültigen Eingabeparameter zurück.</exception>
      <exception cref="T:System.ArgumentNullException">selector ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Entität befindet sich im Zustand <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder die Entität ist an eine andere Instanz von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angefügt.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>Ruft den vom Objektkontext verwendeten Metadaten-Arbeitsbereich ab.</summary>
      <returns>Das diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> zugeordnete <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />-Objekt.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>Tritt auf, wenn im Rahmen einer Abfrage oder eines Ladevorgangs ein neues Entitätsobjekt aus Daten in der Datenquelle erstellt wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>Ruft den Objektstatus-Manager ab, der vom Objektkontext verwendet wird, um Objektänderungen nachzuverfolgen.</summary>
      <returns>Der von diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> verwendete <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>Ruft den zugeordneten LINQ-Abfrageanbieter dieses Objektkontexts ab.</summary>
      <returns>Die von diesem Objektkontext verwendete <see cref="T:System.Linq.IQueryProvider" />-Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Aktualisiert eine Auflistung von Objekten im Objektkontext mit Daten aus der Datenbank.</summary>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="collection">Eine <see cref="T:System.Collections.IEnumerable" />-Auflistung von zu aktualisierenden Objekten.</param>
      <exception cref="T:System.ArgumentNullException">collection ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Auflistung ist leer oder ein Objekt ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Aktualisiert ein Objekt im Objektkontext mit Daten aus der Datenbank.</summary>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="entity">Das zu aktualisierende Objekt.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Entität ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Aktualisiert eine Auflistung von Objekten im Objektkontext asynchron mit Daten aus der Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="collection">Eine <see cref="T:System.Collections.IEnumerable" />-Auflistung von zu aktualisierenden Objekten.</param>
      <exception cref="T:System.ArgumentNullException">collection ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Auflistung ist leer oder ein Objekt ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>Aktualisiert eine Auflistung von Objekten im Objektkontext asynchron mit Daten aus der Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="collection">Eine <see cref="T:System.Collections.IEnumerable" />-Auflistung von zu aktualisierenden Objekten.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">collection ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Auflistung ist leer oder ein Objekt ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Aktualisiert ein Objekt im Objektkontext asynchron mit Daten aus der Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="entity">Das zu aktualisierende Objekt.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Entität ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>Aktualisiert ein Objekt im Objektkontext asynchron mit Daten aus der Datenbank.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="refreshMode">Ein <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />-Wert, der angibt, ob Eigenschaftsänderungen im Objektkontext durch Eigenschaftswerte aus der Datenbank überschrieben werden.</param>
      <param name="entity">Das zu aktualisierende Objekt.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode ist ungültig.</exception>
      <exception cref="T:System.ArgumentException">Entität ist nicht an den Kontext angefügt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>Behält alle Aktualisierungen in der Datenbank bei und setzt die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Behält alle Aktualisierungen in der Datenbank bei und setzt optional die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <param name="acceptChangesDuringSave">Dieser Parameter wird für clientseitige Transaktionsunterstützung benötigt.Wenn true festgelegt ist, wird die Änderungsnachverfolgung für alle Objekte nach Abschluss von <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> zurückgesetzt.Wenn false festgelegt ist, muss die <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" />-Methode nach <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> aufgerufen werden.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Behält alle Aktualisierungen in der Datenbank bei und setzt optional die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <param name="options">Ein <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />-Wert, der das Verhalten des Vorgangs bestimmt.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>Behält alle Aktualisierungen in der Datenbank asynchron bei und setzt die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Behält alle Aktualisierungen in der Datenbank asynchron bei und setzt optional die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <param name="options">Ein <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />-Wert, der das Verhalten des Vorgangs bestimmt.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>Behält alle Aktualisierungen in der Datenbank asynchron bei und setzt optional die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <param name="options">Ein <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />-Wert, der das Verhalten des Vorgangs bestimmt.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Behält alle Aktualisierungen in der Datenbank asynchron bei und setzt die Änderungsnachverfolgung im Objektkontext zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Taskergebnis enthält die Anzahl der Objekte im Zustand <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" />, als <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> aufgerufen wurde.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Beim Speichern der Änderungen wurde die vollständige Parallelität verletzt.</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>Tritt auf, wenn Änderungen in der Datenquelle gespeichert werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Gibt sich selbst zurück.ObjectContext implementiert <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" />, um eine allgemeine Schnittstelle für <see cref="T:System.Data.Entity.DbContext" /> und ObjectContext bereitzustellen, beide geben den zugrunde liegenden ObjectContext zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>Ruft den von diesem Kontext verwendeten Transaktionshandler ab.Kann NULL sein, wenn keine Transaktion begonnen wurde.</summary>
      <returns>Der Transaktionshandler.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Übersetzt einen <see cref="T:System.Data.Common.DbDataReader" />, der Zeilen mit Entitätsdaten enthält, in Objekte des angeforderten Entitätstyps.</summary>
      <returns>Eine Aufzählung von Objekten vom Typ TResult.</returns>
      <param name="reader">Das <see cref="T:System.Data.Common.DbDataReader" /> mit Entitätsdaten, die in Entitätsobjekte übersetzt werden sollen.</param>
      <typeparam name="TElement">Der Entitätstyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">Wenn Reader null ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Übersetzt ein <see cref="T:System.Data.Common.DbDataReader" />, das Zeilen mit Entitätsdaten enthält, in einer bestimmten Entitätenmenge und mit der angegebenen Zusammenführungsoption in Objekte des angeforderten Entitätstyps.</summary>
      <returns>Eine Aufzählung von Objekten vom Typ TResult.</returns>
      <param name="reader">Das <see cref="T:System.Data.Common.DbDataReader" /> mit Entitätsdaten, die in Entitätsobjekte übersetzt werden sollen.</param>
      <param name="entitySetName">Die Entitätenmenge vom TResult-Typ.</param>
      <param name="mergeOption">Das beim Hinzufügen übersetzter Objekte zum Objektkontext zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity">Der Entitätstyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">Wenn Reader null ist.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Wenn die angegebene mergeOption kein gültiger <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />-Wert ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn der angegebene entitySetName keine gültige Entitätenmenge für den TResult-Typ ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>Gibt ein Objekt mit dem angegebenen Entitätsschlüssel zurück.</summary>
      <returns>true, wenn das Objekt erfolgreich abgerufen wurde.false, wenn der Schlüssel temporär ist oder die Verbindung bzw. der Wert NULL ist.</returns>
      <param name="key">Der Schlüssel des zu suchenden Objekts.</param>
      <param name="value">Enthält das Objekt, wenn diese Methode erfolgreich beendet wurde.</param>
      <exception cref="T:System.ArgumentException">Nicht kompatible Metadaten für key.</exception>
      <exception cref="T:System.ArgumentNullException">Schlüssel ist NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>Definiert Optionen, die das Verhalten des ObjectContext beeinflussen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>Ruft den Wert ab oder legt den Wert fest, der festlegt, ob SQL-Funktionen und Befehle immer in einer Transaktion ausgeführt werden sollen.</summary>
      <returns>Das Standardtransaktionsverhalten.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Ruft einen booleschen Wert ab, der bestimmt, ob verbundene Objekte beim Zugriff auf eine Navigationseigenschaft automatisch geladen werden, oder legt diesen Wert fest.</summary>
      <returns>true, wenn Lazy Loading (verzögertes Laden) aktiviert ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Ruft einen booleschen Wert ab, der bestimmt, ob für benutzerdefinierte Datenklassen, die Persistenz ignorieren, Proxyinstanzen erstellt werden, oder legt diesen Wert fest.</summary>
      <returns>true, wenn Proxys erstellt werden, andernfalls falseDer Standardwert ist true.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>Ruft einen booleschen Wert ab der bestimmt, ob das einheitliche NullReference-Verhalten verwendet werden soll, oder legt diesen Wert fest.</summary>
      <returns>true, wenn das einheitliche NullReference-Verhalten verwendet werden soll, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>Ruft einen booleschen Wert ab, der bestimmt, ob das C#-Verhalten von NullComparison verwendet werden soll, oder legt diesen Wert fest.</summary>
      <returns>true, wenn das C#-Verhalten von NullComparison verwendet werden soll, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Ruft einen booleschen Wert ab, der bestimmt, ob das PreserveChanges-Legacyverhalten verwendet wird, oder legt diesen Wert fest.</summary>
      <returns>true, wenn das PreserveChanges-Legacyverhalten verwendet werden soll, andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>EventArgs für das ObjectMaterialized-Ereignis.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Ruft das erstellte Entitätsobjekt ab.</summary>
      <returns>Das erstellte Entitätsobjekt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>Delegat für das ObjectMaterialized-Ereignis.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>Diese Klasse stellt einen Abfrageparameter auf Objektebene dar, die aus einem Namen, einem Typ und einem Wert besteht.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Klasse mit dem angegebenen Namen und Wert.</summary>
      <param name="name">Der Name des Parameters.Dieser Name sollte nur den tatsächlichen Namen und nicht die Parametermarkierung "@" enthalten, die in den Entity SQL-Anweisungen verwendet wird.Das erste Zeichen des Ausdrucks muss ein Buchstabe sein.Alle folgenden Zeichen im Ausdruck müssen Buchstaben, Zahlen oder Unterstriche (_) sein.</param>
      <param name="value">Der Anfangswert (und dementsprechend der Typ) des Parameters.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Wert eines Arguments NULL ist.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Wenn der Wert des name-Arguments ungültig ist.Parameternamen müssen mit einem Buchstaben beginnen und können nur Buchstaben, Zahlen und Unterstriche enthalten.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Klasse mit dem angegebenen Namen und Typ.</summary>
      <param name="name">Der Name des Parameters.Dieser Name sollte nur den tatsächlichen Namen und nicht die Parametermarkierung "@" enthalten, die in den Entity SQL-Anweisungen verwendet wird.Das erste Zeichen des Ausdrucks muss ein Buchstabe sein.Alle folgenden Zeichen im Ausdruck müssen Buchstaben, Zahlen oder Unterstriche (_) sein.</param>
      <param name="type">Der CLR-Typ (Common Language Runtime) des Parameters.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Wert eines Arguments NULL ist.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Wenn der Wert des name-Arguments ungültig ist.Parameternamen müssen mit einem Buchstaben beginnen und können nur Buchstaben, Zahlen und Unterstriche enthalten.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>Ruft den Parameternamen ab, der nur über einen Konstruktor festgelegt werden kann.</summary>
      <returns>Der Parametername, der nur über einen Konstruktor festgelegt werden kann.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>Ruft den Parametertyp ab.</summary>
      <returns>Der <see cref="T:System.Type" /> des Parameters.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>Ruft den Parameterwert ab oder legt diesen fest.</summary>
      <returns>Der Parameterwert.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>Stellt eine Auflistung der Abfrageparameter auf Objektebene dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Fügt der Auflistung den angegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> hinzu.</summary>
      <param name="item">Der der Auflistung hinzuzufügende Parameter.</param>
      <exception cref="T:System.ArgumentNullException">Das parameter-Argument ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Das parameter-Argument ist bereits in der Auflistung vorhanden.Dieses Verhalten unterscheidet sich von dem der meisten Auflistungen, die doppelte Einträge zulassen.-oder- Ein anderer Parameter mit dem gleichen Namen wie das parameter-Argument ist bereits in der Auflistung vorhanden.Beachten Sie, dass bei der Suche die Groß- und Kleinschreibung nicht beachtet wird.Dieses Verhalten unterscheidet sich von dem der meisten Auflistungen und ähnelt dem eines <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Typ von parameter ist nicht gültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>Löscht sämtliche <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Instanzen aus der Auflistung.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Überprüft nach Verweis das Vorliegen des angegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> in der Auflistung.</summary>
      <returns>Gibt true zurück, wenn das Parameterobjekt in der Auflistung gefunden wurde, andernfalls false.</returns>
      <param name="item">Der <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />, der in der Auflistung gesucht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Das parameter-Argument ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Ermittelt, ob ein <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> mit dem angegebenen Namen in der Auflistung vorhanden ist.</summary>
      <returns>Gibt true zurück, wenn ein Parameter mit dem angegebenen Namen in der Auflistung gefunden wurde, andernfalls false.</returns>
      <param name="name">Der Name des in der Auflistung zu suchenden Parameters.Dieser Name sollte nur den tatsächlichen Namen und nicht die Parametermarkierung "@" enthalten, die in den Entity SQL-Anweisungen verwendet wird.</param>
      <exception cref="T:System.ArgumentNullException">Der name-Parameter ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>Ermöglicht das Kopieren der Parameter in der Auflistung, beginnend mit dem Objekt am angegebenen Index, in ein angegebenes Array.</summary>
      <param name="array">Das Array, in das die Parameter kopiert werden sollen.</param>
      <param name="arrayIndex">Der Index im Array, von dem ab die Parameter kopiert werden sollen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>Ruft die aktuelle Anzahl der Parameter in der Auflistung ab.</summary>
      <returns>Die Anzahl der aktuell in der Auflistung enthaltenen <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />-Objekte.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>Gibt die Enumeratorinstanzen zurück, sodass die Auflistung durchlaufen und durchsucht werden kann.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Ruft einen Indexer ab, der Aufrufern ermöglicht, Parameter nach Namen abzurufen.</summary>
      <returns>Ein Indexer, der Aufrufern ermöglicht, Parameter nach Namen abzurufen.</returns>
      <param name="name">Der Elementname.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Entfernt nach Verweis eine Instanz eines <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> aus der Auflistung, wenn dieses in der Auflistung vorhanden ist.</summary>
      <returns>Gibt true zurück, wenn das Parameterobjekt in der Auflistung gefunden und daraus entfernt wurde, andernfalls false.</returns>
      <param name="item">Ein Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Das parameter-Argument ist NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> schreibgeschützt ist.</summary>
      <returns>true, wenn <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> schreibgeschützt ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen nicht typisierten Enumerator für die Auflistung zurück.</summary>
      <returns>Eine <see cref="T:System.Collections.IEnumerator" />-Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>Diese Klasse implementiert nicht typisierte Abfragen auf Objektebene.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>Gibt den Befehlstext für die Abfrage zurück.</summary>
      <returns>Ein Zeichenfolgenwert.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>Ruft den dieser Objektabfrage zugeordneten Objektkontext ab.</summary>
      <returns>Der dieser <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz zugeordnete <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Ruft einen Wert ab, der angibt, ob der Abfrageplan zwischengespeichert werden soll, oder legt diesen fest.</summary>
      <returns>Ein Wert, der angibt, ob der Abfrageplan zwischengespeichert werden soll.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Führt die nicht typisierte Objektabfrage mit der angegebenen Zusammenführungsoption aus.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, das eine Auflistung der von dieser Abfrage zurückgegebenen Entitätsobjekte enthält.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Führt die nicht typisierte Objektabfrage mit der angegebenen Zusammenführungsoption asynchron aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Ergebnis der Aufgabe enthält <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> mit einer Auflistung der von der Abfrage zurückgegebenen Entitätsobjekte.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Führt die nicht typisierte Objektabfrage mit der angegebenen Zusammenführungsoption asynchron aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Ergebnis der Aufgabe enthält <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> mit einer Auflistung der von der Abfrage zurückgegebenen Entitätsobjekte.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>Gibt Informationen über den Ergebnistyp der Abfrage zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />-Wert, der Informationen über den Ergebnistyp der Abfrage enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>Ruft ab oder legt fest, wie dem Objektkontext von einer Abfrage zurückgegebene Objekte hinzugefügt werden.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> der Abfrage.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>Ruft die Parameterauflistung für diese Objektabfrage ab.</summary>
      <returns>Die Parameterauflistung für diese <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>Zeigt an, ob die Abfrage gestreamt oder gepuffert wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Ruft einen Wert ab, der angibt, ob die Abfrage eine Auflistung von Abfrageobjekten enthält.</summary>
      <returns>true, wenn die Abfrage eine Auflistung von Abfrageobjekten enthält, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Gibt die Auflistung als <see cref="T:System.Collections.IList" /> zurück, die für die Datenbindung verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Collections.IList" /> von Entitätsobjekten.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> zurück, der bei der Aufzählung die angegebene SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Ruft den Ergebniselementtyp für diese Abfrageinstanz ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Ruft den Ausdruck ab, der diese Abfrage beschreibt.Bei Abfragen, die mit LINQ-Erstellungsmustern erstellt werden, wird eine vollständige LINQ-Ausdrucksstruktur zurückgegeben, andernfalls ein konstanter Ausdruck, der diese Abfrage umbricht.Beachten Sie, dass der Standardausdruck nicht zwischengespeichert wird.Dadurch können wir LINQ- und Entity SQL-Abfragen unterscheiden.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Ruft den <see cref="T:System.Linq.IQueryProvider" /> ab, der dieser Abfrageinstanz zugeordnet ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>Gibt die Befehle zurück, die für die Datenquelle ausgeführt werden sollen.</summary>
      <returns>Eine Zeichenfolge, die die Befehle darstellt, die bei der Abfrage für die Datenquelle ausgeführt werden.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery implementiert stark typisierte Abfragen auf Objektebene.Abfragen werden mit Entity-SQL-Zeichenfolgen angegeben und möglicherweise durch Aufrufen der Entity-SQL-basierten Abfragegeneratormethoden erstellt, die durch ObjectQuery deklariert werden.</summary>
      <typeparam name="T">Der Ergebnistyp dieser ObjectQuery.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz mit dem angegebenen Entity SQL-Befehl als erste Abfrage.</summary>
      <param name="commandText">Die Entity SQL-Abfrage.</param>
      <param name="context">Der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, für den die Abfrage ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz mit dem angegebenen Entity SQL-Befehl als erste Abfrage und der angegebenen Zusammenführungsoption.</summary>
      <param name="commandText">Die Entity SQL-Abfrage.</param>
      <param name="context">Der <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, für den die Abfrage ausgeführt werden soll.</param>
      <param name="mergeOption">Gibt an, wie die Entitäten, die von dieser Abfrage abgerufen werden, mit den Entitäten zusammengeführt werden sollen, die von vorherigen Abfragen für denselben <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> zurückgegeben wurden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>Schränkt die Abfrage auf eindeutige Ergebnisse ein.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch SELECT DISTINCT festgelegt ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Diese Abfragegeneratormethode erstellt eine neue Abfrage, deren Ergebnisse alle Ergebnisse dieser Abfrage sind, und zwar abgesehen von denen, die auch Teil der anderen angegebenen Abfrage sind.</summary>
      <returns>eine neue ObjectQuery-Instanz.</returns>
      <param name="query">Eine Abfrage, die die auszuschließenden Ergebnisse darstellt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Abfrageparameter NULL ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Führt die Objektabfrage mit der angegebenen Zusammenführungsoption aus.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, das eine Auflistung der von dieser Abfrage zurückgegebenen Entitätsobjekte enthält.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Führt die Objektabfrage mit der angegebenen Zusammenführungsoption asynchron aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Ergebnis der Aufgabe enthält <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> mit einer Auflistung der von der Abfrage zurückgegebenen Entitätsobjekte.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Führt die Objektabfrage mit der angegebenen Zusammenführungsoption asynchron aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Ergebnis der Aufgabe enthält <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> mit einer Auflistung der von der Abfrage zurückgegebenen Entitätsobjekte.</returns>
      <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.Der Standardwert ist <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Gruppiert die Abfrageergebnisse nach den angegebenen Kriterien.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz des Typs <see cref="T:System.Data.Common.DbDataRecord" />, die der ursprünglichen Instanz entspricht, für die jedoch GROUP BY festgelegt ist.</returns>
      <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse gruppiert werden.</param>
      <param name="projection">Die Liste ausgewählter Eigenschaften, mit denen die Projektion definiert wird.</param>
      <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
      <exception cref="T:System.ArgumentNullException">Der query- oder der projection-Parameter ist NULL oder eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> mit dem definierten Abfragepfad.</returns>
      <param name="path">Durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">Der Pfad ist NULL.</exception>
      <exception cref="T:System.ArgumentException">path ist empty.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Diese Abfragegeneratormethode erstellt eine neue Abfrage, deren Ergebnisse in dieser Abfrage und in der anderen angegebenen Abfrage sind.</summary>
      <returns>eine neue ObjectQuery-Instanz.</returns>
      <param name="query">Eine Abfrage, die die zu überschneidenden Ergebnisse darstellt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Abfrageparameter NULL ist.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>Ruft den Namen dieser Objektabfrage ab oder legt diesen fest.</summary>
      <returns>Ein Zeichenfolgewert, der den Namen dieser <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>Beschränkt die Abfrage auf Ergebnisse eines bestimmten Typs.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch OFTYPE festgelegt ist.</returns>
      <typeparam name="TResultType">Der Typ von <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, der zurückgegeben wird, wenn die Abfrage mit dem angewendeten Filter ausgeführt wird.</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">Der angegebene Typ ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ordnet die Abfrageergebnisse nach den angegebenen Kriterien.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch ORDER BY festgelegt ist.</returns>
      <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse geordnet werden.</param>
      <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
      <exception cref="T:System.ArgumentNullException">Der keys-Parameter oder der parameters-Parameter ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Der Schlüssel ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Beschränkt die Abfrageergebnisse auf die Eigenschaften, die in der angegebenen Projektion definiert sind.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz des Typs <see cref="T:System.Data.Common.DbDataRecord" />, die der ursprünglichen Instanz entspricht, für die jedoch SELECT festgelegt ist.</returns>
      <param name="projection">Die Liste ausgewählter Eigenschaften, mit denen die Projektion definiert wird.</param>
      <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
      <exception cref="T:System.ArgumentNullException">Die Projektion oder Parameter sind NULL.</exception>
      <exception cref="T:System.ArgumentException">Die Projektion ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Beschränkt die Abfrageergebnisse auf die Eigenschaft, die in der Projektion angegeben ist.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz eines Typs, der mit der angegebenen Projektion kompatibel ist.Die zurückgegebene <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> entspricht der ursprünglichen Instanz, es ist jedoch SELECT VALUE für sie festgelegt.</returns>
      <param name="projection">Die Projektionsliste.</param>
      <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
      <typeparam name="TResultType">Der Typ von <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, der von der <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />-Methode zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">Die Projektion oder Parameter sind NULL.</exception>
      <exception cref="T:System.ArgumentException">Die Projektion ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ordnet die Abfrageergebnisse nach den angegebenen Kriterien und überspringt eine bestimmte Anzahl von Ergebnissen.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch ORDER BY und SKIP festgelegt ist.</returns>
      <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse geordnet werden.</param>
      <param name="count">Die Anzahl zu überspringender Ergebnisse.Dabei muss es sich um eine Konstante oder einen Parameterverweis handeln.</param>
      <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
      <exception cref="T:System.ArgumentNullException">Ein Argument ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Der Schlüssel oder die Anzahl ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.Generic.IEnumerator`1" /> zurück, der bei der Aufzählung die angegebene SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> zurück, der bei der Aufzählung die angegebene SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Beschränkt die Abfrageergebnisse auf eine bestimmte Anzahl von Elementen.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch TOP festgelegt ist.</returns>
      <param name="count">Die Anzahl der Elemente in den Ergebnissen als Zeichenfolge.</param>
      <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
      <exception cref="T:System.ArgumentNullException">Die Anzahl ist NULL.</exception>
      <exception cref="T:System.ArgumentException">count ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Diese Abfragegeneratormethode erstellt eine neue Abfrage, deren Ergebnisse alle Ergebnisse dieser Abfrage sind sowie alle Ergebnisse der anderen Abfrage, jedoch ohne Duplikate (d. h. Ergebnisse sind eindeutig).</summary>
      <returns>eine neue ObjectQuery-Instanz.</returns>
      <param name="query">Eine Abfrage, die die hinzuzufügenden Ergebnisse darstellt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Abfrageparameter NULL ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Diese Abfragegeneratormethode erstellt eine neue Abfrage, deren Ergebnisse alle Ergebnisse dieser Abfrage sind sowie alle Ergebnisse der anderen Abfrage, einschließlich sämtlicher Duplikate (d. h. Ergebnisse sind nicht zwangsläufig eindeutig).</summary>
      <returns>eine neue ObjectQuery-Instanz.</returns>
      <param name="query">Eine Abfrage, die die hinzuzufügenden Ergebnisse darstellt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Abfrageparameter NULL ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Beschränkt die Abfrage auf Ergebnisse, die bestimmten Filterkriterien entsprechen.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch WHERE festgelegt ist.</returns>
      <param name="predicate">Das Filterprädikat.</param>
      <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
      <exception cref="T:System.ArgumentNullException">Das Prädikat oder Parameter sind NULL.</exception>
      <exception cref="T:System.ArgumentException">Das Prädikat ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>Diese Klasse implementiert IEnumerable und IDisposable.Von der ObjectQuery.Execute-Methode wird die Instanz dieser Klasse zurückgegeben.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>Dieser Konstruktor ist nur für die Verwendung bei der Erstellung von Testduplikaten vorgesehen, welche Member mit Pseudo- oder Simulationsverhalten überschreiben.Die Verwendung dieses Konstruktors für andere Zwecke kann zu unerwartetem Verhalten führen, wie etwa zum Auslösen von <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>Führt Aufgaben aus, die mit dem Freigeben oder dem Zurücksetzen von Ressourcen zusammenhängen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>Gibt die vom Objektergebnis verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben; false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>Ruft bei Überschreibung in einer abgeleiteten Klasse den Typ des generischen <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> ab.</summary>
      <returns>Der Typ des generischen <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>Ruft das nächste Resultset einer gespeicherten Prozedur ab.</summary>
      <returns>Ein ObjectResult, das die Werte des folgenden Resultsets auflistet.NULL, wenn es nicht mehr gibt oder wenn das ObjectResult nicht das Ergebnis eines Aufrufs der gespeicherten Prozedur ist.</returns>
      <typeparam name="TElement">Der Typ des Elements.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Ergebnisse der Abfrage durchläuft.</summary>
      <returns>Ein Enumerator, der die Ergebnisse der Abfrage durchläuft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection-Implementierung.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Gibt die Ergebnisse in einem für Datenbindung nützlichen Format zurück.</summary>
      <returns>Eine <see cref="T:System.Collections.IList" /> von Entitätsobjekten.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen asynchronen Enumerator zurück, der die Ergebnisse der Abfrage durchläuft.</summary>
      <returns>Ein asynchrone Enumerator, der die Ergebnisse der Abfrage durchläuft.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>Diese Klasse stellt das Ergebnis der <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" />-Methode dar.</summary>
      <typeparam name="T">Der Typ des Ergebnisses.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>Dieser Konstruktor ist nur für die Verwendung bei der Erstellung von Testduplikaten vorgesehen, welche Member mit Pseudo- oder Simulationsverhalten überschreiben.Die Verwendung dieses Konstruktors für andere Zwecke kann zu unerwartetem Verhalten führen, wie etwa zum Auslösen von <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>Gibt die von <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> verwendeten nicht verwalteten Ressourcen frei und gibt (optional) auch die verwalteten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>Ruft den Typ von <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> ab.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typ des <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Ergebnisse der Abfrage durchläuft.</summary>
      <returns>Ein Enumerator, der die Ergebnisse der Abfrage durchläuft.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Ruft asynchron den Enumerator ab, der <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> durchläuft.</summary>
      <returns>Der Enumerator, der <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> durchläuft.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>Stellt eine typisierte Entitätenmenge dar, die für Erstellungs-, Lese-, Update- und Löschvorgänge verwendet wird.</summary>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Fügt dem Objektkontext in der aktuellen Entitätenmenge ein Objekt hinzu.</summary>
      <param name="entity">Das hinzuzufügende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Kopiert die Skalarwerte aus dem angegebenen Objekt in das Objekt im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, das über den gleichen Schlüssel verfügt.</summary>
      <returns>Das aktualisierte Objekt.</returns>
      <param name="currentEntity">Das getrennte Objekt, das über Eigenschaftsaktualisierungen verfügt, die für das ursprüngliche Objekt übernommen werden sollen.Der Entitätsschlüssel von currentEntity muss zur <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />-Eigenschaft eines Eintrags in <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> passen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Legt die <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" />-Eigenschaft eines <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> entsprechend den Eigenschaftswerten eines angegebenen Objekts fest.</summary>
      <returns>Das aktualisierte Objekt.</returns>
      <param name="originalEntity">Das getrennte Objekt, das über Eigenschaftsaktualisierungen verfügt, die für das ursprüngliche Objekt übernommen werden sollen.Der Entitätsschlüssel von originalEntity muss zur <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />-Eigenschaft eines Eintrags in <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> passen.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>Fügt ein Objekt oder Objektdiagramm an den Objektkontext in der aktuellen Entitätenmenge an.</summary>
      <param name="entity">Das anzufügende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>Erstellt eine Instanz des angegebenen Typs.</summary>
      <returns>Eine Instanz des angeforderten Typs T oder eine Instanz eines Proxytyps, der dem Typ T entspricht.</returns>
      <typeparam name="T">Der Typ des zurückzugebenden Objekts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>Erstellt ein neues Entitätstypobjekt.</summary>
      <returns>Das neue Entitätstypobjekt oder eine Instanz eines Proxytyps, der dem Entitätstyp entspricht.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Markiert ein Objekt zum Löschen.</summary>
      <param name="entity">Ein Objekt, das die zu löschende Entität darstellt.Das Objekt kann jeden Status außer <see cref="F:System.Data.Entity.EntityState.Detached" /> haben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>Entfernt das Objekt aus dem Objektkontext.</summary>
      <param name="entity">Zu trennendes Objekt.Nur die Entität wird entfernt. Wenn verbundene Objekte vorhanden sind, die vom selben <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> nachverfolgt werden, werden diese nicht automatisch getrennt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>Ruft die Metadaten der von dieser <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />-Instanz dargestellten Entitätenmenge ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />-Objekt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>Stellt entweder eine Entität, einen Entitäten-Stub oder eine Beziehung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Lässt die aktuellen Werte als ursprüngliche Werte zu.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Legt die aktuellen Werte des Eintrags entsprechend den Eigenschaftswerten eines angegebenen Objekts fest.</summary>
      <param name="currentEntity">Das getrennte Objekt mit aktualisierten Werten, die auf das Objekt angewendet werden sollen.currentEntity kann auch der Entitätsschlüssel des Objekts sein.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Legt die ursprünglichen Werte des Eintrags entsprechend den Eigenschaftswerten eines angegebenen Objekts fest.</summary>
      <param name="originalEntity">Das getrennte Objekt mit ursprünglichen Werten, die auf das Objekt angewendet werden sollen.originalEntity kann auch der Entitätsschlüssel des Objekts sein.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>Ändert den Zustand des Eintrags in den angegebenen <see cref="T:System.Data.Entity.EntityState" />-Wert.</summary>
      <param name="state">Der <see cref="T:System.Data.Entity.EntityState" />-Wert, der für die <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" />-Eigenschaft des Eintrags festgelegt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>Ruft die aktuellen Eigenschaftswerte des Objekts oder der Beziehung ab, die mit diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> verknüpft ist.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />, der die aktuellen Werte der Objekts oder der Beziehung enthält, die diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>Markiert eine Entität als gelöscht.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>Ruft das Entitätsobjekt ab.</summary>
      <returns>Das Entitätsobjekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>Ruft den Entitätsschlüssel ab.</summary>
      <returns>Der Entitätsschlüssel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>Ruft die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> für das Objekt oder die Beziehung ab.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> für das Objekt oder die Beziehung.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Gibt die Namen der Eigenschaften eines Objekts zurück, die seit dem letzten Aufruf von <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> geändert wurden.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung von Namen als Zeichenfolgen.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Ruft die aktualisierbare Version der ursprünglichen Werte des Objekts ab, das diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> zugeordnet ist.</summary>
      <returns>Die aktualisierbaren ursprünglichen Werte der Objektdaten.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>Verwendet DetectChanges, um zu bestimmen, ob der aktuelle Wert der Eigenschaft mit dem angegebenen Namen vom ursprünglichen Wert abweicht.Beachten Sie, dass dies möglicherweise von der Eigenschaft abweicht, die als geändert markiert ist, da eine Eigenschaft, die nicht geändert wurde, weiterhin als geändert markiert werden kann.</summary>
      <returns>true, wenn sich die Eigenschaft geändert hat, andernfalls false.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>Ruft einen Wert ab, der angibt, ob <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> eine Beziehung darstellt.</summary>
      <returns>true, wenn die <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> eine Beziehung darstellt, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> für <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> ab.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> für <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>Ruft die schreibgeschützte Version der ursprünglichen Werte des Objekts oder der Beziehung ab.</summary>
      <returns>Die schreibgeschützte Version der ursprünglichen Werte des Beziehungssatzeintrags oder der Entität.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>Lehnt alle Änderungen ab, die an der Eigenschaft mit dem angegebenen Namen vorgenommen werden, da bei der Eigenschaft zuletzt ein Laden, Hinzufügen, Speichern erfolgt ist oder Änderungen akzeptiert wurden.Der ursprüngliche Wert der Eigenschaft wird gespeichert, und die Eigenschaft wird nicht mehr als geändert markiert.</summary>
      <param name="propertyName">Der Name der zu ändernden Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Ruft eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Instanz für das durch den Eintrag dargestellte Objekt ab.</summary>
      <returns>Das <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>Legt den Status des Objekts oder der Beziehung fest,, das bzw. die geändert werden soll.</summary>
      <exception cref="T:System.InvalidOperationException">Wenn der Status nicht auf Modified oder Unchanged festgelegt ist,</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Markiert die angegebene Eigenschaft als geändert.</summary>
      <param name="propertyName">Der Name der Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException">Wenn der Status nicht auf Modified oder Unchanged festgelegt ist,</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>Ruft den Status von <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> ab.</summary>
      <returns>Der Status von <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Wird zum Melden verwendet, dass sich eine komplexe Eigenschaft geändert hat. Der Eigenschaftenwert, der bei der EntityMemberChanging zwischengespeichert wurde, wird nun OriginalValues hinzugefügt.</summary>
      <param name="entityMemberName">Der Name der geänderten Entitätseigenschaft der obersten Ebene.</param>
      <param name="complexObject">Das komplexe Objekt, das die geänderte Eigenschaft enthält.</param>
      <param name="complexObjectMemberName">Der Name der Eigenschaft, die für das complexObject geändert wurde.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Wird zum Melden der ausstehenden Änderung einer komplexen Eigenschaft verwendet. Der aktuelle Wert der angegebenen Eigenschaft wird beim Aufrufen dieser Methode zwischengespeichert.</summary>
      <param name="entityMemberName">Der Name der Eigenschaft einer Entität der obersten Ebene, die geändert wird.</param>
      <param name="complexObject">Das komplexe Objekt, das die Eigenschaft enthält, die geändert wird.</param>
      <param name="complexObjectMemberName">Der Name der Eigenschaft des complexObject, die geändert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Wird zum Melden verwendet, dass sich eine skalare Entitätseigenschaft geändert hat. Der Eigenschaftenwert, der bei der EntityMemberChanging zwischengespeichert wurde, wird nun OriginalValues hinzugefügt.</summary>
      <param name="entityMemberName">Der Name der geänderten Entitätseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Wird zum Melden der ausstehenden Änderung einer skalaren Entitätseigenschaft verwendet. Der aktuelle Wert der angegebenen Eigenschaft wird beim Aufrufen dieser Methode zwischengespeichert.</summary>
      <param name="entityMemberName">Der Name der Entitätseigenschaft, die geändert wird.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Gibt den EntityState vom ObjectStateEntry zurück.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>Speichert Objektstatus und Identitätsverwaltung für Entitätstypinstanzen und Beziehungsinstanzen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />-Klasse.</summary>
      <param name="metadataWorkspace">Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, der Zuordnungs- und Metadateninformationen bereitstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>Ändert den Status des <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für ein bestimmtes Objekt in den angegebenen entityState.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für die angegebene Entität.</returns>
      <param name="entity">Das Objekt, dessen Status geändert werden muss.</param>
      <param name="entityState">Der neue Status des Objekts.</param>
      <exception cref="T:System.ArgumentNullException">Wenn die Entität NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn das Objekt nicht getrennt ist und kein Eintrag im Status-manager aufweist, oder wenn Sie den Status von einem beliebigen <see cref="T:System.Data.Entity.EntityState." /> in <see cref="F:System.Data.Entity.EntityState.Detached" /> ändern möchten, oder wenn der Status kein gültiger <see cref="T:System.Data.Entity.EntityState" />-Wert ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>Ändert den Status der Beziehung zwischen zwei Entitätsobjekten, der auf Grundlage der beiden verknüpften Objekte und des Namens der Navigationseigenschaft angegeben wird.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für die geänderte Beziehung.</returns>
      <param name="sourceEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Quellentität an einem Ende der Beziehung.</param>
      <param name="targetEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Zielentität am anderen Ende der Beziehung.</param>
      <param name="navigationProperty">Der Name der Navigationseigenschaft in der Quelle, die das angegebene Ziel zurückgibt.</param>
      <param name="relationshipState">Der angeforderte <see cref="T:System.Data.Entity.EntityState" /> der angegebenen Beziehung.</param>
      <exception cref="T:System.ArgumentNullException">Wenn die Quelle oder das Ziel NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Added" /> aufweist, oder wenn der Status kein gültiger <see cref="T:System.Data.Entity.EntityState" />-Wert ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>Ändert den Status der Beziehung zwischen zwei Entitätsobjekten, der auf Grundlage der beiden verknüpften Objekte und der Eigenschaften der Beziehung angegeben wird.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für die geänderte Beziehung.</returns>
      <param name="sourceEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Quellentität an einem Ende der Beziehung.</param>
      <param name="targetEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Zielentität am anderen Ende der Beziehung.</param>
      <param name="relationshipName">Der Name der Beziehung.</param>
      <param name="targetRoleName">Der Rollenname am Zielende der Beziehung.</param>
      <param name="relationshipState">Der angeforderte <see cref="T:System.Data.Entity.EntityState" /> der angegebenen Beziehung.</param>
      <exception cref="T:System.ArgumentNullException">Wenn die Quelle oder das Ziel NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Added" /> aufweist, oder wenn der Status kein gültiger <see cref="T:System.Data.Entity.EntityState" />-Wert ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>Ändert den Status der Beziehung zwischen zwei Entitätsobjekten, der auf Grundlage der beiden verknüpften Objekte und eines LINQ-Ausdrucks, der die Navigationseigenschaft definiert, angegeben wird.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für die geänderte Beziehung.</returns>
      <param name="sourceEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Quellentität an einem Ende der Beziehung.</param>
      <param name="targetEntity">Die Objektinstanz oder der <see cref="T:System.Data.Entity.Core.EntityKey" /> der Zielentität am anderen Ende der Beziehung.</param>
      <param name="navigationPropertySelector">Ein LINQ-Ausdruck, der die Navigationseigenschaft für die Quelle auswählt, die das angegebene Ziel zurückgibt.</param>
      <param name="relationshipState">Der angeforderte <see cref="T:System.Data.Entity.EntityState" /> der angegebenen Beziehung.</param>
      <typeparam name="TEntity">Der Entitätstyp des Quellobjekts.</typeparam>
      <exception cref="T:System.ArgumentNullException">Wenn die Quelle, das Ziel oder der Selektor NULL ist.</exception>
      <exception cref="T:System.ArgumentException">Der Selektor ist falsch formatiert oder kann keine Navigationseigenschaft zurückgeben.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Deleted" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn Sie versuchen, den Status der Beziehung in einen anderen Wert als <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Detached" /> zu ändern und entweder die Quelle oder das Ziel den Status <see cref="F:System.Data.Entity.EntityState.Added" /> aufweist, oder wenn der Status kein gültiger <see cref="T:System.Data.Entity.EntityState" />-Wert ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>Gibt für Objekte oder Beziehungen mit dem angegebenen Status eine Auflistung von <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />-Objekten zurück.</summary>
      <returns>Eine Auflistung der <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />-Objekte im angegebenen <see cref="T:System.Data.Entity.EntityState" />.</returns>
      <param name="state">Ein <see cref="T:System.Data.Entity.EntityState" /> zum Filtern der zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />-Objekte.</param>
      <exception cref="T:System.ArgumentException">Wenn der Status <see cref="F:System.Data.Entity.EntityState.Detached" /> ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>Gibt für das Objekt oder den Beziehungseintrag mit dem angegebenen Schlüssel einen <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> zurück.</summary>
      <returns>Der entsprechende <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das angegebene <see cref="T:System.Data.Entity.Core.EntityKey" />.</returns>
      <param name="key">Der <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Wenn der Schlüssel NULL ist.</exception>
      <exception cref="T:System.ArgumentException">Wenn der angegebene Schlüssel im Status-Manager nicht gefunden werden kann.</exception>
      <exception cref="T:System.InvalidOperationException">Es ist keine Entität mit dem angegebenen <see cref="T:System.Data.Entity.Core.EntityKey" /> im <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das angegebene Objekt zurück.</summary>
      <returns>Der entsprechende <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das angegebene <see cref="T:System.Object" />.</returns>
      <param name="entity">Das <see cref="T:System.Object" />, zu dem der abgerufene <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> gehört.</param>
      <exception cref="T:System.InvalidOperationException">Es ist keine Entität für das angegebene <see cref="T:System.Object" /> im <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> vorhanden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Gibt den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> zurück, der vom angegebenen Objekt verwendet wird.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> für das angegebene Objekt.</returns>
      <param name="entity">Das Objekt, für das der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> zurückgegeben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Die Entität implementiert weder IEntityWithRelationships noch wird sie durch diesen ObjectStateManager nachverfolgt.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> ab, der diesem Status-Manager zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, der diesem <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> zugeordnet ist.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Tritt auf, wenn Entitäten dem Status-Manager hinzugefügt oder aus diesem entfernt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Ruft den entsprechenden <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das Objekt oder die Beziehung mit dem angegebenen <see cref="T:System.Data.Entity.Core.EntityKey" /> ab.</summary>
      <returns>Ein boolescher Wert, der true ist, wenn ein entsprechender <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für den angegebenen <see cref="T:System.Data.Entity.Core.EntityKey" /> vorhanden ist, andernfalls false.</returns>
      <param name="key">Der angegebene <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <param name="entry">Enthält einen <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für den angegebenen <see cref="T:System.Data.Entity.Core.EntityKey" />, wenn diese Methode erfolgreich zurückkehrt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <exception cref="T:System.ArgumentNullException">Für den Schlüssel ist ein NULL-Wert (in Visual Basic Nothing) angegeben.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Ruft den entsprechenden <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das angegebene <see cref="T:System.Object" /> ab.</summary>
      <returns>Ein boolescher Wert, der true ist, wenn ein entsprechender <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für das angegebene Objekt vorhanden ist, andernfalls false.</returns>
      <param name="entity">Das <see cref="T:System.Object" />, zu dem der abgerufene <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> gehört.</param>
      <param name="entry">Enthält den <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> für den angegebenen <see cref="T:System.Data.Entity.Core.EntityKey" />, wenn diese Methode erfolgreich zurückkehrt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>Gibt den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> zurück, der vom angegebenen Objekt verwendet wird.</summary>
      <returns>true, wenn eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Instanz für die angegebene Entität zurückgegeben wurde, andernfalls false.</returns>
      <param name="entity">Das Objekt, für das der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> zurückgegeben werden soll.</param>
      <param name="relationshipManager">Die Rückgabe dieser Methode enthält den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> für die Entität.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>Die ursprünglichen Werte der Eigenschaften einer Entität beim Abrufen aus der Datenbank.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>Ein DataContractResolver, der für dauerhafte ignorierende Klassen erstellte Proxytypen auf ihre Basistypen auflösen kann.Dieser wird mit dem DataContractSerializer verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>Ordnet während der Deserialisierung alle xsi:type-Informationen dem tatsächlichen Typ des Objekts zu, das Persistenz ignoriert.</summary>
      <returns>Gibt den Typ zurück, der xsi:type zugeordnet ist.Gibt einen NULL-Wert zurück, wenn kein bekannter Typ gefunden wurde, der xsi:type entspricht.</returns>
      <param name="typeName">Die zuzuordnenden xsi:type-Informationen.</param>
      <param name="typeNamespace">Der Namespacename des xsi:type.</param>
      <param name="declaredType">Der deklarierte Typ.</param>
      <param name="knownTypeResolver">Eine Instanz von <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>Ordnet während der Serialisierung den xsi:type-Informationen tatsächliche Typen zu.</summary>
      <returns>true, wenn der Typ aufgelöst wurde, andernfalls false.</returns>
      <param name="type">Der tatsächliche Typ des Objekts, das Persistenz ignoriert.</param>
      <param name="declaredType">Der deklarierte Typ.</param>
      <param name="knownTypeResolver">Eine Instanz von <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">Enthält eine Liste von xsi:type-Deklarationen, wenn diese Methode erfolgreich beendet wird.</param>
      <param name="typeNamespace">Enthält eine Liste verwendeter Namespaces, wenn diese Methode erfolgreich beendet wird.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>Definiert den Umgang mit geänderten Eigenschaften, wenn speicherinternen Daten aus der Datenbank aktualisiert werden.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>Bei unveränderten Clientobjekten ist das Verhalten wie bei StoreWins.Aktualisieren Sie bei geänderten Clientobjekten unter Beibehaltung aller Werte auf dem Clientobjekt die ursprünglichen Werte mit dem Speicherwert.Beim nächsten Update werden alle Clientänderungseinheiten als geändert interpretiert und erfordern ein Update.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>Verwerfen Sie alle Änderungen auf dem Client, und aktualisieren Sie Werte mit Speicherwerten.Ursprüngliche Clientwerte werden aktualisiert, um mit dem Speicher übereinzustimmen.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>Kennzeichen zum Ändern des Verhaltens von ObjectContext.SaveChanges().</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>Nach dem Speichern von Änderungen wird die AcceptAllChangesAfterSave-Methode aufgerufen, die die Änderungsnachverfolgung im ObjectStateManager zurücksetzt.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Vor dem Speichern von Änderungen wird die DetectChanges-Methode aufgerufen, um die Eigenschaftswerte von Objekten, die an den Objektkontext angefügt sind, mit Daten im ObjectStateManager zu synchronisieren.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>Änderungen werden ohne einen Aufruf der DetectChanges-Methode oder der AcceptAllChangesAfterSave-Methode gespeichert.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>Dies ist die Schnittstelle, die die minimal erforderliche Schnittstelle darstellt, um in ADO.NET eine Entität zu sein.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Benachrichtigt die Änderungsnachverfolgung über die Änderung einer Eigenschaft eines komplexen Objekts.</summary>
      <param name="property">Der Name der geänderten Eigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Benachrichtigt die Änderungsnachverfolgung über die ausstehende Änderung einer Eigenschaft eines komplexen Objekts.</summary>
      <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Attribut für komplexe Eigenschaften; implizite standardmäßige AttributeUsage-Eigenschaften; Inherited=True, AllowMultiple=False; das Metadatensystem erwartet dies und prüft nur die ersten dieser Attribute, auch wenn mehr vorhanden sind.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Attribut für komplexe Typen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Attribut, das die EDM-Basisklasse bestimmt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>Attribut, das einen enum-Typ anzeigt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Gibt an, dass die angegebene Methode ein Proxy für eine EDM-Funktion ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Erstellt eine neue DbFunctionAttribute-Instanz.</summary>
      <param name="namespaceName">Der Namespacename der EDM-Funktion, der durch die attributierte Methode dargestellt wird.</param>
      <param name="functionName">Der Funktionsname der EDM-Funktion, der durch die attributierte Methode dargestellt wird.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Basisattribut für Eigenschaften, die zugeordnet werden, um Elemente zu speichern.Implizite standardmäßige AttributeUsage-Eigenschaften; Inherited=True, AllowMultiple=False; das Metadatensystem erwartet dies und prüft nur die ersten dieser Attribute, auch wenn mehr vorhanden sind.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Definiert auf Grundlage einer Zuordnung im konzeptionellen Modell eine Beziehung zwischen zwei Entitätstypen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />-Klasse.</summary>
      <param name="relationshipNamespaceName">Der Name des Namespaces für die Zuordnung, an dem diese Entität teilnimmt.</param>
      <param name="relationshipName">Der Name einer Beziehung, an der diese Entität teilnimmt.</param>
      <param name="role1Name">Name der Rolle für den Typ an einem Ende der Zuordnung.</param>
      <param name="role1Multiplicity">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität an einem Ende der Zuordnung angibt, beispielsweise 1 oder n.</param>
      <param name="role1Type">Der Typ der Entität an einem Ende der Zuordnung.</param>
      <param name="role2Name">Name der Rolle für den Typ am anderen Ende der Zuordnung.</param>
      <param name="role2Multiplicity">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität an einem Ende der Zuordnung angibt, beispielsweise 1 oder n.</param>
      <param name="role2Type">Der Typ der Entität am anderen Ende der Zuordnung.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />-Klasse.</summary>
      <param name="relationshipNamespaceName">Der Name des Namespaces für die Zuordnung, an dem diese Entität teilnimmt.</param>
      <param name="relationshipName">Der Name einer Beziehung, an der diese Entität teilnimmt.</param>
      <param name="role1Name">Name der Rolle für den Typ an einem Ende der Zuordnung.</param>
      <param name="role1Multiplicity">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität an einem Ende der Zuordnung angibt, beispielsweise 1 oder n.</param>
      <param name="role1Type">Der Typ der Entität an einem Ende der Zuordnung.</param>
      <param name="role2Name">Name der Rolle für den Typ am anderen Ende der Zuordnung.</param>
      <param name="role2Multiplicity">Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität an einem Ende der Zuordnung angibt, beispielsweise 1 oder n.</param>
      <param name="role2Type">Der Typ der Entität am anderen Ende der Zuordnung.</param>
      <param name="isForeignKey">Ein Wert, der angibt, ob die Beziehung auf dem Fremdschlüsselwert basiert.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Ruft einen booleschen Wert ab, der angibt, ob die Beziehung auf dem Fremdschlüsselwert basiert.</summary>
      <returns>true, wenn die Beziehung auf dem Fremdschlüsselwert basiert, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Name der Beziehung.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen einer Beziehung darstellt, die von diesem <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> definiert wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Der Namespace für die Beziehung.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namespace für die Beziehung darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplizität an einem Ende der Beziehung.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität angibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Name der Rolle an einem Ende der Beziehung.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen der Rolle darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Typ der Entität an einem Ende der Beziehung.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typ des Objekts an diesem Ende der Zuordnung darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplizität am anderen Ende der Beziehung.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />-Wert, der die Multiplizität angibt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Name der Rolle am anderen Ende der Beziehung.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen der Rolle darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Typ der Entität am anderen Ende der Beziehung.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typ des Objekts am anderen Ende der Zuordnung darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Attribut, das die für ein RelationshipSet definierten Enden bestimmt; implizite standardmäßige AttributeUsage-Eigenschaften; Inherited=True, AllowMultiple=False; das Metadatensystem erwartet dies und prüft nur die ersten dieser Attribute, auch wenn mehr vorhanden sind.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />-Klasse.</summary>
      <param name="relationshipNamespaceName">Der Name des Namespaces der Beziehungseigenschaft.</param>
      <param name="relationshipName">Der Name der Beziehung.Der Beziehungsname ist kein namespacequalifizierter Name.</param>
      <param name="targetRoleName">Der Name der Rolle am anderen Ende der Beziehung.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Ruft den nicht qualifizierten Beziehungsnamen ab.</summary>
      <returns>Der Beziehungsname.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Der Name des Namespaces der Navigationseigenschaft.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen des Namespaces enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Ruft den Namen der Rolle am anderen Ende der Beziehung ab.</summary>
      <returns>Der Name der Zielrolle wird vom Role-Attribut des anderen End-Elements in der Zuordnung angegeben, die diese Beziehung im konzeptionellen Modell definiert.Weitere Informationen finden Sie unter Zuordnung (EDM).</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Attribut für skalare Eigenschaften in einer IEntity.Implizite standardmäßige AttributeUsage-Eigenschaften; Inherited=True, AllowMultiple=False; das Metadatensystem erwartet dies und prüft nur die ersten dieser Attribute, auch wenn mehr vorhanden sind.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Ruft einen Wert ab, der angibt, ob die Eigenschaft Teil des Entitätsschlüssels ist, oder legt diesen fest.</summary>
      <returns>Der Wert, der angibt, ob die Eigenschaft Teil des Entitätsschlüssels ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Ruft einen Wert ab, der angibt, ob die Eigenschaft den Wert NULL haben kann, oder legt diesen fest.</summary>
      <returns>Ein Wert, der angibt, ob die Eigenschaft den Wert NULL haben kann.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Attribut für statische Typen</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" />-Klasse mit einem eindeutigen Wert für jedes Modell, auf das die Assembly verweist.</summary>
      <param name="assemblyGuid">Eine Zeichenfolge, die ein eindeutiger GUID-Wert für das Modell in der Assembly ist.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>Basisattribut für schematisierte Typen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Der Name des Typs im konzeptionellen Schema, der der Klasse zugeordnet wird, auf die dieses Attribut angewendet wird.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Der Namespacename des Entitätsobjekttyps oder komplexen Typs im konzeptionellen Schema, der diesem Typ zugeordnet wird.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen des Namespaces enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>Auflistung von Entitäten, die ein bestimmtes EDM-Konstrukt erstellen, welches entweder alle Entitäten eines bestimmten Typs sein können oder in einer bestimmten Beziehung beteiligte Entitäten.</summary>
      <typeparam name="TEntity">Der Typ der Entitäten in dieser Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Fügt der Auflistung ein Objekt hinzu.</summary>
      <param name="item">Ein der Auflistung hinzuzufügendes Objekt.Die Entität muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> implementieren.</param>
      <exception cref="T:System.ArgumentNullException">entity ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Definiert Beziehungen zwischen einem Objekt und einer Auflistung verbundener Objekte in einem Objektkontext.</summary>
      <param name="entities">Auflistung von Objekten im Objektkontext, die mit dem Quellobjekt verbunden sind.</param>
      <exception cref="T:System.ArgumentNullException">entities-Auflistung ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Das Quellobjekt oder ein Objekt in der Entitätenauflistung ist NULL oder weist nicht den Status <see cref="F:System.Data.Entity.EntityState.Unchanged" /> oder <see cref="F:System.Data.Entity.EntityState.Modified" /> auf. -oder- Die Beziehung kann anhand der EDM-Metadaten nicht definiert werden.Dies kann auftreten, wenn die Zuordnung im konzeptionellen Schema keine Beziehungen zwischen den beiden Typen unterstützt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Definiert eine Beziehung zwischen zwei angefügten Objekten in einem Objektkontext.</summary>
      <param name="entity">Das anzufügende Objekt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn entity NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn die entity nicht mit dem Quellobjekt verknüpft werden kann.Dies kann auftreten, wenn die Zuordnung im konzeptionellen Schema keine Beziehungen zwischen den beiden Typen unterstützt. -oder- Wenn eines der Objekte NULL ist oder nicht den Status <see cref="F:System.Data.Entity.EntityState.Unchanged" /> oder <see cref="F:System.Data.Entity.EntityState.Modified" /> aufweist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Entfernt alle Entitäten aus der Auflistung.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Ermittelt, ob die Auflistung ein bestimmtes Objekt enthält.</summary>
      <returns>true, wenn das Objekt in der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> gefunden wird, andernfalls false.</returns>
      <param name="item">Das in <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zu suchende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert den gesamten Inhalt der Auflistung in ein Array, wobei am angegebenen Index des Zielarrays begonnen wird.</summary>
      <param name="array">Das Array, in das kopiert werden soll.</param>
      <param name="arrayIndex">Der nullbasierte Index im Array, an dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Ruft die Anzahl der Objekte in der Auflistung ab.</summary>
      <returns>Die Anzahl der Elemente, die in der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> enthalten sind.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Gibt eine Objektabfrage zurück, bei deren Ausführung der gleiche Satz von Objekten wie in der aktuellen Auflistung zurückgegeben wird.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, die die Entitätsauflistung darstellt.</returns>
      <exception cref="T:System.InvalidOperationException">Wenn das Objekt einen <see cref="F:System.Data.Entity.EntityState.Added" />-Status aufweist, oder wenn das Objekt einen <see cref="F:System.Data.Entity.EntityState.Detached" />-Status mit einer <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />-Option außer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> aufweist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der zum Durchlaufen der Objekte in der Auflistung verwendet wird.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der den Satz von Werten durchläuft, die von <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zwischengespeichert werden.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> schreibgeschützt ist.</summary>
      <returns>Gibt immer FALSE zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt verbundene Objekte mit der angegebenen Zusammenführungsoption in die Auflistung.</summary>
      <param name="mergeOption">Gibt an, wie die Objekte in dieser Auflistung mit Objekten zusammengeführt werden sollen, die möglicherweise von vorherigen Abfragen für denselben <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> zurückgegeben wurden.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Lädt die verbundene Entität bzw. Entitäten mithilfe der standardmäßigen Zusammenführungsoption asynchron in das verknüpfte Ende.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="mergeOption">Die Zusammenführungsoption.</param>
      <param name="cancellationToken">Ein CancellationToken, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird intern zum Deserialisieren von Entitätsobjekten verwendet.</summary>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird intern zum Serialisieren von Entitätsobjekten verwendet.</summary>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Entfernt ein Objekt aus der Auflistung und markiert die Beziehung zum Löschen.</summary>
      <returns>true, wenn das Element erfolgreich entfernt wurde, andernfalls false.</returns>
      <param name="item">Das Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Das Entitätsobjekt ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Das Entitätsobjekt ist nicht mit dem gleichen Objektkontext verknüpft. -oder- Das Entitätsobjekt weist keinen gültigen Beziehungs-Manager auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der zum Durchlaufen des Satzes von Werten verwendet wird, die von <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zwischengespeichert werden.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der den Satz von Werten durchläuft, die von <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zwischengespeichert werden.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection-Implementierung.Gibt immer FALSE zurück.Die von uns zurückgegeben IList ist demnach diejenige, die unsere tatsächlichen Daten enthält, sie ist keine Liste von Auflistungen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Gibt die Auflistung als <see cref="T:System.Collections.IList" /> zurück, die für die Datenbindung verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Collections.IList" /> von Entitätsobjekten.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>Diese Klasse ist die Basis für alle vorgeschrieben EntityObject-Klassen.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Ruft den Schlüssel für dieses Objekt ab oder legt diesen fest.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityKey" /> für dieses Objekt.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>Ruft den Entitätszustand des Objekts ab.</summary>
      <returns>Der <see cref="T:System.Data.Entity.EntityState" /> dieses Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Benachrichtigt das System zur Änderungsnachverfolgung über die Änderung einer Eigenschaft.</summary>
      <param name="property">Der Name der geänderten Eigenschaft.</param>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Benachrichtigt das System zur Änderungsnachverfolgung über eine ausstehende Änderung einer Eigenschaft.</summary>
      <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Wird vom ObjectStateManager verwendet, um dem Cache dieses EntityObject anzufügen bzw. es zu trennen.</summary>
      <param name="changeTracker">Verweis auf ObjectStateEntry, das diese Entität enthält.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Gibt den Container für die verzögert erstellten Beziehungsnavigationseigenschaft-Objekte, Auflistungen und Verweise zurück.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>Modelliert ein Beziehungsende mit Multiplizität 1.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Gibt den Schlüssel für das verbundene Objekt zurück.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityKey" /> des verbundenen Objekts.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>Modelliert ein Beziehungsende mit Multiplizität 1.</summary>
      <typeparam name="TEntity">Der Typ der Entität, auf die verwiesen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Erstellt eine neue Instanz von <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Erstellt eine m:1- oder 1:1-Beziehung zwischen zwei Objekten im Objektkontext.</summary>
      <param name="entity">Das anzufügende Objekt.</param>
      <exception cref="T:System.ArgumentNullException">Wenn entity NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn entity nicht mit dem aktuell verknüpften Ende verknüpft werden kann.Dies kann auftreten, wenn die Zuordnung im konzeptionellen Schema keine Beziehungen zwischen den beiden Typen unterstützt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Erstellt eine äquivalente Objektabfrage, die das verbundene Objekt zurückgibt.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, die das verbundene Objekt zurückgibt.</returns>
      <exception cref="T:System.InvalidOperationException">Wenn das Objekt einen <see cref="F:System.Data.Entity.EntityState.Added" />-Status aufweist, oder wenn das Objekt einen <see cref="F:System.Data.Entity.EntityState.Detached" />-Status mit einer <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" />-Option außer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> aufweist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt das verbundene Objekt für diesen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> mit der angegebenen Zusammenführungsoption.</summary>
      <param name="mergeOption">Gibt an, wie das Objekt zurückgegeben werden soll, wenn es bereits im <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> vorhanden ist.</param>
      <exception cref="T:System.InvalidOperationException">Die Quelle der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> ist NULL, oder eine Abfrage hat mehr als ein verbundenes Ende zurückgegeben, oder eine Abfrage hat keine verbundenen Enden zurückgegeben und es wurde ein verbundenes Ende erwartet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Lädt die verbundene Entität bzw. Entitäten mithilfe der standardmäßigen Zusammenführungsoption asynchron in das verknüpfte Ende.</summary>
      <returns>Die in das verknüpfte Ende geladene verknüpfte Entität bzw. die Entitäten.</returns>
      <param name="mergeOption">Die Zusammenführungsoptionen.</param>
      <param name="cancellationToken">Ein CancellationToken, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Diese Methode wird intern verwendet, um verknüpfte Entitätsobjekte zu serialisieren.</summary>
      <param name="context">Der serialisierte Stream.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Diese Methode wird intern verwendet, um verknüpfte Entitätsobjekte zu serialisieren.</summary>
      <param name="context">Der serialisierte Stream.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>Ruft das von diesem <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> zurückgegebene verbundene Objekt ab oder legt dieses fest.</summary>
      <returns>Das von diesem <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> zurückgegebene Objekt.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>Diese Schnittstelle wird von einer Änderungsnachverfolgung implementiert und wird von Datenklassen für zum Melden von Änderungen verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Benachrichtigt die Änderungsnachverfolgung über die Änderung einer Eigenschaft eines komplexen Typs.</summary>
      <param name="entityMemberName">Der Name der geänderten komplexen Eigenschaft des Entitätstyps.</param>
      <param name="complexObject">Der komplexe Typ, der die geänderte Eigenschaft enthält.</param>
      <param name="complexObjectMemberName">Der Name der Eigenschaft, die für den komplexen Typ geändert wurde.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Benachrichtigt das System zur Änderungsnachverfolgung über eine ausstehende Änderung einer komplexen Eigenschaft.</summary>
      <param name="entityMemberName">Der Name der Eigenschaft einer Entität der obersten Ebene, die geändert wird.</param>
      <param name="complexObject">Der komplexe Typ, das die Eigenschaft enthält, die geändert wird.</param>
      <param name="complexObjectMemberName">Der Name der Eigenschaft des komplexen Typs, die geändert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Benachrichtigt die Änderungsnachverfolgung über die Änderung einer Eigenschaft eines Entitätstyps.</summary>
      <param name="entityMemberName">Der Name der geänderten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Benachrichtigt die Änderungsnachverfolgung über die ausstehende Änderung einer Eigenschaft eines Entitätstyps.</summary>
      <param name="entityMemberName">Der Name der Eigenschaft, die sich ändert.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Ruft den aktuellen Status eines nachverfolgten Objekts ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.EntityState" />, der den Status des nachverfolgten Objekts angibt. Weitere Informationen finden Sie unter Identitätsauflösung, Zustandsverwaltung sowie Änderungsnachverfolgung und Verfolgen von Änderungen in POCO-Entitäten.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Minimale Schnittstelle, die eine Datenklasse implementieren muss, um von einer Änderungsnachverfolgung verwaltet zu werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Ruft den zum Melden von Änderungen verwendeten <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> ab oder legt diesen fest.</summary>
      <param name="changeTracker">Der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />, der zum Melden von Änderungen verwendet wird.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>Schnittstelle, die eine Entität definiert, die einen Schlüssel enthält.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.EntityKey" /> für Instanzen von Entitätstypen ab, die diese Schnittstelle implementieren, oder legt diesen fest.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.EntityKey" /> für Instanzen von Entitätstypen , die diese Schnittstelle implementieren.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>Schnittstelle, die eine Datenklasse implementieren muss, wenn Beziehungen verfügbar gemacht werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Gibt den Beziehungs-Manager zurück, der Beziehungen für eine Instanz eines Entitätstyps verwaltet.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> für diese Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>Stellt ein Ende einer Beziehung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Fügt dem verknüpften Ende ein Objekt hinzu.</summary>
      <param name="entity">Ein der Auflistung hinzuzufügendes Objekt.Die Entität muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> implementieren.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Fügt dem verknüpften Ende ein Objekt hinzu.</summary>
      <param name="entity">Ein der Auflistung hinzuzufügendes Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Definiert eine Beziehung zwischen zwei angefügten Objekten.</summary>
      <param name="entity">Das anzufügende Objekt.Die Entität muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> implementieren.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Definiert eine Beziehung zwischen zwei angefügten Objekten.</summary>
      <param name="entity">Das anzufügende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Gibt eine <see cref="T:System.Collections.IEnumerable" /> zurück, die die zum verknüpften Ende gehörenden Objekte darstellt.</summary>
      <returns>Eine <see cref="T:System.Collections.IEnumerable" />, die die zum verknüpften Ende gehörenden Objekte darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der die Auflistung verbundener Objekte durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Auflistung verbundener Objekte durchläuft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Entität (für eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />) oder alle Entitäten in der Auflistung (für eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />) aus der Datenbank geladen wurde, oder legt ihn fest.</summary>
      <returns>True, wenn alle verknüpften Entitäten geladen werden oder das IsLoaded explizit auf true festgelegt wurde; andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der Standardzusammenführungsoption in dieses verknüpfte Ende.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der angegebenen Zusammenführungsoption in das verknüpfte Ende.</summary>
      <param name="mergeOption">Die beim Zusammenführen von Objekten in eine vorhandene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der angegebenen Zusammenführungsoption asynchron in das verknüpfte Ende.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="mergeOption">Die beim Zusammenführen von Objekten in eine vorhandene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der Standardzusammenführungsoption asynchron in dieses verknüpfte Ende.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Ruft den Namen der Beziehung ab, der dieses verknüpfte Ende angehört.</summary>
      <returns>Der Name der Beziehung, der dieses <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> angehört.Der Beziehungsname ist kein namespacequalifizierter Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Gibt einen Verweis auf die Metadaten für das verknüpfte Ende zurück.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt, das Metadaten für das Ende einer Beziehung enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Entfernt ein Objekt aus der Auflistung der Objekte am verknüpften Ende.</summary>
      <returns>true, wenn die Entität erfolgreich entfernt wurde. false, wenn die Entität nicht Teil des <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> war.</returns>
      <param name="entity">Das Objekt, das aus der Auflistung entfernt werden soll.Die Entität muss <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> implementieren.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Entfernt ein Objekt aus der Auflistung der Objekte am verknüpften Ende.</summary>
      <returns>true, wenn die Entität erfolgreich entfernt wurde. false, wenn die Entität nicht Teil des <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> war.</returns>
      <param name="entity">Ein Objekt, das aus der Auflistung entfernt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Ruft den Rollennamen am Quellenende der Beziehung ab.</summary>
      <returns>Der Rollenname am Quellenende der Beziehung.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Ruft den Rollennamen am Zielende der Beziehung ab.</summary>
      <returns>Der Rollenname am Zielende der Beziehung.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>Basisklasse für EntityCollection und EntityReference.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Tritt auf, wenn an einem verknüpften Ende eine Änderung vorgenommen wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der die Auflistung verbundener Objekte durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Auflistung verbundener Objekte durchläuft.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob alle verbundenen Objekte geladen wurden.</summary>
      <returns>true, wenn das verknüpfte Ende alle verbundenen Objekte aus der Datenbank enthält, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der Standardzusammenführungsoption in das verknüpfte Ende.</summary>
      <exception cref="T:System.InvalidOperationException">Wenn das Quellobjekt mit einer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />-Abfrage abgerufen wurde und die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> nicht <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet, oder wenn die verknüpften Objekte bereits geladen wurden, oder wenn das Quellobjekt nicht an den <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angehängt wurde, oder wenn das Quellobjekt nachverfolgt wird, aber den Status <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> für <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /><see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Lädt ein oder mehrere Objekte mit der angegebenen Zusammenführungsoption aus dem verknüpften Ende.</summary>
      <param name="mergeOption">Die beim Zusammenführen von Objekten in eine vorhandene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</param>
      <exception cref="T:System.InvalidOperationException">Wenn das Quellobjekt mit einer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />-Abfrage abgerufen wurde und die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> nicht <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet, oder wenn die verknüpften Objekte bereits geladen wurden, oder wenn das Quellobjekt nicht an den <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angehängt wurde, oder wenn das Quellobjekt nachverfolgt wird, aber den Status <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> für <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /><see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Lädt ein oder mehrere Objekte mit der angegebenen Zusammenführungsoption asynchron aus dem verknüpften Ende.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="mergeOption">Die beim Zusammenführen von Objekten in eine vorhandene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zu verwendende <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Wenn das Quellobjekt mit einer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />-Abfrage abgerufen wurde und die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> nicht <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet, oder wenn die verknüpften Objekte bereits geladen wurden, oder wenn das Quellobjekt nicht an den <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angehängt wurde, oder wenn das Quellobjekt nachverfolgt wird, aber den Status <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> für <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /><see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt das verbundene Objekt bzw. die verbundenen Objekte mit der Standardzusammenführungsoption asynchron in das verknüpfte Ende.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Wenn das Quellobjekt mit einer <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />-Abfrage abgerufen wurde und die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> nicht <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet, oder wenn die verknüpften Objekte bereits geladen wurden, oder wenn das Quellobjekt nicht an den <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angehängt wurde, oder wenn das Quellobjekt nachverfolgt wird, aber den Status <see cref="F:System.Data.Entity.EntityState.Added" /> oder <see cref="F:System.Data.Entity.EntityState.Deleted" /> aufweist, oder wenn die <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> für <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /><see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> lautet.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird intern verwendet, um Entitätsobjekte gemeinsam mit den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Instanzen zu deserialisieren.</summary>
      <param name="context">Der serialisierte Stream.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Ruft den Namen der Beziehung ab, der dieses verknüpfte Ende angehört.</summary>
      <returns>Der Name der Beziehung, der dieses <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> angehört.Der Beziehungsname ist kein namespacequalifizierter Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Ruft einen Verweis auf die Metadaten für das verknüpfte Ende ab.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />-Objekt, das Metadaten für das Ende einer Beziehung enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Ruft den Rollennamen am Quellenende der Beziehung ab.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Rollennamen enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Fügt dem verknüpften Ende eine Entität hinzu.Diese Methode funktioniert genau auf die gleiche Weise wie Add(object).Es wird aus Gründen der Abwärtskompatibilität mit früheren Versionen von IRelatedEnd verwaltet.</summary>
      <param name="entity">Entitätsinstanz, die dem verknüpften Ende hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Fügt dem verknüpften Ende eine Entität hinzu.Wenn der Besitzer an einen Cache angefügt wird, werden alle verbundenen Enden dem Objektcache hinzugefügt, und ihre entsprechenden Beziehungen werden auch dem ObjectStateManager hinzugefügt.Das RelatedEnd der Beziehung ist ebenfalls fest.</summary>
      <param name="entity">Entitätsinstanz, die dem verknüpften Ende hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Fügt dem verknüpften Ende eine Entität an.Diese Methode funktioniert genau auf die gleiche Weise wie Attach(object).Es wird aus Gründen der Abwärtskompatibilität mit früheren Versionen von IRelatedEnd verwaltet.</summary>
      <param name="entity">Die Entität, die dem verknüpften Ende angefügt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Wird ausgelöst, wenn <paramref name="entity" /> NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Entität nicht über das aktuelle Beziehungsende verknüpft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Fügt dem verknüpften Ende eine Entität an.Wenn das verknüpfte Ende bereits gefüllt oder teilweise gefüllt ist, führt dies vorhandene Entitäten mit der angegebenen Entität zusammen.Bei der angegebenen Entität wird nicht davon ausgegangen, dass es sich um den vollständigen Satz verknüpfter Entitäten handelt.Der Besitzer und alle übergebenen Entitäten müssen über den Status Unchanged oder Modified verfügen.Gelöschte Elemente sind nur zulässig, wenn der Status-Manager die Beziehungsinstanz bereits nachverfolgt.</summary>
      <param name="entity">Die Entität, die dem verknüpften Ende angefügt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Wird ausgelöst, wenn <paramref name="entity" /> NULL ist.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Entität nicht über das aktuelle Beziehungsende verknüpft werden kann.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Gibt eine <see cref="T:System.Collections.IEnumerable" /> zurück, die die zum verknüpften Ende gehörenden Objekte darstellt.</summary>
      <returns>Eine <see cref="T:System.Collections.IEnumerable" />, die die zum verknüpften Ende gehörenden Objekte darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Entfernt eine Entität aus dem verknüpften Ende.Diese Methode funktioniert genau auf die gleiche Weise wie Remove(object).Es wird aus Gründen der Abwärtskompatibilität mit früheren Versionen von IRelatedEnd verwaltet.</summary>
      <returns>Gibt true zurück, wenn die Entität erfolgreich entfernt wurde, gibt false zurück, wenn die Entität nicht Teil des RelatedEnd war.</returns>
      <param name="entity">Entitätsinstanz, die aus dem verknüpften Ende entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Entfernt eine Entität aus dem verknüpften Ende.Wenn der Besitzer an einen Cache angefügt ist, wird die Beziehung zum Löschen gekennzeichnet, und wenn die Beziehung eine Zusammensetzung ist, wird die Entität ebenfalls für die Löschung markiert.</summary>
      <returns>Gibt true zurück, wenn die Entität erfolgreich entfernt wurde, gibt false zurück, wenn die Entität nicht Teil des RelatedEnd war.</returns>
      <param name="entity">Entitätsinstanz, die aus dem verknüpften Ende entfernt werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Ruft den Rollennamen am Zielende der Beziehung ab.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Rollennamen enthält.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>Bestimmt die Art einer Beziehung.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>Die Beziehung ist eine Zuordnung.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>Container für die verzögert erstellten Beziehungsnavigationseigenschaft-Objekte (Auflistungen und Verweise).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Erstellt ein neues <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Objekt.</summary>
      <returns>Der angeforderte <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Verweis auf die Entität, die diese Methode aufruft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Gibt eine Aufzählung aller verknüpften Enden zurück, die vom Beziehungs-Manager verwaltet werden.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> von Objekten, die <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> implementieren.Es wird eine leere Aufzählung zurückgegeben, wenn die Beziehungen noch nicht aufgefüllt sind.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Ruft eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> von verknüpften Objekten mit dem angegebenen Beziehungs- und Zielrollennamen ab.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> der verknüpften Objekte.</returns>
      <param name="relationshipName">Name der Beziehung, zu der navigiert werden soll.Der Beziehungsname ist kein namespacequalifizierter Name.</param>
      <param name="targetRoleName">Name der Zielrolle für die Navigation.Gibt die Richtung der Navigation in der Beziehung an.</param>
      <typeparam name="TTargetEntity">Der Typ der zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die angegebene Rolle hat statt einer <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> einen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> zurückgegeben.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Gibt für die angegebene Zielrolle in einer Beziehung eine <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> oder einen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> des richtigen Typs zurück.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />, das die abgerufene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> oder <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> darstellt.</returns>
      <param name="relationshipName">Name der Beziehung, in der targetRoleName definiert ist.Der Beziehungsname ist kein namespacequalifizierter Name.</param>
      <param name="targetRoleName">Zielrolle, die verwendet wird, um das andere Ende von relationshipName abzurufen.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName oder targetRoleName ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Der Quelltyp entspricht nicht dem Typ des Besitzers.</exception>
      <exception cref="T:System.ArgumentException">targetRoleName ist ungültig oder hat den Beziehungstyp in den Metadaten nicht gefunden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Ruft den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> für ein verbundenes Objekt mit der angegebenen Kombination von Beziehungsnamen und Zielrollennamen ab.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> eines verknüpften Objekts.</returns>
      <param name="relationshipName">Name der Beziehung, zu der navigiert werden soll.Der Beziehungsname ist kein namespacequalifizierter Name.</param>
      <param name="targetRoleName">Name der Zielrolle für die Navigation.Gibt die Richtung der Navigation in der Beziehung an.</param>
      <typeparam name="TTargetEntity">Der Typ der zurückgegebenen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die angegebene Rolle hat statt einer <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> einen <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> zurückgegeben.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>Nimmt eine vorhandene EntityCollection an, die mit dem Standardkonstruktor erstellt wurde, und initialisiert sie unter Verwendung der bereitgestellten Beziehung und Zielrollennamen.Diese Methode ist so konzipiert, nur während der Deserialisierung verwendet zu werden. Es wird eine Ausnahme ausgelöst, wenn die bereitgestellte EntityCollection bereits initialisiert wurde oder wenn der Beziehungs-Manager bereits an ein ObjectContext angefügt wurde.</summary>
      <param name="relationshipName">Der Beziehungsname.</param>
      <param name="targetRoleName">Der Name der Zielrolle.</param>
      <param name="entityCollection">Eine vorhandene EntityCollection.</param>
      <typeparam name="TTargetEntity">Durch targetRoleName dargestellter Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>Nimmt einen vorhandenen EntityReference an, der mit dem Standardkonstruktor erstellt wurde, und initialisiert ihn unter Verwendung der bereitgestellten Beziehung und Zielrollennamen.Diese Methode ist dafür konzipiert, nur während der Deserialisierung verwendet zu werden. Es wird eine Ausnahme ausgelöst, wenn die bereitgestellte EntityReference bereits initialisiert wurde, wenn der Beziehungs-Manager bereits eine Beziehung mit diesem Namen und der Zielrolle enthält oder wenn der Beziehungs-Manager bereits an einen ObjectContext angefügt ist.</summary>
      <param name="relationshipName">Der Beziehungsname.</param>
      <param name="targetRoleName">Der Rollenname des verknüpften Endes.</param>
      <param name="entityReference">Der zu initialisierende <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</param>
      <typeparam name="TTargetEntity">Der Typ der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />, die initialisiert wird.</typeparam>
      <exception cref="T:System.InvalidOperationException">Wenn der angegebene <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> bereits initialisiert wurde, oder wenn der Beziehungs-Manager bereits an einen <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> angefügt ist, oder wenn der Beziehungs-manager bereits eine Beziehung mit diesem Namen und dieser Zielrolle enthält.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird intern verwendet, um Entitätsobjekte gemeinsam mit den <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />-Instanzen zu deserialisieren.</summary>
      <param name="context">Der serialisierte Stream.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Wird von Object Services aufgerufen, um einen <see cref="T:System.Data.Entity.Core.EntityKey" /> auf die binäre Serialisierung in einer serialisierten Beziehung vorzubereiten.</summary>
      <param name="context">Beschreibt die Quelle und das Ziel eines angegebenen serialisierten Streams und stellt einen zusätzlichen, vom Aufrufer definierten Kontext bereit.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>Diese Klasse enthält die allgemeine Methodenanforderung für ein Datumsobjekt.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Bestimmt, ob die angegebenen Bytearrays identische Werte enthalten.</summary>
      <returns>true, wenn beide Arrays die gleiche Länge haben und die gleichen Bytewerte enthalten oder wenn beide Arrays NULL sind, andernfalls false.</returns>
      <param name="first">Der erste zu vergleichende Bytearraywert.</param>
      <param name="second">Das zweite zu vergleichende Bytearray.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Gibt den minimalen Wert für Datum und Uhrzeit zurück, der von der Datenquelle unterstützt wird.</summary>
      <returns>Ein <see cref="T:System.DateTime" />-Wert, der den minimalen Wert für Datum und Uhrzeit darstellt, der von der Datenquelle unterstützt wird.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Der für die Änderungsnachverfolgung verwendete öffentliche konstante Name. Durch Bereitstellen dieser Definition können Benutzer diese Konstante verwenden, anstelle die Hartcodierung der Zeichenfolge vorzunehmen.Dies hilft, sicherzustellen, dass der Eigenschaftenname richtig ist. Zudem hilft es dabei, schnellere Vergleiche an Speicherplätzen anzustellen, an denen wir nach dieser Zeichenfolge suchen.Benutzer können die Zeichenfolge unter Beachtung der Groß-/Kleinschreibung weiterhin direkt anstelle der Konstante verwenden, es wird im Vergleich nur etwas langsamer ausfallen.Durch Einbeziehen des Gedankenstrichs (-) um den Namen herum, wird sichergestellt, dass dieser mit einer real data-Eigenschaft nicht in Konflikt gerät, da EntityKey- kein gültiger Bezeichner ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Gibt eine Kopie des aktuellen Bytewerts zurück.</summary>
      <returns>Eine Kopie des aktuellen <see cref="T:System.Byte" />-Werts.</returns>
      <param name="currentValue">Der aktuelle Bytearraywert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Gibt einen komplexen Typ für die angegebene Eigenschaft zurück.</summary>
      <returns>Ein komplexes Typobjekt für die Eigenschaft.</returns>
      <param name="currentValue">Ein komplexes Objekt, das von einem komplexen Objekt erbt.</param>
      <param name="property">Der Name der komplexen Eigenschaft, die das komplexe Objekt ist.</param>
      <param name="isNullable">Gibt an, ob der Typ NULL-Werte unterstützt.</param>
      <param name="isInitialized">Gibt an, ob der Typ initialisiert wurde.</param>
      <typeparam name="T">Der Typ des komplexen Objekts, das angefordert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Löst das <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" />-Ereignis aus.</summary>
      <param name="property">Der Name der geänderten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Löst das <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" />-Ereignis aus.</summary>
      <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Benachrichtigung, dass eine Eigenschaft geändert wurde.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Benachrichtigung, dass eine Eigenschaft im Begriff ist, geändert zu werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>Löst ein Ereignis aus, das verwendet wird, um zu melden, dass eine Eigenschaftenänderung aufgetreten ist.</summary>
      <param name="property">Der Name der geänderten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>Löst ein Ereignis aus, das verwendet wird, um zu melden, dass eine Eigenschaftenänderung aussteht.</summary>
      <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Stellt sicher, dass der <see cref="T:System.Boolean" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Boolean" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der Wert Boolean.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Boolean" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Boolean" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der Wert Boolean.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der festgelegte <see cref="T:System.Byte" />-Wert.</returns>
      <param name="value">Der Wert, der überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Ein <see cref="T:System.Byte" />, das festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Byte" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte[]" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Ein <see cref="T:System.Byte" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der Wert, der festgelegt wird.</param>
      <param name="isNullable">Gibt an, ob die Eigenschaft NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte[]" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Byte" />-Wert, der überprüft wird.</returns>
      <param name="value">Der in den Eigenschaftensetter übergebene Wert.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
      <exception cref="T:System.Data.ConstraintException">Wenn ein Wert, der keine NULL-Werte zulässt, auf NULL festgelegt ist.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der festgelegt wird.</returns>
      <param name="value">
        <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der geprüft werden soll.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <exception cref="T:System.Data.ConstraintException">Der Wert ist NULL für eine Eigenschaft, die keine NULL-Werte zulässt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der zu überprüfende <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
      <exception cref="T:System.Data.ConstraintException">Der Wert ist NULL für eine Eigenschaft, die keine NULL-Werte zulässt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der zu überprüfende <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <exception cref="T:System.Data.ConstraintException">Der Wert ist NULL für eine Eigenschaft, die keine NULL-Werte zulässt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der festgelegt wird.</returns>
      <param name="value">
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der geprüft werden soll.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
      <exception cref="T:System.Data.ConstraintException">Der Wert ist NULL für eine Eigenschaft, die keine NULL-Werte zulässt.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTime" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTime" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.DateTime" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTime" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTime" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.DateTime" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTimeOffset" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Ein <see cref="T:System.DateTimeOffset" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.DateTimeOffset" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTimeOffset" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTimeOffset" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.DateTimeOffset" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Stellt sicher, dass der <see cref="T:System.Decimal" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Decimal" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Decimal" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Decimal" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Decimal" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Decimal" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Stellt sicher, dass der <see cref="T:System.Double" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Double" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Double" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Double" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Double" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Double" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Stellt sicher, dass der <see cref="T:System.Guid" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Guid" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Guid" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Guid" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Guid" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Guid" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int16" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int16" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int16" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int16" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int32" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int32" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int32" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int32" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int64" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int64" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int64" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Int64" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Stellt sicher, dass der <see cref="T:System.Boolean" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Boolean" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Boolean" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Boolean" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Boolean" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Boolean" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Byte" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Byte" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Byte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Byte" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Byte" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTime" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTime" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.DateTime" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTime" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTime" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.DateTime" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTimeOffset" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTimeOffset" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.DateTimeOffset" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.DateTimeOffset" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.DateTimeOffset" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.DateTimeOffset" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Stellt sicher, dass der <see cref="T:System.Decimal" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Decimal" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Decimal" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Decimal" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Decimal" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Decimal" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Stellt sicher, dass der <see cref="T:System.Double" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Double" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Double" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Double" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Double" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Double" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Stellt sicher, dass der <see cref="T:System.Guid" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Guid" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Guid" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Guid" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Guid" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Guid" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Stellt sicher, dass der <see cref="T:System.Int16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int16" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int16" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int16" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int16" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Stellt sicher, dass der <see cref="T:System.Int32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int32" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int32" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int32" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int32" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Stellt sicher, dass der <see cref="T:System.Int64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int64" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int64" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Int64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Int64" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Int64" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Stellt sicher, dass der <see cref="T:System.SByte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.SByte" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.SByte" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.SByte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.SByte" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.SByte" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Stellt sicher, dass der <see cref="T:System.Single" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Single" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Single" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.Single" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Single" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.Single" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Stellt sicher, dass der <see cref="T:System.TimeSpan" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.TimeSpan" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.TimeSpan" />-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.TimeSpan" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.TimeSpan" />-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Ein <see cref="T:System.TimeSpan" />-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Stellt sicher, dass der Wert UInt16, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt16-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt16-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>Stellt sicher, dass der Wert UInt16, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt16-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt16-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Stellt sicher, dass der UInt32-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt32-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt32-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>Stellt sicher, dass der UInt32-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt32-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt32-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt64-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt64-Wert, der NULL-Werte zulässt.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der UInt64-Wert, der festgelegt wird und der NULL-Werte zulässt.</returns>
      <param name="value">Der UInt64-Wert, der NULL-Werte zulässt.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Stellt sicher, dass der <see cref="T:System.SByte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.SByte" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.SByte" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.SByte" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.SByte" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.SByte" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Stellt sicher, dass der Wert Single, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Single" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Single" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>Stellt sicher, dass der Wert Single, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.Single" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.Single" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Der überprüfte <see cref="T:System.String" />-Wert.</returns>
      <param name="value">Die zu überprüfende Zeichenfolge.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>Überprüft, dass die Eigenschaft nicht NULL ist, und löst andernfalls einen Fehler aus.</summary>
      <returns>Die überprüfte Eigenschaft.</returns>
      <param name="value">Die zu überprüfende Zeichenfolge.</param>
      <param name="isNullable">Kennzeichen, das angibt, ob diese Eigenschaft NULL sein darf.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
      <exception cref="T:System.Data.ConstraintException">Der Zeichenfolgenwert für eine Zeichenfolge, die keine NULL-Werte zulässt, ist NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Stellt sicher, dass der <see cref="T:System.TimeSpan" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.TimeSpan" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.TimeSpan" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.TimeSpan" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.TimeSpan" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.TimeSpan" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt16" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt16" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt16" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt16" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt16" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt32" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt32" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt32" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt32" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt32" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt64" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt64" />-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>Stellt sicher, dass der <see cref="T:System.UInt64" />-Wert, der für eine Eigenschaft festgelegt wird, gültig ist.</summary>
      <returns>Der <see cref="T:System.UInt64" />-Wert, der festgelegt wird.</returns>
      <param name="value">Der <see cref="T:System.UInt64" />-Wert.</param>
      <param name="propertyName">Der Name der Eigenschaft, die überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Legt ein komplexes Objekt für die angegebene Eigenschaft fest.</summary>
      <returns>Ein komplexer Typ, der von einem komplexen Objekt abgeleitet wird.</returns>
      <param name="oldValue">Das ursprüngliche komplexe Objekt für die Eigenschaft, falls vorhanden.</param>
      <param name="newValue">Das komplexe Objekt, das festgelegt wird.</param>
      <param name="property">Die komplexe Eigenschaft, die auf das komplexe Objekt festgelegt wird.</param>
      <typeparam name="T">Der Typ des ersetzten Objekts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Bestätigt, dass ein komplexes Objekt nicht den Wert NULL hat.</summary>
      <returns>Das komplexe Objekt, das überprüft wird.</returns>
      <param name="complexObject">Das komplexe Objekt, das überprüft wird.</param>
      <param name="propertyName">Die komplexe Eigenschaft des übergeordneten Objekts, das complexObject zugeordnet ist.</param>
      <typeparam name="TComplex">Der Typ des komplexen Objekts, das überprüft wird.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn beim Übernehmen einer <see cref="T:System.Data.Common.DbTransaction" /> ein Fehler auftritt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> mit Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Die zum Serialisieren bzw. Deserialisieren eines Objekts benötigten Daten.</param>
      <param name="context">Die Beschreibung der Quelle und des Ziels des angegebenen serialisierten Streams.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> mit Fehlermeldung.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />mit Fehlermeldung und interner Ausnahme.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>Stellt einen Transaktionshandler dar, der die normale Wiederherstellung nach Verbindungsfehlern beim Transaktionscommit ermöglicht, indem Ablaufverfolgungsinformationen für die Transaktion in der Datenbank gespeichert werden.Dieser Handler muss über <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> registriert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />-Klasse mit dem Standard-<see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />-Klasse.</summary>
      <param name="transactionContextFactory">Die Transaktionskontextfactory.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Speichert die Nachverfolgungsinformationen für die neue Transaktion in der Datenbank in derselben Transaktion.</summary>
      <param name="connection">Die Verbindung, mit der die Transaktion begonnen wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>Erstellt das Datenbankinitialisierungsskript.</summary>
      <returns>Das Datenbankinitialisierungsskript.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>Entfernt den gesamten Transaktionsverlauf.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>Entfernt den gesamten Transaktionsverlauf asynchron.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Entfernt den gesamten Transaktionsverlauf asynchron.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Das Abbruchstoken.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Wenn eine Ausnahme ausgelöst wurde, wird diese Transaktion in der Datenbank gesucht und die Ausnahme erneut ausgelöst, wenn die Transaktion nicht gefunden wird.Andernfalls wird der Commitvorgang als erfolgreich markiert und die Transaktionsinformationen zur Löschung freigegeben.</summary>
      <param name="transaction">Die Transaktion, für die ein Commit ausgeführt wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>Gibt die von diesem Transaktionsobjekt verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Beendet die Nachverfolgung der verworfenen Transaktion.</summary>
      <param name="transaction">Die verworfene Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Ruft den <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> ab, wenn dem <paramref name="context" /> ein solcher zugeordnet ist, andernfalls wird null zurückgegeben.</summary>
      <returns>Der zugeordnete <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</returns>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>Ruft den <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> ab, wenn dem <paramref name="context" /> ein solcher zugeordnet ist, andernfalls wird null zurückgegeben.</summary>
      <returns>Der zugeordnete <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</returns>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Initialisiert die Eigenschaften der Instanz.</summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Initialisiert die Eigenschaften der Instanz.</summary>
      <param name="context">Der Kontext.</param>
      <param name="connection">Die Verbindung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>Fügt die angegebene Transaktion zur Liste der Transaktionen hinzu, die aus der Datenbank entfernt werden können.</summary>
      <param name="transaction">Die Transaktion, die aus der Datenbank entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>Entfernt alle Transaktionen, die zur Löschung markiert sind.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>Entfernt alle Transaktionen, die zur Löschung markiert sind, wenn deren Anzahl <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> überschreitet.</summary>
      <param name="force">true um alle alten Transaktionen zu entfernen, selbst wenn deren Anzahl <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> nicht überschreitet; andernfalls, false.</param>
      <param name="useExecutionStrategy">true um den Vorgang anhand der zugeordneten Ausführungsstrategie auszuführen, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>Entfernt alle Transaktionen, die zur Löschung markiert sind, asynchron.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>Entfernt alle Transaktionen, die zur Löschung markiert sind, wenn deren Anzahl <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> überschreitet.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="force">true um alle alten Transaktionen zu entfernen, selbst wenn deren Anzahl <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> nicht überschreitet; andernfalls, false.</param>
      <param name="useExecutionStrategy">true um den Vorgang anhand der zugeordneten Ausführungsstrategie auszuführen, andernfalls false.</param>
      <param name="cancellationToken">Das Abbruchstoken.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Entfernt alle Transaktionen, die zur Löschung markiert sind, asynchron.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Das Abbruchstoken.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>Ruft die Anzahl der Transaktionen ab, die auf dem Kontext ausgeführt werden solle, bevor das Transaktionsprotokoll bereinigt wird.Der Standardwert ist 20.</summary>
      <returns>Die Anzahl der Transaktionen, die auf dem Kontext ausgeführt werden sollen, bevor das Transaktionsprotokoll bereinigt wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Beendet die Nachverfolgung der Transaktion, für die ein Rollback ausgeführt wurde.</summary>
      <param name="transaction">Die Transaktion, für die ein Rollback durchgeführt wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>Ruft den Transaktionskontext ab.</summary>
      <returns>Der Transaktionskontext.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Wird von der ChangeTracker-Methode von <see cref="T:System.Data.Entity.DbContext" /> zurückgegeben, um Zugriff auf Funktionen des Kontexts zu bieten, die mit der Änderungsnachverfolgung von Entitäten zusammenhängen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Erkennt Änderungen, die an den Eigenschaften und Beziehungen von POCO-Entitäten vorgenommen wurden.Beachten Sie, dass einige Typen von Entitäten (z. B. Änderungsnachverfolgungsproxys und von <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> abgeleitete Entitäten) Änderungen automatisch melden und DetectChanges normalerweise nicht für diese Typen von Entitäten aufgerufen werden muss.Beachten Sie außerdem, dass DetectChanges normalerweise von vielen Methoden von <see cref="T:System.Data.Entity.DbContext" /> und den zugehörigen Klassen automatisch aufgerufen wird, sodass es selten erforderlich ist, diese Methode explizit aufzurufen.Jedoch empfiehlt es sich ggf., in der Regel aus Leistungsgründen, mit dem AutoDetectChangesEnabled-Flag von <see cref="P:System.Data.Entity.DbContext.Configuration" /> den automatischen Aufruf von DetectChanges zu deaktivieren.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte für alle von diesem Kontext nachverfolgten Entitäten ab.</summary>
      <returns>Die Einträge.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte für alle Entitäten des angegebenen Typs ab, die von diesem Kontext nachverfolgt werden.</summary>
      <returns>Die Einträge.</returns>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Gibt an, ob der <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn der <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Ruft den Hashcode ab, der <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> zugeordnet ist.</summary>
      <returns>Der Hashcode, der <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>Überprüft, ob der <see cref="T:System.Data.Entity.DbContext" /> neue, gelöschte oder geänderte Entitäten oder Beziehungen nachverfolgt, die an die Datenbank gesendet werden, wenn <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> aufgerufen wird.</summary>
      <returns>"true", wenn der zugrunde liegende <see cref="T:System.Data.Entity.DbContext" /> Änderungen enthält, andernfalls "false".</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Stellt eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />-Klasse dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />-Objekt zurück.</summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TElement">Der Typ des Auflistungselements.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>Ruft den <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> ab, zu dem diese Navigationseigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob alle Entitäten dieser Auflistung aus der Datenbank geladen wurden, oder legt ihn fest.</summary>
      <returns>true, wenn alle verknüpften Entitäten geladen werden oder das IsLoaded explizit auf true festgelegt wurde; andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Lädt die Auflistung von Entitäten aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>Lädt die Auflistung von Entitäten asynchron aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt die Auflistung von Entitäten asynchron aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Auflistung aus der Datenbank verwendet wird.Die zurückgegebene Abfrage kann mit LINQ geändert werden, um Daten zu filtern oder Vorgänge in der Datenbank auszuführen, z. B. die Anzahl von Entitäten der Auflistung in der Datenbank zu zählen, ohne sie zu laden.</summary>
      <returns>Eine Abfrage für die Auflistung.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Instanzen dieser Klasse werden von der Collection-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und ermöglichen das Ausführen von Vorgängen, z. B. das Laden, für die Auflistungsnavigationseigenschaften der Entität.</summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TElement">Der Typ des Elements in der Auflistung von Entitäten.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Navigationseigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob alle Entitäten dieser Auflistung aus der Datenbank geladen wurden, oder legt ihn fest.</summary>
      <returns>true, wenn alle verknüpften Entitäten geladen werden oder das IsLoaded explizit auf TRUE festgelegt wurde; andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Lädt die Auflistung von Entitäten aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>Lädt die Auflistung von Entitäten asynchron aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt die Auflistung von Entitäten asynchron aus der Datenbank.Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />-Klasse für die durch dieses Objekt dargestellte Navigationseigenschaft zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die Navigationseigenschaft darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Auflistung aus der Datenbank verwendet wird.Die zurückgegebene Abfrage kann mit LINQ geändert werden, um Daten zu filtern oder Vorgänge in der Datenbank auszuführen, z. B. die Anzahl von Entitäten der Auflistung in der Datenbank zu zählen, ohne sie zu laden.</summary>
      <returns>Eine Abfrage für die Auflistung.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Eine unveränderliche Darstellung eines Entity Data Model (EDM), die zum Erstellen eines <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> verwendet oder an den Konstruktor eines <see cref="T:System.Data.Entity.DbContext" /> übergeben werden kann.Für eine höhere Leistung sollten Instanzen dieses Typs zwischengespeichert und zum Erstellen von Kontexten wiederverwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Erstellt eine Instanz von ObjectContext oder einer von ObjectContext abgeleiteten Klasse.Beachten Sie, dass stattdessen mit dem entsprechenden DbContext-Konstruktor eine Instanz von DbContext erstellt werden kann.Wenn ein abgeleiteter ObjectContext verwendet wird, muss er über einen öffentlichen Konstruktor mit einem einzelnen EntityConnection-Parameter verfügen.Die übergebene Verbindung wird vom ObjectContext verwendet, der Kontext ist jedoch nicht der Besitzer der Verbindung.Der Aufrufer muss die Verbindung verwerfen, sobald der Kontext verworfen wurde.</summary>
      <returns>Der Kontext.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit einer Datenbank für die Verwendung durch den Kontext.</param>
      <typeparam name="TContext">Der Typ des zu erstellenden Kontexts.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />-Objekt zurück.</summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt.Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Instanzen dieser Klasse werden von der ComplexProperty-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und erlauben den Zugriff auf den Zustand einer komplexen Eigenschaft.</summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TComplexProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die geschachtelte Eigenschaft darstellt.</param>
      <typeparam name="TNestedComplexProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
      <typeparam name="TNestedComplexProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die Eigenschaft darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt.Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die geschachtelte Eigenschaft darstellt.</param>
      <typeparam name="TNestedProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt.Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
      <typeparam name="TNestedProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt.Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden.</summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Stellt Informationen zu einer Datenbankverbindung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Klasse, die eine in der Anwendungskonfigurationsdatei angegebene Verbindung darstellt.</summary>
      <param name="connectionName">Der Name der Verbindungszeichenfolge in der Anwendungskonfiguration.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Initialisiert auf Grundlage einer Verbindungszeichenfolge eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Klasse.</summary>
      <param name="connectionString">Die für die Verbindung zu verwendende Verbindungszeichenfolge.</param>
      <param name="providerInvariantName">Der Name des für die Verbindung zu verwendenden Anbieters.Verwenden Sie "System.Data.SqlClient" für SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Bestimmt, ob der aktuelle <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Typ gleich einem angegebenen Objekttyp ist.</summary>
      <returns>true, wenn der aktuelle <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Typ gleich dem angegebenen Objekttyp ist; andernfalls false.</returns>
      <param name="obj">Ein Objekt, mit dem das aktuelle <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Objekt verglichen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Generiert einen Wert, der die aktuelle Verbindung darstellt.</summary>
      <returns>Ein Wert, der die aktuelle Verbindung darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Konvertiert das <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Objekt in eine Zeichenfolge.</summary>
      <returns>Das aktuelle Laufwerk.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Beschreibt den Ursprung der Datenbankverbindungszeichenfolge, die <see cref="T:System.Data.Entity.DbContext" /> zugeordnet ist.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>Die Verbindungszeichenfolge wurde aus einer externen Konfiguration gelesen.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>Die Verbindungszeichenfolge wurde durch eine Konvention erstellt.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>Die Verbindungszeichenfolge wurde durch Verbindungsinformationen überschrieben, die für DbContextInfo bereitgestellt wurden.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>Die Verbindungszeichenfolge wurde explizit zur Laufzeit festgelegt.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Wird von der Configuration-Methode von <see cref="T:System.Data.Entity.DbContext" /> zurückgegeben, um Zugriff auf Konfigurationsoptionen für den Kontext zu bieten.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Ruft einen Wert ab oder legt ihn fest und zeigt an, ob die <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" />-Methode automatisch von <see cref="T:System.Data.Entity.DbContext" />-Methoden und verknüpften Klassen aufgerufen wird.Der Standardwert ist true.</summary>
      <returns>true, wenn automatisch aufgerufen werden sollte, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>Ruft den Wert ab oder legt den Wert fest, der festlegt, ob SQL-Funktionen und Befehle immer in einer Transaktion ausgeführt werden sollen.</summary>
      <returns>Das Standardtransaktionsverhalten.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob die Konfiguration gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn die Konfiguration gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Ruft den Hashcode ab, der der Konfiguration zugeordnet ist.</summary>
      <returns>Der Hashcode, der der Konfiguration zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob Lazy Loading von als Navigationseigenschaften verfügbar gemachten Beziehungen aktiviert ist, oder legt ihn fest.Lazy Loading ist standardmäßig aktiviert.</summary>
      <returns>true, wenn Lazy Loading (verzögertes Laden) aktiviert ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob das Framework immer Instanzen dynamisch generierter Proxyklassen erstellt, wenn es eine Instanz eines Entitätstyps erstellt, oder legt ihn fest.Beachten Sie, dass bei Aktivierung der Proxyerstellung mit diesem Flag Proxyinstanzen nur für Entitätstypen erstellt werden, die die Anforderungen für die Proxyerstellung erfüllen.Die Proxyerstellung ist standardmäßig aktiviert.</summary>
      <returns>true, wenn die Proxyerstellung aktiviert ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>Ruft einen Wert ab, der angibt, ob die NULL-Semantik der Datenbank beim Vergleich von zwei Operanden, die beide potenziell NULL sein können, angewendet wird, oder legt den Wert fest.Der Standardwert ist false.Beispielsweise wird (operand1 == operand2) übersetzt als: (operand1 = operand2), wenn UseDatabaseNullSemantics true ist, oder (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL))), wenn UseDatabaseNullSemantics false ist.</summary>
      <returns>true, wenn das NULL-Vergleichsverhalten der Datenbank aktiviert ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob bei Aufruf von <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> nachverfolgte Entitäten automatisch überprüft werden sollen, oder legt ihn fest.Der Standardwert ist true.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Stellt Laufzeitinformationen über einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse mit angegebenem Kontexttyp.</summary>
      <param name="contextType">Der konkrete <see cref="T:System.Data.Entity.DbContext" />-Typ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse mit angegebenem Kontexttyp und Konfigurationsdatei.</summary>
      <param name="contextType">Der konkrete <see cref="T:System.Data.Entity.DbContext" />-Typ.</param>
      <param name="config">Ein Objekt, das die CONFIG-Datei darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse unter Verwendung der angegebenen Verbindungsinformationen, des Kontexttyps und der Konfigurationsdatei.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="config">Ein Objekt, das die CONFIG-Datei darstellt.</param>
      <param name="connectionInfo">Die für die Datenbank zu verwendenden Verbindungsinformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse unter Verwendung des angegebenen Kontexttyps, der Konfigurationsdatei und der Anbieterinformationen.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="config">Ein Objekt, das die CONFIG-Datei darstellt.</param>
      <param name="modelProviderInfo">Eine <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, die den als Ziel verwendeten, zugrunde liegenden ADO.NET-Anbieter angibt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse unter Verwendung des angegebenen Kontexttyps und der Einstellungen für die Verbindungszeichenfolge.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="connectionStringSettings">Eine Auflistung von Verbindungszeichenfolgen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse unter Verwendung des angegebenen Kontexttyps und der Verbindungsinformationen.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="connectionInfo">Die für die Datenbank zu verwendenden Verbindungsinformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Klasse unter Verwendung des angegebenen Kontexttyps und der Anbieterinformationen.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="modelProviderInfo">Eine <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, die den als Ziel verwendeten, zugrunde liegenden ADO.NET-Anbieter angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Ruft den Namen des ADO.NET-Anbieters der Verbindung ab, der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird.</summary>
      <returns>Der Name des ADO.NET-Anbieters der Verbindung, der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Ruft die vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Verbindungszeichenfolge ab.</summary>
      <returns>Die vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Ruft den vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendeten Namen der Verbindungszeichenfolge ab.</summary>
      <returns>Der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Name der Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Ruft den Ursprung der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendeten Verbindungszeichenfolge ab.</summary>
      <returns>Der Ursprung der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendeten Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Ruft den konkreten <see cref="T:System.Data.Entity.DbContext" />-Typ ab.</summary>
      <returns>Der konkrete <see cref="T:System.Data.Entity.DbContext" />-Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Erstellt eine Instanz eines <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />-Objekts.</summary>
      <returns>Die erstellte Instanz.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Ruft ab, ob der zugrunde liegende <see cref="T:System.Data.Entity.DbContext" />-Typ erstellt werden kann.</summary>
      <returns>true, wenn der zugrunde liegende <see cref="T:System.Data.Entity.DbContext" />-Typ erstellt werden kann, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Ruft eine Aktion ab, die auf dem DbModelBuilder ausgeführt wird, nachdem OnModelCreating im Kontext ausgeführt wurde, oder legt eine Aktion fest.</summary>
      <returns>Eine Aktion, die auf dem DbModelBuilder ausgeführt wird, nachdem OnModelCreating im Kontext ausgeführt wurde.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Gibt eine neue Instanz der generischen <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Klasse des angegebenen generischen Typs für die nachverfolgte Entität zurück, die von diesem Objekt dargestellt wird.Beachten Sie, dass der Typ der nachverfolgten Entität mit dem generischen Typ kompatibel sein muss. Andernfalls wird eine Ausnahme ausgelöst.</summary>
      <returns>Eine generische Version.</returns>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Ruft die aktuellen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird.</summary>
      <returns>Die aktuellen Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Ruft die Entität ab.</summary>
      <returns>Die Entität.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> gleich dieser Instanz ist.Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind.</summary>
      <returns>true, wenn das angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> dieser Instanz entspricht, andernfalls false.</returns>
      <param name="other">Das <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> gleich dieser Instanz ist.Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind.</summary>
      <returns>true, wenn das angegebene <see cref="T:System.Object" /> dieser Instanz entspricht, andernfalls false.</returns>
      <param name="obj">Das <see cref="T:System.Object" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Fragt Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>Fragt asynchron Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Fragt asynchron Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Speicherwerte.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
      <returns>Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Überprüft diese <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanz und gibt das Validierungsergebnis zurück.</summary>
      <returns>Ergebnis der Entitätsvalidierung.Möglicherweise NULL, wenn die <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />-Methode überschrieben wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.Die derzeit unterstützten Elementtypen und ihre Rückgabetypen sind: Verweisnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Auflistungsnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Primitive/skalare Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Komplexe Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Ein Objekt, das den Member darstellt.</returns>
      <param name="propertyName">Der Name des Members.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Ruft die ursprünglichen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird.Die ursprünglichen Werte sind normalerweise die Eigenschaftswerte der Entität zu dem Zeitpunkt, als sie das letzte Mal in der Datenbank abgefragt wurden.</summary>
      <returns>Die ursprünglichen Werte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Ruft ein Objekt ab, das die Referenznavigationseigenschaft (d. h.keine Auflistung) von dieser Entität für eine andere Entität darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Lädt die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>Lädt asynchron die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Lädt asynchron die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Ruft den Zustand der Entität ab oder legt ihn fest.</summary>
      <returns>Der Zustand.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Instanzen dieser Klasse stellen Zugriff auf Informationen zu Entitäten und die Steuerung von Entitäten bereit, die vom <see cref="T:System.Data.Entity.DbContext" /> nachverfolgt werden.Verwenden Sie die Entity-Methode oder die Entities-Methode des Kontexts, um Objekte dieses Typs abzurufen.</summary>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Ein Ausdruck, der die Navigationseigenschaft darstellt.</param>
      <typeparam name="TElement">Der Typ der Elemente in der Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
      <typeparam name="TElement">Der Typ der Elemente in der Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die komplexe Eigenschaft darstellt.</param>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Ruft die aktuellen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird.</summary>
      <returns>Die aktuellen Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Ruft die Entität ab.</summary>
      <returns>Die Entität.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> gleich dieser Instanz ist.Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind.</summary>
      <returns>true, wenn das angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> dieser Instanz entspricht, andernfalls false.</returns>
      <param name="other">Das <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> gleich dieser Instanz ist.Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind.</summary>
      <returns>true, wenn das angegebene <see cref="T:System.Object" /> dieser Instanz entspricht, andernfalls false.</returns>
      <param name="obj">Das <see cref="T:System.Object" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Fragt Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>Fragt asynchron Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Fragt asynchron Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab.Beachten Sie, dass das Ändern der Werte im zurückgegebenen Wörterbuch nicht zum Aktualisieren der Werte in der Datenbank führt.Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Speicherwerte.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
      <returns>Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Überprüft diese <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanz und gibt das Validierungsergebnis zurück.</summary>
      <returns>Ergebnis der Entitätsvalidierung.Möglicherweise NULL, wenn die <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />-Methode überschrieben wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.Die derzeit unterstützten Elementtypen und ihre Rückgabetypen sind: Verweisnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.Auflistungsnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.Primitive/skalare Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.Komplexe Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
      <returns>Ein Objekt, das den Member darstellt.</returns>
      <param name="propertyName">Der Name des Members.</param>
      <typeparam name="TMember">Der Typ des Members.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.Die derzeit unterstützten Elementtypen und ihre Rückgabetypen sind: Verweisnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Auflistungsnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Primitive/skalare Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Komplexe Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Ein Objekt, das den Member darstellt.</returns>
      <param name="propertyName">Der Name des Members.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Klasse für die nachverfolgte Entität zurück, die von diesem Objekt dargestellt wird.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die nachverfolgte Entität darstellt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Ruft die ursprünglichen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird.Die ursprünglichen Werte sind normalerweise die Eigenschaftswerte der Entität zu dem Zeitpunkt, als sie das letzte Mal in der Datenbank abgefragt wurden.</summary>
      <returns>Die ursprünglichen Werte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die Eigenschaft darstellt.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt.</summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das die Referenznavigationseigenschaft (d. h.keine Auflistung) von dieser Entität für eine andere Entität darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Ein Ausdruck, der die Navigationseigenschaft darstellt.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Ruft ein Objekt ab, das die Referenznavigationseigenschaft (d. h.keine Auflistung) von dieser Entität für eine andere Entität darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Ruft ein Objekt ab, das die Referenznavigationseigenschaft (d. h.keine Auflistung) von dieser Entität für eine andere Entität darstellt.</summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Lädt die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>Lädt asynchron die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Lädt asynchron die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank.Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Ruft den Zustand der Entität ab oder legt ihn fest.</summary>
      <returns>Der Zustand.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankentitätswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankentitätswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>Stellt die Basisimplementierung des Wiederholungsmechanismus für unzuverlässige Vorgänge und Übergangszustände bereit, die exponentiell vergrößerte Verzögerungen zwischen Wiederholungen nutzt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />-Klasse mit den angegebenen Einschränkungen für die Anzahl von Wiederholungen und die Verzögerung zwischen Wiederholungen.</summary>
      <param name="maxRetryCount">Die maximale Anzahl von Wiederholungsversuchen.</param>
      <param name="maxDelay">Die maximale Verzögerung in Millisekunden zwischen Wiederholungen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>Führt wiederholt den angegebenen Vorgang aus und erfüllt gleichzeitig die aktuelle Wiederholungsrichtlinie.</summary>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der keine Ergebnisse zurückgibt.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Wenn die Wiederholungsverzögerungsstrategie festlegt, dass der Vorgang nicht mehr wiederholt werden sollte.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn eine vorhandene Transaktion erkannt wird, die von der Ausführungsstrategie nicht unterstützt wird.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn diese Instanz bereits verwendet wurde, um einen Vorgang auszuführen.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Führt wiederholt den angegebenen Vorgang aus und erfüllt gleichzeitig die aktuelle Wiederholungsrichtlinie.</summary>
      <returns>Das Ergebnis des Vorgangs.</returns>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der das Ergebnis vom Typ <paramref name="TResult" />zurückgibt.</param>
      <typeparam name="TResult">Der Typ des Ergebnisses, der von dem ausführbaren Vorgang erwartet wird.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Wenn die Wiederholungsverzögerungsstrategie festlegt, dass der Vorgang nicht mehr wiederholt werden sollte.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn eine vorhandene Transaktion erkannt wird, die von der Ausführungsstrategie nicht unterstützt wird.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn diese Instanz bereits verwendet wurde, um einen Vorgang auszuführen.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Führt wiederholt den angegebenen asynchronen Vorgang aus und erfüllt gleichzeitig die aktuelle Wiederholungsrichtlinie.</summary>
      <returns>Eine Aufgabe, die vollständig ausgeführt wird, wenn die ursprüngliche Aufgabe beendet wird (entweder das erste Mal oder nach Wiederholungen aufgrund von vorübergehenden Fehlern).Wenn die Aufgabe aufgrund eines nicht vorübergehenden Fehlers fehlschlägt oder das Wiederholungslimit erreicht ist, wird die zurückgegebene Aufgabe als Fehler angesehen, und die Ausnahme muss beachtet werden.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe vom Typ <paramref name="TResult" />zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
      <typeparam name="TResult">Der Ergebnistyp des <see cref="T:System.Threading.Tasks.Task`1" />, das vom <paramref name="operation" /> zurückgegeben wird.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Wenn die Wiederholungsverzögerungsstrategie festlegt, dass der Vorgang nicht mehr wiederholt werden sollte.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn eine vorhandene Transaktion erkannt wird, die von der Ausführungsstrategie nicht unterstützt wird.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn diese Instanz bereits verwendet wurde, um einen Vorgang auszuführen.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Führt wiederholt den angegebenen asynchronen Vorgang aus und erfüllt gleichzeitig die aktuelle Wiederholungsrichtlinie.</summary>
      <returns>Eine Aufgabe, die vollständig ausgeführt wird, wenn die ursprüngliche Aufgabe beendet wird (entweder das erste Mal oder nach Wiederholungen aufgrund von vorübergehenden Fehlern).Wenn die Aufgabe aufgrund eines nicht vorübergehenden Fehlers fehlschlägt oder das Wiederholungslimit erreicht ist, wird die zurückgegebene Aufgabe als Fehler angesehen, und die Ausnahme muss beachtet werden.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Wenn die Wiederholungsverzögerungsstrategie festlegt, dass der Vorgang nicht mehr wiederholt werden sollte.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn eine vorhandene Transaktion erkannt wird, die von der Ausführungsstrategie nicht unterstützt wird.</exception>
      <exception cref="T:System.InvalidOperationException">Wenn diese Instanz bereits verwendet wurde, um einen Vorgang auszuführen.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>Bestimmt, ob der Vorgang wiederholt werden soll sowie die Verzögerung vor dem nächsten Versuch.</summary>
      <returns>Die Verzögerung, die anzeigt, wie lange vor dem nächsten Ausführungsversuch gewartet werden muss, wenn der Vorgang wiederholt werden sollte. Andernfalls null.</returns>
      <param name="lastException">Die Ausnahmen die beim letzten Ausführungsversuch ausgelöst wurde.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> nach einem Fehler die Ausführung erneut versuchen kann.</summary>
      <returns>true, wenn die <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> die Ausführung nach einem Fehler erneut versucht darf; andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>Bestimmt, ob die angegebene Ausnahme ein vorübergehendes Problem darstellt, das durch eine Wiederholung gelöst werden kann.</summary>
      <returns>true, wenn die angegebene Ausnahme als vorübergehend angesehen wird; andernfalls false.</returns>
      <param name="exception">Das zu überprüfende Ausnahmeobjekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>Bezieht InnerException rekursiv von <paramref name="exception" /> solange es sich um <see cref="T:System.Data.Entity.Core.EntityException" />, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> oder <see cref="T:System.Data.Entity.Core.UpdateException" /> handelt und übergibt sie an <paramref name="exceptionHandler" />.</summary>
      <returns>Das Ergebnis von <paramref name="exceptionHandler" />.</returns>
      <param name="exception">Die zu entpackende Ausnahme.</param>
      <param name="exceptionHandler">Ein Delegat, der mit der entpackten Ausnahme aufgerufen wird.</param>
      <typeparam name="T">Der Typ der entpackten Ausnahme.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Dies ist eine abstrakte Basisklasse, mit der eine skalare oder komplexe Eigenschaft oder eine Navigationseigenschaft einer Entität dargestellt wird.Skalare und komplexe Eigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, Verweisnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, und Auflistungsnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />-Objekt zurück.</summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem dieser Member gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieses Members ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Bestimmt, ob der angegebene Eintrag gleich dem aktuellen Eintrag ist.</summary>
      <returns>true, wenn der angegebene Eintrag und der aktuelle Eintrag gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Eintrag verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Gibt die Hashfunktion für diesen Eintrag zurück.</summary>
      <returns>Die Hashfunktion für diesen Eintrag.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Überprüft diese Eigenschaft.</summary>
      <returns>Die Auflistung von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Objekten.Nie NULL.Wenn die Entität gültig ist, ist die Auflistung leer.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Ruft den Namen der Eigenschaft ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Dies ist eine abstrakte Basisklasse, mit der eine skalare oder komplexe Eigenschaft oder eine Navigationseigenschaft einer Entität dargestellt wird.Skalare und komplexe Eigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, Verweisnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, und Auflistungsnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem dieser Member gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieses Members ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Gibt an, ob das Objekt gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn das Objekt gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Ruft den Hashcode ab, der dem Objekt zugeordnet ist.</summary>
      <returns>Der Hashcode, der dem Objekt zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Überprüft diese Eigenschaft.</summary>
      <returns>Die Auflistung von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Objekten.Nie NULL.Wenn die Entität gültig ist, ist die Auflistung leer.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Ruft den Namen der Eigenschaft ab.</summary>
      <returns>Der Name der Eigenschaft.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die Eigenschaft darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Stellt ein vom <see cref="T:System.Data.Entity.DbModelBuilder" /> erstelltes Entity Data Model (EDM) dar.Mit der Compile-Methode kann eine EDM-Darstellung in ein <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> konvertiert werden. Dies ist eine kompilierte Momentaufnahme des Modells, mit der Instanzen von <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Objects.ObjectContext" /> zwischengespeichert und erstellt werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> für diesen Modus. Dies ist eine kompilierte Momentaufnahme, mit der <see cref="T:System.Data.Entity.DbContext" />-Instanzen zwischengespeichert und erstellt werden können.</summary>
      <returns>Das kompilierte Modell.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>Ruft das konzeptionelle Modell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>Ruft das Zuordnungsmodell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>Ruft die Anbieterinformationen ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>Ruft das Anbietermanifest ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>Ruft das Speichermodell ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />-Objekt zurück.</summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem diese Eigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Eigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert dieser Eigenschaft geändert wurde, seit er aus der Datenbank geladen wurde, oder legt ihn fest.</summary>
      <returns>true, falls diese Instanz geändert wurde; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Ruft den ursprünglichen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der ursprüngliche Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> der Eigenschaft, für den dies eine geschachtelte Eigenschaft ist.Diese Methode gibt nur für Eigenschaften komplexer Objekte einen Eintrag zurück, der nicht NULL ist. Für Eigenschaften der Entität selbst gibt sie NULL zurück.</summary>
      <returns>Ein Eintrag für die übergeordnete komplexe Eigenschaft oder NULL, wenn dies eine Entitätseigenschaft ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Instanzen dieser Klasse werden von der Property-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und lassen Zugriff auf den Zustand der skalaren oder komplexen Eigenschaft zu.</summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Eigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Eigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert dieser Eigenschaft geändert wurde, seit er aus der Datenbank geladen wurde, oder legt ihn fest.</summary>
      <returns>true, falls diese Instanz geändert wurde; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die Eigenschaft darstellt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Ruft den ursprünglichen Wert dieser Eigenschaft ab oder legt ihn fest.</summary>
      <returns>Der ursprüngliche Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> der Eigenschaft, für den dies eine geschachtelte Eigenschaft ist.Diese Methode gibt nur für Eigenschaften komplexer Objekte einen Eintrag zurück, der nicht NULL ist. Für Eigenschaften der Entität selbst gibt sie NULL zurück.</summary>
      <returns>Ein Eintrag für die übergeordnete komplexe Eigenschaft oder NULL, wenn dies eine Entitätseigenschaft ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Eine Auflistung aller Eigenschaften für eine zugrunde liegende Entität oder ein zugrunde liegendes komplexes Objekt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Erstellt ein neues Wörterbuch, das Kopien aller Eigenschaften in diesem Wörterbuch enthält.Am neuen Wörterbuch vorgenommene Änderungen werden nicht in diesem Wörterbuch wiedergegeben, und an diesem Wörterbuch vorgenommene Änderungen werden nicht im neuen Wörterbuch wiedergegeben.</summary>
      <returns>Ein Klon dieses Wörterbuchs.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Gibt an, ob <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Ruft den Hashcode ab, der dem Eigenschaftswert zugeordnet ist.</summary>
      <returns>Der Hashcode, der dem Eigenschaftswert zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Ruft den Wert der Eigenschaft wie bei Verwendung des Getters für indizierte Eigenschaften ab, jedoch mit dem Typ des generischen Parameters typisiert.Dies ist besonders bei geschachtelten Wörterbüchern hilfreich, um das Schreiben von Ausdrücken mit vielen Umwandlungen zu vermeiden.</summary>
      <returns>Der Wert der Eigenschaft.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
      <typeparam name="TValue">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Ruft den Wert der Eigenschaft mit dem angegebenen Eigenschaftennamen ab oder legt ihn fest.Der Wert ist möglicherweise eine geschachtelte Instanz dieser Klasse.</summary>
      <returns>Der Wert der Eigenschaft.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Ruft den Satz von Namen aller Eigenschaften in diesem Wörterbuch als schreibgeschützten Satz ab.</summary>
      <returns>Die Eigenschaftennamen.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Legt die Werte dieses Wörterbuchs fest, indem Werte aus einem anderen Wörterbuch gelesen werden.Das andere Wörterbuch muss auf dem gleichen Typ wie dieses Wörterbuch basieren oder von einem Typ sein, der vom Typ dieses Wörterbuchs abgeleitet ist.</summary>
      <param name="propertyValues">Das Wörterbuch, aus dem Werte gelesen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Legt die Werte dieses Wörterbuchs fest, indem Werte aus dem angegebenen Objekt gelesen werden.Das angegebene Objekt kann von einem beliebigen Typ sein.Jede Eigenschaft für das Objekt mit einem Namen, der mit einem Eigenschaftennamen im Wörterbuch übereinstimmt und gelesen werden kann, wird gelesen.Andere Eigenschaften werden ignoriert.Dies ermöglicht beispielsweise das Kopieren von Eigenschaften aus einfachen Datenübertragungsobjekten (Data Transfer Objects, DTOs).</summary>
      <param name="obj">Das Objekt, aus dem Werte gelesen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Erstellt ein Objekt des zugrunde liegenden Typs für dieses Wörterbuch und füllt es mit Eigenschaftswerten aus diesem Wörterbuch auf.</summary>
      <returns>Die Eigenschaften dieses in ein neues Objekt kopierten Wörterbuchs.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Gruppiert zwei Zeichenfolgen, die einen Anbieter und eine Serverversion kennzeichnen, zu einem einzelnen Objekt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Erstellt ein neues Objekt für einen bestimmten Anbieter, der den angegebenen invarianten Namen und das Manifesttoken aufweist.</summary>
      <param name="providerInvariantName">Eine Zeichenfolge, die den Anbieter identifiziert.Beispielsweise verwendet der SQL Server-Anbieter die Zeichenfolge "System.Data.SqlCient".</param>
      <param name="providerManifestToken">Eine Zeichenfolge, die angibt, welche Version des Datenbankservers verwendet wird.Beispielsweise verwendet der SQL Server-Anbieter die Zeichenfolge "2008" für SQL Server 2008.Darf nicht null sein, kann aber leer sein.Das Manifesttoken wird manchmal auch als Versionshinweis bezeichnet.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich diesem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich diesem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>Ruft die Hashfunktion dieses aktuellen Objekts ab.</summary>
      <returns>Die Hashfunktion dieses aktuellen Objekts.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Eine Zeichenfolge, die den Anbieter identifiziert.Beispielsweise verwendet der SQL Server-Anbieter die Zeichenfolge "System.Data.SqlCient".</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Eine Zeichenfolge, die angibt, welche Version des Datenbankservers verwendet wird.Beispielsweise verwendet der SQL Server-Anbieter die Zeichenfolge "2008" für SQL Server 2008.Darf nicht null sein, kann aber leer sein.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Stellt eine nicht generische LINQ to Entities-Abfrage für einen DbContext dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> zwischengespeichert werden.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />-Objekt zurück.</summary>
      <returns>Das generische Mengenobjekt.</returns>
      <typeparam name="TElement">Der Elementtyp, für den die Abfrage erstellt wurde.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Der IQueryable-Elementtyp.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Gibt an, ob die Abfrage mit dem angegebenen Objekt identisch ist.</summary>
      <returns>true, wenn die Abfrage mit dem angegebenen Objekt identisch ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Ruft den Hashcode ab, der der Abfrage zugeordnet ist.</summary>
      <returns>Der Hashcode, der der Abfrage zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Ruft den Typ ab, der der Abfrage zugeordnet ist.</summary>
      <returns>Der Typ, der der Abfrage zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Ein neues DbQuery&amp;lt;T&amp;gt; mit dem definierten Abfragepfad.</returns>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der bei der Aufzählung die Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.Füllen Sie stattdessen ein DbSet mit Daten auf, z. B. mit der Load-Erweiterungsmethode, und führen Sie dann eine Bindung an lokale Daten aus.Für die WPF-Bindung zu DbSet.Local.Binden Sie für Windows Forms an DbSet.Local.ToBindingList().</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> zurück, der bei der Aufzählung die Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Der IQueryable-LINQ-Ausdruck.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Der IQueryable-Anbieter.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Gibt eine <see cref="T:System.String" />-Darstellung der zugrunde liegenden Abfrage zurück.</summary>
      <returns>Die Abfragezeichenfolge.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Stellt eine LINQ to Entities-Abfrage für einen DbContext dar.</summary>
      <typeparam name="TResult">Der Entitätstyp, für den die Abfrage erfolgen soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> zwischengespeichert werden.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Bestimmt, ob die aktuelle Abfrage gleich der angegebenen Abfrage ist.</summary>
      <returns>true, wenn die aktuelle Abfrage gleich der angegebenen Abfrage ist; andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit der aktuellen Abfrage verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Gibt die Hashfunktion für diese Abfrage zurück.</summary>
      <returns>Die Hashfunktion für diese Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> mit dem definierten Abfragepfad.</returns>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />-Klasse für diese Abfrage zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Die Abfrage.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Ruft die Enumeration dieser Abfrage ab, sodass sie für den Speicher ausgeführt wird.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" /> für die Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.Generic.IEnumerator`1" /> zurück, der bei der Aufzählung die Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.Füllen Sie stattdessen ein DbSet mit Daten auf, z. B. mit der Load-Erweiterungsmethode, und führen Sie dann eine Bindung an lokale Daten aus.Für die WPF-Bindung zu DbSet.Local.Binden Sie für Windows Forms an DbSet.Local.ToBindingList().</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> zurück, der bei der Aufzählung die Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> zurück, der bei der Aufzählung die Abfrage für die Datenbank ausführt.</summary>
      <returns>Die Abfrageergebnisse.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Der IQueryable-Elementtyp.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Der IQueryable-LINQ-Ausdruck.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Der IQueryable-Anbieter.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Gibt eine <see cref="T:System.String" />-Darstellung der zugrunde liegenden Abfrage zurück.</summary>
      <returns>Die Abfragezeichenfolge.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>Stellt eine SQL-Abfrage für Nichtentitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt wird.Instanzen dieser Klasse werden aus der <see cref="P:System.Data.Entity.DbContext.Database" />-Instanz abgerufen.Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach.SQL-Abfragen für Entitäten werden mit <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> erstellt.Eine generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>Gibt an, ob die Abfrage mit dem angegebenen Objekt identisch ist.</summary>
      <returns>true, wenn die Abfrage gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="action">Die Aktion, die für jedes Element ausgeführt werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>Ruft den Hashcode ab, der der Abfrage zugeordnet ist.</summary>
      <returns>Der Hashcode, der der Abfrage zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>Ruft den Typ ab, der der Abfrage zugeordnet ist.</summary>
      <returns>Der Typ, der der Abfrage zugeordnet ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>Erstellt aus der Abfrage eine <see cref="T:System.Collections.Generic.List`1" />, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Abfrage enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage eine <see cref="T:System.Collections.Generic.List`1" />, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Abfrage enthält.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der die SQL-Zeichenfolge enthält, die beim Erstellen der Abfrage festgelegt wurde.Die Parameter sind nicht enthalten.</summary>
      <returns>Ein <see cref="T:System.String" />, der diese Instanz darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>Stellt eine SQL-Abfrage für Nichtentitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt wird.Instanzen dieser Klasse werden aus der <see cref="P:System.Data.Entity.DbContext.Database" />-Instanz abgerufen.Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach.SQL-Abfragen für Entitäten werden mit <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> erstellt.Eine nicht generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />.</summary>
      <typeparam name="TElement">Der Typ der von der Abfrage zurückgegebenen Elemente.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>Bestimmt asynchron, ob alle Elemente der Abfrage eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn jedes Element des Abfrageergebnisses den Test im angegebenen Prädikat besteht. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob alle Elemente der Abfrage eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn jedes Element des Abfrageergebnisses den Test im angegebenen Prädikat besteht. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>Bestimmt asynchron, ob die Abfrage beliebige Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn das Abfrageergebnis beliebige Elemente enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>Bestimmt asynchron, ob ein beliebiges Elemente der Abfrage eine Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn beliebige Elemente des Abfrageergebnisses den Test im angegebenen Prädikat bestehen. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob ein beliebiges Elemente der Abfrage eine Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn beliebige Elemente des Abfrageergebnisses den Test im angegebenen Prädikat bestehen. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron, ob die Abfrage beliebige Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn das Abfrageergebnis beliebige Elemente enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>Bestimmt asynchron mit dem Standardgleichheitsvergleich, ob die Abfrage ein angegebenes Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn das Abfrageergebnis den angegebenen Wert enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="value">Das Objekt, das im Abfrageergebnis gesucht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>Bestimmt asynchron mit dem Standardgleichheitsvergleich, ob die Abfrage ein angegebenes Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält true, wenn das Abfrageergebnis den angegebenen Wert enthält. Andernfalls enthält das Aufgabeergebnis false.</returns>
      <param name="value">Das Objekt, das im Abfrageergebnis gesucht werden soll.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>Gibt asynchron die Anzahl der Elemente in der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis.</returns>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron die Anzahl der Elemente in der Abfrage zurück, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron die Anzahl der Elemente in der Abfrage zurück, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron die Anzahl der Elemente in der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>Bestimmt, ob die aktuelle Abfrage gleich der angegebenen Abfrage ist.</summary>
      <returns>true, wenn die aktuelle Abfrage gleich der angegebenen Abfrage ist; andernfalls false.</returns>
      <param name="obj">Die Abfrage, die mit der aktuellen Abfrage verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>Gibt asynchron das erste Element der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element im Abfrageergebnis.</returns>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron das erste Element der Abfrage zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element im Abfrageergebnis, das eine angegebene Bedingung erfüllt.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element der Abfrage zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element im Abfrageergebnis, das eine angegebene Bedingung erfüllt.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das erste Element im Abfrageergebnis.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>Gibt asynchron das erste Element der Abfrage oder einen Standardwert zurück, wenn das Abfrageergebnis keine Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TElement" /> ), wenn das Abfrageergebnis leer ist. Andernfalls ist das erste Element im Abfrageergebnis enthalten.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron das erste Element der Abfrage zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element gefunden wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TElement" /> ), wenn das Abfrageergebnis leer ist oder kein Element den Test besteht, der vom <paramref name="predicate" /> festgelegt wurde. Andernfalls ist das erste Element im Abfrageergebnis enthalten, das den Test besteht, der vom <paramref name="predicate" /> festgelegt wurde.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element der Abfrage zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element gefunden wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TElement" /> ), wenn das Abfrageergebnis leer ist oder kein Element den Test besteht, der vom <paramref name="predicate" /> festgelegt wurde. Andernfalls ist das erste Element im Abfrageergebnis enthalten, das den Test besteht, der vom <paramref name="predicate" /> festgelegt wurde.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron das erste Element der Abfrage oder einen Standardwert zurück, wenn das Abfrageergebnis keine Elemente enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält default ( <paramref name="TElement" /> ), wenn das Abfrageergebnis leer ist. Andernfalls ist das erste Element im Abfrageergebnis enthalten.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="action">Die auszuführende Aktion.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>Zählt asynchron die Abfrageergebnisse auf und führt für jedes Element die angegebene Aktion aus.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="action">Die auszuführende Aktion.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.Generic.IEnumerator`1" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>Gibt die Hashfunktion für diese Abfrage zurück.</summary>
      <returns>Die Hashfunktion für diese Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Gesamtzahl der Elemente in der Abfrage darstellt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis.</returns>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in der Abfrage darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in der Abfrage darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis, die die Bedingung in der Prädikatfunktion erfüllen, ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron ein <see cref="T:System.Int64" /> zurück, das die Gesamtzahl der Elemente in der Abfrage darstellt.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Anzahl der Elemente im Abfrageergebnis.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente im Abfrageergebnis ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>Gibt asynchron den maximalen Wert der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert im Abfrageergebnis.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron den maximalen Wert der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Maximalwert im Abfrageergebnis.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>Gibt asynchron den Minimalwert der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert im Abfrageergebnis.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron den Minimalwert der Abfrage zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält den Minimalwert im Abfrageergebnis.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>Gibt asynchron das einzige Element der Abfrage zurück und löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses.</returns>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis weist mehr als ein Element auf.</exception>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron das einzige Element einer Abfrage zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses, das die Bedingung in <paramref name="predicate" />erfüllt.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Abfrage zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses, das die Bedingung in <paramref name="predicate" />erfüllt.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element der Abfrage zurück und löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis weist mehr als ein Element auf.</exception>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis ist leer.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>Gibt asynchron das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses oder default ( <paramref name="TElement" /> ), wenn die Sequenz keine Elemente enthält.</returns>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis weist mehr als ein Element auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Gibt asynchron das einzige Element der Abfrage zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses, das die Bedingung in <paramref name="predicate" />erfüllt, oder default ( <paramref name="TElement" /> ), wenn kein solches Element gefunden wird.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element der Abfrage zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses, das die Bedingung in <paramref name="predicate" />erfüllt, oder default ( <paramref name="TElement" /> ), wenn kein solches Element gefunden wird.</returns>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Gibt asynchron das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält das einzige Element des Abfrageergebnisses oder default ( <paramref name="TElement" /> ), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Das Abfrageergebnis weist mehr als ein Element auf.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen <see cref="T:System.Collections.IEnumerator" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Gibt <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> zurück, der bei der Enumeration die SQL-Abfrage für die Datenbank ausführt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>Erstellt ein Array aus der Abfrage, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein Array, das Elemente aus der Eingabesequenz enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>Erstellt ein Array aus der Abfrage, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein Array, das Elemente aus der Eingabesequenz enthält.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion und einem Vergleich aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion und einem Vergleich aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüssel- und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Abfrageergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TResult" /> enthält, die aus der Abfrage ausgewählt wurden.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TResult" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TResult" /> enthält, die aus der Eingabesequenz ausgewählt wurden.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüssel- und einer Elementauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Abfrageergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte des Typs <paramref name="TResult" /> enthält, die aus der Abfrage ausgewählt wurden.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der <paramref name="elementSelector" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage ein <see cref="T:System.Collections.Generic.Dictionary`2" />, indem sie gemäß einer angegebenen Schlüsselauswahlfunktion aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das ausgewählte Schlüssel und Werte enthält.</returns>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der von <paramref name="keySelector" /> zurückgegebenen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>Erstellt aus der Abfrage eine <see cref="T:System.Collections.Generic.List`1" />, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>Erstellt aus der Abfrage eine <see cref="T:System.Collections.Generic.List`1" />, indem sie asynchron aufgelistet wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der die SQL-Zeichenfolge enthält, die beim Erstellen der Abfrage festgelegt wurde.Die Parameter sind nicht enthalten.</summary>
      <returns>Ein <see cref="T:System.String" />, der diese Instanz darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />-Objekt zurück.</summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem diese Navigationseigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Entität aus der Datenbank geladen wurde, oder legt ihn fest.</summary>
      <returns>true, wenn die Entität geladen ist oder IsLoaded explizit auf TRUE festgelegt wurde, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Lädt die Entität aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>Lädt die Entität asynchron aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt die Entität asynchron aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Entität aus der Datenbank verwendet wird.Die zurückgegebene Abfrage kann mit LINQ geändert werden, um in der Datenbank Daten zu filtern oder Vorgänge auszuführen.</summary>
      <returns>Eine Abfrage für die Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Instanzen dieser Klasse werden von der Reference-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und ermöglichen das Ausführen von Vorgängen, z. B. das Laden, für die Verweisnavigationseigenschaften der Entität.</summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist.</summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Navigationseigenschaft gehört.</summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Entität aus der Datenbank geladen wurde, oder legt ihn fest.</summary>
      <returns>true, wenn die Entität geladen ist oder IsLoaded explizit auf TRUE festgelegt wurde, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Lädt die Entität aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>Lädt die Entität asynchron aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Lädt die Entität asynchron aus der Datenbank.Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab.</summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />-Klasse für die durch dieses Objekt dargestellte Navigationseigenschaft zurück.</summary>
      <returns>Eine nicht generische Version.</returns>
      <param name="entry">Das Objekt, das die Navigationseigenschaft darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Entität aus der Datenbank verwendet wird.Die zurückgegebene Abfrage kann mit LINQ geändert werden, um in der Datenbank Daten zu filtern oder Vorgänge auszuführen.</summary>
      <returns>Eine Abfrage für die Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Stellt eine SQL-Abfrage für Entitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt wird.Instanzen dieser Klasse werden aus der <see cref="T:System.Data.Entity.DbSet" />-Instanz für den Entitätstyp abgerufen.Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach.SQL-Abfragen für Nichtentitäten werden mit <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" /> erstellt.Eine generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>Erstellt eine Instanz einer <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> beim Aufruf durch den Konstruktor eines abgeleiteten Typs, der als Test-Double für <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> verwendet wird.Methoden und Eigenschaften, die vom Test-Double verwendet werden sollen, müssen vom Test-Double implementiert werden, außer AsNoTracking und AsStreaming, wo die Standardimplementierung keine Option ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die Ergebnisse der Abfrage nicht vom zugeordneten <see cref="T:System.Data.Entity.DbContext" /> nachverfolgt werden.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Ruft den Typ ab, der der Abfrage zugeordnet ist.</summary>
      <returns>Der Typ, der der Abfrage zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der die SQL-Zeichenfolge enthält, die beim Erstellen der Abfrage festgelegt wurde.Die Parameter sind nicht enthalten.</summary>
      <returns>Ein <see cref="T:System.String" />, der diese Instanz darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Stellt eine SQL-Abfrage für Entitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt wird.Instanzen dieser Klasse werden aus der <see cref="T:System.Data.Entity.DbSet`1" />-Instanz für den Entitätstyp abgerufen.Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach.SQL-Abfragen für Nichtentitäten werden mit <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" /> erstellt.Eine nicht generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />.</summary>
      <typeparam name="TEntity">Der Typ der von der Abfrage zurückgegebenen Entitäten.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>Erstellt eine Instanz einer <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> beim Aufruf durch den Konstruktor eines abgeleiteten Typs, der als Test-Double für <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> verwendet wird.Methoden und Eigenschaften, die vom Test-Double verwendet werden sollen, müssen vom Test-Double implementiert werden, außer AsNoTracking und AsStreaming, wo die Standardimplementierung keine Option ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> zwischengespeichert werden.</summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>Gibt eine neue Abfrage zurück, die die Ergebnisse streamt, anstatt sie zu puffern.</summary>
      <returns>Eine neue Abfrage mit angewendetem AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Ruft den Typ ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Typ, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Von <see cref="T:System.Data.Entity.DbContext" /> ausgelöste Ausnahme, wenn zu erwarten war, dass SaveChanges für eine Entität ein Datenbankupdate verursacht, tatsächlich jedoch keine Zeilen in der Datenbank aktualisiert wurden.Dies bedeutet normalerweise, dass die Datenbank gleichzeitig aktualisiert wurde und dass ein Parallelitätstoken, das übereinstimmen sollte, nicht übereingestimmt hat.Beachten Sie bitte, dass Zustandseinträge, auf die von dieser Ausnahme verwiesen wird, aus Sicherheitsgründen nicht serialisiert werden, und Zugriffe auf die Zustandseinträge nach der Serialisierung NULL zurückgeben.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Von <see cref="T:System.Data.Entity.DbContext" /> ausgelöste Ausnahme, wenn das Speichern der Änderungen in der Datenbank fehlschlägt.Beachten Sie bitte, dass Zustandseinträge, auf die von dieser Ausnahme verwiesen wird, aus Sicherheitsgründen nicht serialisiert werden, und Zugriffe auf die Zustandseinträge nach der Serialisierung NULL zurückgeben.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte ab, die Entitäten darstellen, die nicht in der Datenbank gespeichert werden konnten.</summary>
      <returns>Die Einträge, die die Entitäten darstellen, die nicht gespeichert werden konnten.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>Stellt die Standard-<see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> dar, die Vorgänge nicht wiederholt, wenn Fehler auftreten.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>Führt den angegebenen Vorgang einmal aus.</summary>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der keine Ergebnisse zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Führt den angegebenen Vorgang einmal aus und gibt das Ergebnis zurück.</summary>
      <returns>Das Ergebnis des Vorgangs.</returns>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der das Ergebnis vom Typ <paramref name="TResult" />zurückgibt.</param>
      <typeparam name="TResult">Der Rückgabetyp von <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Führt den angegebenen asynchronen Vorgang einmal aus, ohne es im Fehlerfall erneut zu versuchen.</summary>
      <returns>Eine Aufgabe, die abgeschlossen wird, wenn die ursprüngliche Aufgabe erfolgreich abgeschlossen wird.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
      <typeparam name="TResult">Der Ergebnistyp des <see cref="T:System.Threading.Tasks.Task`1" />, das vom <paramref name="operation" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Führt den angegebenen asynchronen Vorgang einmal aus, ohne es im Fehlerfall erneut zu versuchen.</summary>
      <returns>Eine Aufgabe, die abgeschlossen wird, wenn die ursprüngliche Aufgabe erfolgreich abgeschlossen wird.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>Gibt an, ob die <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> nach einem Fehler die Ausführung erneut versuchen wird.</summary>
      <returns>true, wenn die <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> die Ausführung nach einem Fehler erneut versucht; andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>Stellt eine Standardimplementierung des <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> dar, das den zugrunde liegenden Anbieter verwendet, um das Manifesttoken abzurufen.Um mehrfache Abfragen zu vermeiden, verwendet diese Implementierung einen Zwischenspeicherungsmechanismus auf Basis des tatsächlichen Typen der <see cref="T:System.Data.Common.DbConnection" />-Instanz, der <see cref="P:System.Data.Common.DbConnection.DataSource" />-Eigenschaft und der <see cref="P:System.Data.Common.DbConnection.Database" />-Eigenschaft.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Gibt das Manifesttoken zurück, das für die angegebene Verbindung verwendet werden soll.</summary>
      <returns>Das zu verwendende Manifesttoken.</returns>
      <param name="connection">Die Verbindung, für die ein Manifesttoken erforderlich ist.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Stellt eine Entität dar, die zum Speichern von Metadaten zu einem EDM in der Datenbank verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Ruft die ID der Metadatenentität ab oder legt diese fest (derzeit immer 1).</summary>
      <returns>Die ID.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Ruft den Modellhash ab, mit dem überprüft wird, ob das Modell geändert wurde, seit die Datenbank anhand dieses Modells erstellt wurde, oder legt ihn fest.</summary>
      <returns>Der Modellhash.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Versucht, den mit Code First berechneten Modellhash für den angegebenen Kontext abzurufen.Diese Methode gibt NULL zurück, wenn der Kontext nicht im Code First-Modus verwendet wird.</summary>
      <returns>Die Hashzeichenfolge.</returns>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Enthält Methoden für den Zugriff auf das Entity Data Model, das mit Code First im EDMX-Format erstellt wurde.Diese Methoden werden in der Regel zum Debuggen verwendet, wenn das mit Code First intern erstellte Modell überprüft werden muss.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Verwendet Code First mit dem angegebenen Kontext und schreibt das resultierende Entity Data Model im EDMX-Format in den angegebenen Writer.Diese Methode kann nur mit Kontextinstanzen verwendet werden, die Code First verwenden und das Modell intern erstellen.Die Methode kann nicht für mit Database First oder Model First erstellte Kontexte, für mit einem bereits vorhandenen <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> erstellte Kontexte oder für mit einem bereits vorhandenen <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> erstellte Kontexte verwendet werden.</summary>
      <param name="context">Der Kontext.</param>
      <param name="writer">Der Writer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Schreibt das vom angegebenen <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> dargestellte Entity Data Model im EDMX-Format in den angegebenen Writer.</summary>
      <param name="model">Ein Objekt, das das EDM darstellt.</param>
      <param name="writer">Der Writer.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>Ein Schlüssel zum Auflösen von <see cref="T:System.Func`1" />.Er besteht aus dem invarianten Anbieternamen ADO.NET und dem Namen des Datenbankservers, der in der Verbindungszeichenfolge angegeben ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die diese Ausführungsstrategie verwendet wird.</param>
      <param name="serverName">Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich diesem Schlüssel ist.</summary>
      <returns>TRUE, wenn das angegebene Objekt und dieser Schlüssel gleich sind; andernfalls FALSE.</returns>
      <param name="obj">Das Objekt, mit dem verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die diese Ausführungsstrategie verwendet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>Die asynchrone Version der <see cref="T:System.Collections.IEnumerable" />-Schnittstelle, die Elementen ermöglicht, asynchron abgerufen zu werden.Diese Schnittstelle wird für die Interaktion mit Entity Framework-Abfragen verwendet und sollte nicht durch benutzerdefinierte Klassen implementiert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>Ruft einen Enumerator ab, der verwendet werden kann, um die Sequenz asynchron aufzulisten.</summary>
      <returns>Enumerator für die asynchrone Aufzählung über der Sequenz.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>Asynchrone Version der <see cref="T:System.Collections.Generic.IEnumerable`1" />-Schnittstelle, die Elementen der aufzählbaren Sequenz ermöglicht, asynchron abgerufen zu werden.Diese Schnittstelle wird für die Interaktion mit Entity Framework-Abfragen verwendet und sollte nicht durch benutzerdefinierte Klassen implementiert werden.</summary>
      <typeparam name="T">Der Typ der aufzulistenden Objekte.Dieser Typparameter ist Covariant. Das heißt, Sie können entweder den angegebenen Typ oder einen weiter abgeleiteten Typ verwenden. Weitere Informationen zu Ko- und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Ruft einen Enumerator ab, der verwendet werden kann, um die Sequenz asynchron aufzulisten.</summary>
      <returns>Enumerator für die asynchrone Aufzählung über der Sequenz.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>Die asynchrone Version der <see cref="T:System.Collections.IEnumerator" />-Schnittstelle, die Elementen ermöglicht, asynchron abgerufen zu werden.Diese Schnittstelle wird für die Interaktion mit Entity Framework-Abfragen verwendet und sollte nicht durch benutzerdefinierte Klassen implementiert werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>Ruft das aktuelle Element in der Iteration ab.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>Gibt den Enumerator an das nächste Element in der Sequenz weiter und gibt das Ergebnis asynchron zurück.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält TRUE, wenn der Enumerator erfolgreich an das nächste Element weitergegeben wurde; FALSE, wenn der Enumerator das Ende der Sequenz übergeben hat.</returns>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>Die asynchrone Version der <see cref="T:System.Collections.Generic.IEnumerator`1" />-Schnittstelle, die Elementen ermöglicht, asynchron abgerufen zu werden.Diese Schnittstelle wird für die Interaktion mit Entity Framework-Abfragen verwendet und sollte nicht durch benutzerdefinierte Klassen implementiert werden.</summary>
      <typeparam name="T">Der Typ der aufzulistenden Objekte.Dieser Typparameter ist Covariant. Das heißt, Sie können entweder den angegebenen Typ oder einen weiter abgeleiteten Typ verwenden. Weitere Informationen zu Ko- und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>Ruft das aktuelle Element in der Iteration ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>Definiert Methoden zum Erstellen und asynchronen Ausführen von Abfragen, die von einem <see cref="T:System.Linq.IQueryable" />-Objekt beschrieben werden.Diese Schnittstelle wird für die Interaktion mit Entity Framework-Abfragen verwendet und sollte nicht durch benutzerdefinierte Klassen implementiert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Führt die stark typisierte Abfrage asynchron aus, die von einer angegebenen Ausdrucksstruktur dargestellt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
      <param name="expression">Eine Ausdrucksstruktur, die eine LINQ-Abfrage darstellt.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
      <typeparam name="TResult">Der Typ des Werts, der aus der Ausführung der Abfrage resultiert.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Führt die Abfrage asynchron aus, die von einer angegebenen Ausdrucksstruktur dargestellt wird.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabenergebnis enthält den Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
      <param name="expression">Eine Ausdrucksstruktur, die eine LINQ-Abfrage darstellt.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Implementierungen dieser Schnittstelle werden verwendet, um DbConnection-Objekte für einen Typ von Datenbankserver auf Grundlage eines angegebenen Datenbanknamens zu erstellen.Eine Instanz wird in der <see cref="T:System.Data.Entity.Database" />-Klasse festgelegt, damit alle DbContexts-Objekte ohne Verbindungsinformationen oder nur mit einem Datenbanknamen oder einer Verbindungszeichenfolge erstellt werden, um standardmäßig einen bestimmten Typ von Datenbankserver zu verwenden.Es werden zwei Implementierungen dieser Schnittstelle bereitgestellt: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> zum Erstellen von Verbindungen mit Microsoft SQL Server, einschließlich EXPRESS Edition.<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> zum Erstellen von Verbindungen mit Microsoft SQL Server Compact Edition.Nach Bedarf können weitere Implementierungen für andere Datenbankserver hinzugefügt werden.Beachten Sie, dass Implementierungen threadsicher oder unveränderlich sein sollten, da möglicherweise mehrere Threads gleichzeitig auf sie zugreifen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt eine Verbindung auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge.</summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Eine Factory zum Erstellen abgeleiteter <see cref="T:System.Data.Entity.DbContext" />-Instanzen.Implementieren Sie diese Schnittstelle, um Entwurfszeitdienste für Kontexttypen zu aktivieren, die über keinen öffentlichen Standardkonstruktor verfügen.Sie haben die Möglichkeit, abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Instanzen zur Entwurfszeit zu erstellen, um bestimmte Entwurfszeiterfahrungen wie Modellrendering und DDL-Generierung zu unterstützen.Implementieren Sie diese Schnittstelle, um die Entwurfszeitinstanziierung für abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Typen zu aktivieren, die über keinen öffentlichen Standardkonstruktor verfügen.Durch Entwurfszeitdienste werden Implementierungen dieser Schnittstelle, die sich in derselben Assembly wie der abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Typ befinden, automatisch ermittelt.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.Dieser Typparameter ist Covariant. Das heißt, Sie können entweder den angegebenen Typ oder einen weiter abgeleiteten Typ verwenden. Weitere Informationen zu Ko- und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Erstellt eine neue Instanz eines abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Typs.</summary>
      <returns>Eine TContext-Instanz</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>Eine Strategie, die verwendet wird, um einen Befehl oder eine Abfrage für die Datenbank auszuführen – möglicherweise mit einer Logik für wiederholte Versuche, wenn ein Fehler auftritt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>Führt den angegebenen Vorgang aus.</summary>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der keine Ergebnisse zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Führt den angegebenen Vorgang aus und gibt das Ergebnis zurück.</summary>
      <returns>Das Ergebnis des Vorgangs.</returns>
      <param name="operation">Ein Delegat, der einen ausführbaren Vorgang darstellt, der das Ergebnis vom Typ <paramref name="TResult" />zurückgibt.</param>
      <typeparam name="TResult">Der Rückgabetyp von <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Führt den angegebenen asynchronen Vorgang aus und gibt das Ergebnis zurück.</summary>
      <returns>Eine Aufgabe, die vollständig ausgeführt wird, wenn die ursprüngliche Aufgabe beendet wird (entweder das erste Mal oder nach Wiederholungen aufgrund von vorübergehenden Fehlern).Wenn die Aufgabe aufgrund eines nicht vorübergehenden Fehlers fehlschlägt oder das Wiederholungslimit erreicht ist, wird die zurückgegebene Aufgabe als Fehler angesehen, und die Ausnahme muss beachtet werden.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe vom Typ <paramref name="TResult" />zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
      <typeparam name="TResult">Der Ergebnistyp des <see cref="T:System.Threading.Tasks.Task`1" />, das vom <paramref name="operation" /> zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Führt den angegebenen asynchronen Vorgang aus.</summary>
      <returns>Eine Aufgabe, die vollständig ausgeführt wird, wenn die ursprüngliche Aufgabe beendet wird (entweder das erste Mal oder nach Wiederholungen aufgrund von vorübergehenden Fehlern).Wenn die Aufgabe aufgrund eines nicht vorübergehenden Fehlers fehlschlägt oder das Wiederholungslimit erreicht ist, wird die zurückgegebene Aufgabe als Fehler angesehen, und die Ausnahme muss beachtet werden.</returns>
      <param name="operation">Eine Funktion, die eine gestartete Aufgabe zurückgibt.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Wiederholungsvorgangs verwendetes Abbruchstoken, jedoch nicht für bereits gestartete oder erfolgreich abgeschlossene Vorgänge.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>Gibt an, ob diese <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> nach einem Fehler die Ausführung erneut versuchen kann.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>Stellt einen Schlüsselwert dar, der ein Entity Framework-Modell eindeutig identifiziert, das in den Speicher geladen wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>Bestimmt, ob der aktuelle zwischengespeicherte Modellschlüssel gleich dem angegebenen zwischengespeicherten Modellschlüssel ist.</summary>
      <returns>true, wenn der aktuelle zwischengespeicherte Modellschlüssel gleich dem angegebenen zwischengespeicherten Modellschlüssel ist; andernfalls false.</returns>
      <param name="other">Der zwischengespeicherte Modellschlüssel für den Vergleich mit dem aktuellen zwischengespeicherten Schlüssel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>Gibt die Hashfunktion für diesen zwischengespeicherten Modellschlüssel zurück.</summary>
      <returns>Die Hashfunktion für diesen zwischengespeicherten Modellschlüssel.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>Implementieren Sie diese Schnittstelle in Ihrem Kontext, um benutzerdefinierte Logik zum Berechnen des Schlüssels für die Suche nach einem bereits erstellen Modell im Cache zu verwenden.Diese Schnittstelle ermöglicht Ihnen, einen einzelnen Kontexttyp mit unterschiedlichen Modellen in derselben AppDomain zu verwenden oder mehrere Kontexttypen für dasselbe Modell zu verwenden.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>Ruft den dem Anbieter zugeordneten zwischengespeicherten Schlüssel ab.</summary>
      <returns>Der dem Anbieter zugeordnete zwischengespeicherte Schlüssel.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>Ein Dienst zum Abrufen der richtigen <see cref="T:System.Data.Common.DbProviderFactory" /> aus einer vorgegebenen <see cref="T:System.Data.Common.DbConnection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>Gibt die <see cref="T:System.Data.Common.DbProviderFactory" /> für die angegebene Verbindung zurück.</summary>
      <returns>Die Anbieterfactory für die Verbindung.</returns>
      <param name="connection">Die Verbindung.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>Ein Dienst bei vorhandener Verbindung zum Abrufen eines Anbietermanifesttokens.Die <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" />-Klasse wird standardmäßig verwendet und nutzt den zugrunde liegenden Anbieter, um das Token zu abzurufen, wobei häufig die Verbindung geöffnet wird.Es kann stattdessen eine andere Implementierung verwendet werden, indem ein <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> zu <see cref="T:System.Data.Entity.DbConfiguration" /> hinzugefügt wird, der alle Informationen der Verbindung verwenden kann, um das Token zurückzugeben.Beispiel: Wenn die Verbindung bekanntermaßen auf eine SQL Server 2008-Datenbank verweist, kann "2008" zurückgegeben werden, ohne die Verbindung zu öffnen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Gibt das Manifesttoken zurück, das für die angegebene Verbindung verwendet werden soll.</summary>
      <returns>Das zu verwendende Manifesttoken.</returns>
      <param name="connection">Die Verbindung, für die ein Manifesttoken erforderlich ist.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>Implementieren Sie diese Schnittstelle, um die Serialisierung benutzerdefinierter Anmerkungen in Form von <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />-Instanzen von und nach EDMX-XML zu gestatten.Eine Serialisiererinstanz wird normalerweise mit der <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" />-Methode festgelegt.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Deserialisiert die angegebene Zeichenkette zurück in den erwarteten Anmerkungswert.</summary>
      <returns>Der deserialisierte Anmerkungswert.</returns>
      <param name="name">Der Name der Anmerkung, die deserialisiert wird.</param>
      <param name="value">Die Zeichenfolge, die deserialisiert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Serialisiert den angegebenen Anmerkungswert in eine Zeichenkette zur Speicherung im EDMX-XML.</summary>
      <returns>Der serialisierte Wert.</returns>
      <param name="name">Der Name der Anmerkung, die serialisiert wird.</param>
      <param name="value">Der zu serialisierende Wert.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention bewirkt, dass DbModelBuilder beim Erstellen des Modells Metadaten zum Modell einschließt.Wenn <see cref="T:System.Data.Entity.DbContext" /> ein Modell gemäß Konvention erstellt, wird diese Konvention der Liste der vom DbModelBuilder verwendeten Konventionen hinzugefügt.Dies bewirkt, dass Modellmetadaten in die Datenbank geschrieben werden, wenn DbContext zum Erstellen der Datenbank verwendet wird.So kann dann problemlos überprüft werden, ob das Modell geändert wurde, seit es das letzte Mal für die Datenbank verwendet wurde.Diese Konvention kann aus den <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen entfernt werden, indem die OnModelCreating-Methode in einer abgeleiteten DbContext-Klasse überschrieben wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Schnittstelle, die von Objekten implementiert wird, die eine <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />-Instanz bereitstellen können.Die <see cref="T:System.Data.Entity.DbContext" />-Klasse implementiert diese Schnittstelle, um Zugriff auf den zugrunde liegenden ObjectContext zu bieten.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Ruft den Objektkontext ab.</summary>
      <returns>Der Objektkontext.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>Wird von <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> und <see cref="T:System.Data.Entity.DbConfiguration" /> verwendet, wenn ein invarianter Name des Anbieters aus einer <see cref="T:System.Data.Common.DbProviderFactory" /> aufgelöst wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>Ruft den Namen des Anbieters ab.</summary>
      <returns>Der Name des Anbieters.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server LocalDb auf Grundlage eines bestimmten Datenbanknamens oder einer bestimmten Verbindungszeichenfolge verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>Erstellt eine neue Instanz der Verbindungsfactory für die angegebene LocalDb-Version.Verwenden Sie für SQL Server 2012 LocalDb "v11.0".Verwenden Sie für SQL Server 2014 LocalDb und höher "mssqllocaldb".</summary>
      <param name="localDbVersion">Die zu verwendende LocalDb-Version.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>Erstellt eine neue Instanz der Verbindungsfactory für die angegebene LocalDb-Version.Verwenden Sie für SQL Server 2012 LocalDb "v11.0".Verwenden Sie für SQL Server 2014 LocalDb und höher "mssqllocaldb".</summary>
      <param name="localDbVersion">Die zu verwendende LocalDb-Version.</param>
      <param name="baseConnectionString">Die Verbindungszeichenfolge, die für andere Datenbankoptionen als 'Initial Catalog', 'Data Source' und 'AttachDbFilename' verwendet werden soll.Beim Aufrufen von 'CreateConnection' werden 'Initial Catalog' und 'AttachDbFilename' dieser Zeichenfolge auf Grundlage des Datenbanknamens vorangestellt.'Data Source' wird auf der Grundlage des LocalDbVersion-Arguments festgelegt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>Die Verbindungszeichenfolge, die für andere Datenbankoptionen als 'Initial Catalog', 'Data Source' und 'AttachDbFilename' verwendet werden soll.Beim Aufrufen von 'CreateConnection' werden 'Initial Catalog' und 'AttachDbFilename' dieser Zeichenfolge auf Grundlage des Datenbanknamens vorangestellt.'Data Source' wird auf der Grundlage des LocalDbVersion-Arguments festgelegt.Der Standardausdruck lautet 'Integrated Security=True'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server LocalDb.Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie als Datenbankname behandelt.</summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention verwendet den Namen der abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Klasse als Container für das durch Code First erstellte konzeptionelle Modell.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention auf das angegebene Modell an.</summary>
      <param name="item">Der Container, auf den die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention verwendet den Namespace der abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Klasse als Namespace des durch Code First erstellten konzeptionellen Modells.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>Vergleicht Objekte mithilfe von Verweisgleichheit.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>Ruft die Standardinstanz ab.</summary>
      <returns>Die Standardinstanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>Bestimmt, ob die angegebenen Objektinstanzen als gleich betrachtet werden.</summary>
      <returns>true, wenn die Objekte als gleich betrachtet werden, andernfalls false.</returns>
      <param name="x">Das erste zu vergleichende Objekt.</param>
      <param name="y">Das zweite zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>Ruft den Hashcode für das angegebene Objekt ab.</summary>
      <returns>Der Hashcode für das angegebene Objekt.</returns>
      <param name="obj">Das Objekt.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Instanzen dieser Klasse werden intern für die Erstellung konstanter Ausdrücke für <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> verwendet, die in die Ausdrucksbaumstruktur eingefügt werden, um Verweise auf <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> und <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> zu ersetzen.</summary>
      <typeparam name="TElement">Der Typ des Elements.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Die in der LINQ-Ausdrucksbaumstruktur erwartete öffentliche Eigenschaft.</summary>
      <returns>Die Abfrage.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn die Aktion nach der konfigurierten Anzahl von Wiederholungen erneut fehlgeschlagen ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />-Klasse ohne Fehlermeldung.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server Compact Edition auf Grundlage eines angegebenen Datenbanknamens oder einer angegebenen Verbindungszeichenfolge verwendet.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>Erstellt eine neue Verbindungsfactory mit leeren DatabaseDirectory- und BaseConnectionString-Eigenschaften (Standardeinstellung).</summary>
      <param name="providerInvariantName">Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Erstellt eine neue Verbindungsfactory mit den angegebenen DatabaseDirectory- und BaseConnectionString-Eigenschaften.</summary>
      <param name="providerInvariantName">Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</param>
      <param name="databaseDirectory">Der Pfad, der dem Datenbanknamen vorangestellt werden soll, der den von SQL Server Compact Edition verwendeten Dateinamen bildet, wenn die Datenbankdatei erstellt oder gelesen wird.Eine leere Zeichenfolge bedeutet, dass SQL Server Compact Edition den Standardwert für den Datenbankdatei-Speicherort verwendet.</param>
      <param name="baseConnectionString">Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Data Source" verwendet werden soll.Dieser Zeichenfolge wird Data Source auf Grundlage des Datenbanknamens vorangestellt, wenn CreateConnection aufgerufen wird.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Data Source" verwendet werden soll.Dieser Zeichenfolge wird Data Source auf Grundlage des Datenbanknamens vorangestellt, wenn CreateConnection aufgerufen wird.Der Standardwert ist eine leere Zeichenfolge. Dies bedeutet, dass keine anderen Optionen verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server Compact Edition.Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie als Datenbankname behandelt.</summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Der Pfad, der dem Datenbanknamen vorangestellt werden soll, der den von SQL Server Compact Edition verwendeten Dateinamen bildet, wenn die Datenbankdatei erstellt oder gelesen wird.Der Standardwert ist "|DataDirectory|". Dies bedeutet, dass die Datei in das angegebene Datenverzeichnis eingefügt wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server auf Grundlage eines angegebenen Datenbanknamens oder einer angegebenen Verbindungszeichenfolge verwendet.Standardmäßig wird die Verbindung mit '.\SQLEXPRESS' hergestellt.Dies kann geändert werden, indem beim Erstellen einer Factoryinstanz die Basisverbindungszeichenfolge geändert wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Erstellt eine neue Verbindungsfactory mit der BaseConnectionString-Standardeigenschaft 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Erstellt eine neue Verbindungsfactory mit der angegebenen BaseConnectionString-Eigenschaft.</summary>
      <param name="baseConnectionString">Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Initial Catalog" verwendet werden soll.Dieser Zeichenfolge wird beim Aufruf von CreateConnection der "Inital Catalog" auf Grundlage des Datenbanknamens vorangestellt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Initial Catalog" verwendet werden soll.Dieser Zeichenfolge wird beim Aufruf von CreateConnection der "Inital Catalog" auf Grundlage des Datenbanknamens vorangestellt.Der Standard ist 'Data Source=.\SQLEXPRESS; Integrated Security=True;'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server.Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie als Datenbankname behandelt.</summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Dieses Attribut kann auf eine gesamte abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Klasse oder auf einzelne <see cref="T:System.Data.Entity.DbSet`1" />-Eigenschaften oder <see cref="T:System.Data.Entity.IDbSet`1" />-Eigenschaften in dieser Klasse angewendet werden.Bei Anwendung des Attributs werden ggf. ermittelte <see cref="T:System.Data.Entity.DbSet`1" />-Eigenschaften oder <see cref="T:System.Data.Entity.IDbSet`1" />-Eigenschaften in das Modell eingeschlossen, jedoch nicht automatisch initialisiert.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>Wird von Entity Framework-Anbietern implementiert und verwendet, um zu überprüfen, ob Tabellen in einer bestimmten Datenbank vorhanden sind.Dies wird von Datenbankinitialisierern verwendet, um zu bestimmen, ob eine vorhandene Datenbank als leer behandelt wird, sodass Tabellen erstellt werden müssen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>Wenn dies in einer abgeleiteten Klasse überschrieben wird, wird überprüft, wo die angegebenen Tabellen in der Datenbank für die angegebene Verbindung vorhanden sind.</summary>
      <returns>TRUE, wenn eine der Modelltabellen oder die EdmMetadata-Tabelle vorhanden ist.</returns>
      <param name="context">Der Kontext, für den die Tabellenüberprüfung ausgeführt wird, wird normalerweise verwendet, um einen entsprechenden <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> zu erhalten.</param>
      <param name="connection">Eine Verbindung mit der Datenbank.Kann offen oder geschlossen sein; sollte nach dem Öffnen wieder geschlossen werden.Nicht verwerfen.</param>
      <param name="modelTables">Die Tabellen, deren Vorhandensein überprüft wird.</param>
      <param name="edmMetadataContextTableName">Der Name der EdmMetadata-Tabelle, deren Vorhandensein überprüft wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Helper-Methode, um den Tabellennamen für die angegebene S-Space-<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> abzurufen.</summary>
      <returns>Der Tabellenname.</returns>
      <param name="modelTable">Die S-Space-Entitätenmenge für die Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>Diese Klasse wird vom <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> verwendet, um die Ablaufverfolgungsinformationen für Transaktionen aus der Datenbank zu lesen bzw. in die Datenbank zu schreiben.Sie können die Definition der Transaktionstabelle ändern, indem Sie von dieser Klasse ableiten und <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" /> überschreiben.Abgeleitete Klassen können mit <see cref="T:System.Data.Entity.DbConfiguration" /> registriert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" />-Klasse.</summary>
      <param name="existingConnection">Die Verbindung, die der Kontext verwendet, für den die Transaktionen aufgezeichnet werden.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Diese Methode wird aufgerufen, wenn das Modell für einen abgeleiteten Kontext initialisiert wurde.</summary>
      <param name="modelBuilder">Der Generator, der das Modell für den zu erstellenden Kontext definiert.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>Ruft ein <see cref="T:System.Data.Entity.DbSet`1" /> ab oder legt eines fest, das zum Schreiben und Lesen von <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />-Instanzen verwendet werden kann.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.DbSet`1" />, der zum Lesen und Schreiben von <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />-Instanzen verwendet werden kann.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>Stellt die Basisklasse für Interceptors dar, die Transaktionsvorgänge behandeln.Abgeleitete Klassen können mit <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> oder <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" /> registriert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, mit der die Transaktion begonnen wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die die Transaktion startet.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>Gibt bei Implementierung in einer abgeleiteten Klasse das Skript zur Vorbereitung der Datenbank auf diesen Transaktionshandler zurück.</summary>
      <returns>Ein Skript zum Ändern des Datenbankschemas für diesen Transaktionshandler.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die geschlossen wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die geschlossen wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion, für die ein Commit ausgeführt wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion, für die ein Commit ausgeführt wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>Ruft die Verbindung ab, für die die Transaktionsvorgänge behandelt werden.</summary>
      <returns>Die <see cref="T:System.Data.Common.DbConnection" />, für die die Transaktionsvorgänge behandelt werden.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>Ruft den Kontext ab, für den die Transaktionsvorgänge behandelt werden.</summary>
      <returns>Die <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />, für die die Transaktionsvorgänge behandelt werden.Kann NULL sein.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>Gibt die von diesem Transaktionshandler verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>Gibt die von diesem Transaktionshandler verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die verworfen wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die verworfene Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die verworfen wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion, die verworfen wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Initialisiert diese Instanz unter Verwendung des angegebenen Kontexts.</summary>
      <param name="context">Der Kontext, für den die Transaktionsvorgänge behandelt werden.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Initialisiert diese Instanz unter Verwendung des angegebenen Kontexts.</summary>
      <param name="context">Der Kontext, für den die Transaktionsvorgänge behandelt werden.</param>
      <param name="connection">Die für die Initialisierung zu verwendende Verbindung.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Transaktionshandler verworfen wird, oder legt diesen fest.</summary>
      <returns>true, wenn dieser Transaktionshandler verworfen wird, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>Prüft, ob der bereitgestellte Abfangkontext den Zielkontext enthält oder ob die bereitgestellte Verbindung dieselbe ist wie die vom Zielkontext verwendete Verbindung.</summary>
      <returns>true, wenn der bereitgestellte Abfangkontext den Zielkontext enthält oder die bereitgestellte Verbindung dieselbe ist wie die vom Zielkontext verwendete Verbindung, wenn der bereitgestellte Abfangkontext keine Kontexte enthält; andernfalls false.</returns>
      <param name="connection">Eine Verbindung.</param>
      <param name="interceptionContext">Ein Abfangkontext.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>Ruft den Kontext ab, für den die Transaktionsvorgänge behandelt werden.</summary>
      <returns>Die <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />, für die die Transaktionsvorgänge behandelt werden.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die geöffnet wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung, die geöffnet wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion, für die ein Rollback durchgeführt wurde.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="transaction">Die Transaktion, für die ein Rollback durchgeführt wird.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Kann in einer abgeleiteten Klasse implementiert werden.</summary>
      <param name="connection">Die Verbindung.</param>
      <param name="interceptionContext">Die Kontextinformationen für den Aufruf.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>Stellt eine Transaktion dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>Ruft den lokalen Zeitpunkt ab, zu dem die Transaktion gestartet wurde, oder legt ihn fest.</summary>
      <returns>Lokaler Zeitpunkt, zu dem die Transaktion gestartet wurde.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>Gibt einen Wert an, der bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>Ruft eine eindeutige ID ab, die jedem Transaktionsobjekt zugeordnet wird, oder legt sie fest.</summary>
      <returns>Jedem Transaktionsobjekt wird eine eindeutige ID zugeordnet.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Wird ausgelöst, wenn ein Kontext im Database First- oder Model First-Modus aus den <see cref="T:System.Data.Entity.DbContext" />-Vorlagen generiert und dann im Code First-Modus verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen über die Quelle oder das Ziel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse.</summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>Stellt die Erstellung eines Dienstes dar, der die Codegenerierung für benutzerdefinierte Anmerkungen beim Gerüstbau für Migrationen zulässt.Die abgeleitete Klasse sollte auf den <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> festgelegt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für den gegebenen Anmerkungswert.</summary>
      <param name="annotationName">Der Name der Anmerkung, für die ein Wert generiert wird.</param>
      <param name="annotation">Der Anmerkungswert.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Geben zusätzliche Namespaces zurück, die in den Code eingeschlossen werden sollen, der für das Migrationsgerüst generiert wird.Die Standardimplementierung gibt eine leere Enumeration zurück.</summary>
      <returns>Eine Liste mit weiteren Namespaces, die eingeschlossen werden sollen.</returns>
      <param name="annotationNames">Die Namen der Anmerkungen, die in den generierten Code eingeschlossen werden.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>Stellt ein Paar von Anmerkungswerten in einer handcodierten <see cref="T:System.Data.Entity.Migrations.DbMigration" /> oder einer mit Gerüst dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>Erstellt ein neues Paar von Anmerkungswerten.</summary>
      <param name="oldValue">Der alte Wert der Anmerkung, der NULL sein kann, wenn die Anmerkung gerade erst erstellt wurde.</param>
      <param name="newValue">Der neue Wert der Anmerkung, der NULL sein kann, wenn die Anmerkung gelöscht wurde.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich diesem Instanzobjekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich diesem Instanzobjekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, mit dem verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>Ruft den Hashcode ab.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>Ruft den neuen Wert der Anmerkung ab, der NULL sein kann, wenn die Anmerkung gelöscht wurde.</summary>
      <returns>Der neue Wert der Anmerkung, der NULL sein kann, wenn die Anmerkung gelöscht wurde.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>Ruft den alten Wert der Anmerkung ab, der NULL sein kann, wenn die Anmerkung gerade erst erstellt wurde.</summary>
      <returns>Der alte Wert der Anmerkung, der NULL sein kann, wenn die Anmerkung gerade erst erstellt wurde.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Gibt TRUE zurück, wenn beide Anmerkungspaare dieselben Werte haben, andernfalls FALSE.</summary>
      <returns>true, wenn beide Paare dieselben Werte enthalten.</returns>
      <param name="left">Ein Paar von Anmerkungswerten.</param>
      <param name="right">Ein Paar von Anmerkungswerten.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Gibt TRUE zurück, wenn die beiden Anmerkungspaare unterschiedliche Werte haben, andernfalls FALSE.</summary>
      <returns>true, wenn die Paare unterschiedliche Werte enthalten.</returns>
      <param name="left">Ein Paar von Anmerkungswerten.</param>
      <param name="right">Ein Paar von Anmerkungswerten.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>Zurückgegeben von <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> und die dazugehörigen Methoden, um anzugeben, ob ein Objekt in Konflikt mit einem anderen steht oder nicht, sodass die beiden Objekte zu einem kombiniert werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>Erstellt eine neue <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" />-Instanz.</summary>
      <param name="isCompatible">Gibt an, ob die beiden getesteten Objekte kompatibel sind oder nicht.</param>
      <param name="errorMessage">Eine Fehlermeldung, die angibt, inwiefern die Objekte nicht kompatibel sind.Voraussichtlich NULL, wenn isCompatible TRUE ist.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>Wenn <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> TRUE ist, wird eine Fehlermeldung zurückgegeben, die angibt, inwiefern die beiden getesteten Objekte nicht kompatibel sind.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>TRUE, wenn die beiden getesteten Objekte kompatibel sind, andernfalls FALSE.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>Implizite Konvertierung in einen Bool, um zuzulassen, dass das Ergebnisobjekt direkt in Überprüfungen verwendet werden kann.</summary>
      <returns>TRUE, wenn das Ergebnis kompatibel ist, andernfalls FALSE.</returns>
      <param name="result">Das zu konvertierende Objekt.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>Typen, die als benutzerdefinierte Anmerkungen verwendet werden, können diese Schnittstelle implementieren. So wird angezeigt, dass ein Versuch, mehrere Anmerkungen mit demselben Namen in einer angegebenen Tabelle oder Spalte zu verwenden, möglich ist, indem mehrere Anmerkungen zu einer zusammengeführt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>Wird als TRUE zurückgegeben, wenn diese Anmerkung nicht im Konflikt mit der angegebenen Anmerkung steht, sodass die beiden Anmerkungen mit der <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" />-Methode zu einer kombiniert werden können.</summary>
      <returns>Ein CompatibilityResult, das angibt, ob diese Anmerkung mit der anderen kompatibel ist oder nicht.</returns>
      <param name="other">Die Anmerkung, die verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>Führt diese Anmerkung mit der angegebenen Anmerkung zusammen und gibt eine neue, zusammengeführte Anmerkung zurück.Diese Methode ist voraussichtlich nur erfolgreich, wenn <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> TRUE zurückgibt.</summary>
      <returns>Eine neue zusammengeführte Anmerkung.</returns>
      <param name="other">Die Anmerkung, die mit dieser Anmerkung zusammengeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>Stellt die benutzerdefinierten Anmerkungen zur Darstellung von Datenbankindizes in einem Entity Framework-Modell dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Klasse unter Verwendung der gegebenen Indexauflistung.</summary>
      <param name="indexAttributes">Die Indexattribute, die einen oder mehrere Indizes darstellen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Klasse unter Verwendung der gegebenen Indexauflistung.</summary>
      <param name="indexAttribute">Ein Indexattribut, das einen Index darstellt.</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>Der Name, der verwendet wird, wenn diese Anmerkung in Entity Framework-Metadaten gespeichert wird oder in eine SSDL-/EDMX-Datei serialisiert wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>Ruft die von dieser Anmerkung dargestellten Indizes ab.</summary>
      <returns>Die von dieser Anmerkung dargestellten Indizes.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>Wird als TRUE zurückgegeben, wenn diese Anmerkung nicht im Konflikt mit der angegebenen Anmerkung steht, sodass die beiden Anmerkungen mit der <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" />-Methode zu einer kombiniert werden können.</summary>
      <returns>Ein CompatibilityResult, das angibt, ob diese Anmerkung mit der anderen kompatibel ist oder nicht.</returns>
      <param name="other">Die Anmerkung, die verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>Führt diese Anmerkung mit der angegebenen Anmerkung zusammen und gibt eine neue Anmerkung zurück, die die zusammengeführten Indizes enthält.</summary>
      <returns>Eine neue Anmerkung mit Indizes aus den beiden zusammengeführten Anmerkungen.</returns>
      <param name="other">Die Anmerkung, die mit dieser Anmerkung zusammengeführt werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Die andere Anmerkung enthält Indizes, die nicht mit den Indizes dieser Anmerkung kompatibel sind.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Objekts zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Objekts.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>Diese Klasse wird zum Serialisieren und Deserialisieren von <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Objekten verwendet, sodass sie im EDMX-Format des Entity Framework-Modells gespeichert werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Deserialisiert die angegebene Zeichenfolge zurück in ein <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Objekt.</summary>
      <returns>Der deserialisierte Anmerkungswert.</returns>
      <param name="name">Der Name der Anmerkung, die deserialisiert wird.</param>
      <param name="value">Die Zeichenfolge, die deserialisiert werden soll.</param>
      <exception cref="T:System.FormatException">Wenn ein Fehler beim Lesen des serialisierten Werts auftritt.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Serialisiert die angegebene <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> in eine Zeichenfolge zur Speicherung im EDMX-XML.</summary>
      <returns>Der serialisierte Wert.</returns>
      <param name="name">Der Name der Anmerkung, die serialisiert wird.</param>
      <param name="value">Der Wert, der serialisiert werden soll. Dieser muss ein IndexAnnotation-Objekt sein.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>Stellt die Ereignisargumente dar, die an <see cref="E:System.Data.Entity.DbConfiguration.Loaded" />-Ereignishandler übergeben wurden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Fügt eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Instanz zur Verantwortungskette der Resolver hinzu, die verwendet werden, um Abhängigkeiten aufzulösen, die für Entity Framework erforderlich sind.Im Gegensatz zur AddDependencyResolver-Methode platziert diese Methode den Resolver an unterster Stelle der Verantwortungskette, sodass er nur zum Auflösen einer Abhängigkeit verwendet wird, die nicht von einem der anderen Resolver gelöst werden konnte.</summary>
      <param name="resolver">Der hinzuzufügende Resolver.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>Fügt eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Instanz zur Verantwortungskette der Resolver hinzu, die verwendet werden, um Abhängigkeiten aufzulösen, die für Entity Framework erforderlich sind.</summary>
      <param name="resolver">Der hinzuzufügende Resolver.</param>
      <param name="overrideConfigFile">Wenn true, hat der hinzugefügte Konfliktlöser Vorrang vor den Einstellungen in der Konfigurationsdatei.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>Ruft eine Momentaufnahme des <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> ab, der gesperrt werden soll.Verwenden Sie die GetService-Methoden für dieses Objekt, um Dienste abzurufen, die registriert wurden.</summary>
      <returns>Eine Momentaufnahme des <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, der gesperrt werden soll.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>Ruft den Typ dieser Instanz ab.</summary>
      <returns>Der Typ dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>Fügt einen Umbruchskonfliktlöser der Konfiguration hinzu, die gesperrt werden soll.Ein Umbruchresolver erkennt, dass ein Dienst durch die Resolverkette zurückgegeben worden wäre, und schließt diesen in einen anderen Dienst desselben Typs ein bzw. ersetzt ihn hierdurch.</summary>
      <param name="serviceInterceptor">Ein Delegat, der den nicht verpackten Dienst und den Schlüssel nimmt und den verpackten oder ersetzten Dienst zurückgibt.</param>
      <typeparam name="TService">Der einzubindende oder zu ersetzende Diensttyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung von <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>Erweiterungsmethoden zum Aufrufen der <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />-Methode mithilfe eines generischen Typparameters und/oder ohne Namen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> auf und übergibt den generischen Typ der Methode als das Typargument und NULL als das Name-Argument.</summary>
      <returns>Die aufgelöste Abhängigkeit oder null, falls der Konfliktlöser sie nicht auflösen kann.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <typeparam name="T">Der aufzulösende Vertragstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> auf und übergibt den generischen Typ der Methode sowie den angegebenen Namen als Argumente.</summary>
      <returns>Die aufgelöste Abhängigkeit oder null, falls der Konfliktlöser sie nicht auflösen kann.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <param name="key">Der Schlüssel der aufzulösenden Abhängigkeit.</param>
      <typeparam name="T">Der aufzulösende Vertragstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> auf, wobei das angegebene Typargument übergeben und NULL für das Name-Argument verwendet wird.</summary>
      <returns>Die aufgelöste Abhängigkeit oder null, falls der Konfliktlöser sie nicht auflösen kann.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <param name="type">Der aufzulösende Vertragstyp.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> auf und übergibt den generischen Typ der Methode als das Typargument und NULL als das Name-Argument.</summary>
      <returns>Alle aufgelösten Abhängigkeiten oder eine <see cref="T:System.Collections.Generic.IEnumerable`1" />, wenn keine Dienste aufgelöst werden.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <typeparam name="T">Der aufzulösende Vertragstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> auf und übergibt den generischen Typ der Methode sowie den angegebenen Namen als Argumente.</summary>
      <returns>Alle aufgelösten Abhängigkeiten oder eine <see cref="T:System.Collections.Generic.IEnumerable`1" />, wenn keine Dienste aufgelöst werden.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <param name="key">Der Schlüssel der aufzulösenden Abhängigkeit.</param>
      <typeparam name="T">Der aufzulösende Vertragstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Ruft <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> auf, wobei das angegebene Typargument übergeben und NULL für das Name-Argument verwendet wird.</summary>
      <returns>Alle aufgelösten Abhängigkeiten oder eine <see cref="T:System.Collections.Generic.IEnumerable`1" />, wenn keine Dienste aufgelöst werden.</returns>
      <param name="resolver">Der zu verwendende Konfliktlöser.</param>
      <param name="type">Der aufzulösende Vertragstyp.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>Eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Implementierung, die zum Auflösen von <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />-Factorys verwendet wird.</summary>
      <typeparam name="T">Der Typ der Ausführungsstrategie, die aufgelöst wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" />.</summary>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die diese Ausführungsstrategie verwendet wird.</param>
      <param name="serverName">Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.null passt zu allen Namen.</param>
      <param name="getExecutionStrategy">Eine Funktion, die eine neue Instanz einer Ausführungsstrategie zurückgibt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann versucht dieser Konfliktlöser, den Dienst zurückzugeben, der verwendet werden soll; andernfalls gibt er NULL zurück.Wenn der angegebene Typ Func{IExecutionStrategy} ist, dann wird als Schlüssel Folgendes erwartet: <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Ein <see cref="T:System.Func`1" /> oder null.</returns>
      <param name="type">Der aufzulösende Diensttyp.</param>
      <param name="key">Ein Schlüssel, der zur Identifizierung des zurückzugebenden Diensts verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann versucht dieser Konfliktlöser, den Dienst zurückzugeben, der verwendet werden soll; andernfalls gibt er eine leere Enumeration zurück.Wenn der angegebene Typ Func{IExecutionStrategy} ist, dann wird als Schlüssel Folgendes erwartet: <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Eine <see cref="T:System.Func`1" />-Aufzählung oder eine leere Enumeration.</returns>
      <param name="type">Der aufzulösende Diensttyp.</param>
      <param name="key">Ein Schlüssel, der zur Identifizierung des zurückzugebenden Diensts verwendet wird.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>Diese Schnittstelle wird von jedem Objekt implementiert, das eine Abhängigkeit auflösen kann, entweder direkt oder mithilfe eines externen Containers.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>Versucht, eine Abhängigkeit für einen angegebenen Vertragstyp und optional einen angegebenen Schlüssel aufzulösen.Wenn der Konfliktlöser die Abhängigkeit nicht auflösen kann, muss er null und nicht throw zurückgeben.Dies ermöglicht die Verwendung von Resolvern in einem Verantwortungskettenmuster, sodass mehrere Resolver aufgefordert werden können, eine Abhängigkeit aufzulösen, bis dies schließlich von einem Resolver ausgeführt wird.</summary>
      <returns>Die aufgelöste Abhängigkeit, die eine Instanz des angegebenen Vertragstyps sein muss (oder null, wenn die Abhängigkeit nicht aufgelöst werden konnte).</returns>
      <param name="type">Die Schnittstelle oder die abstrakte Basisklasse, die die aufzulösende Abhängigkeit definiert.Vorm zurückgegebenen Objekt wird vorausgesetzt, dass es eine Instanz dieses Typs ist.</param>
      <param name="key">Optional: der Schlüssel der aufzulösenden Abhängigkeit.Dies kann für Abhängigkeiten, die nicht nach Schlüssel unterschieden werden, null sein.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>Versucht, eine Abhängigkeit für einen angegebenen Vertragstyp und optional einen angegebenen Schlüssel aufzulösen.Wenn der Konfliktlöser die Abhängigkeit nicht auflösen kann, muss er eine leere Enumeration und nicht throw zurückgeben.Diese Methode unterscheidet sich von <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> darin, dass alle registrierten Dienste für den angegebenen Typ und die angegebene Schlüsselkombination zurückgegeben werden.</summary>
      <returns>Alle Dienste, die die Abhängigkeit auflösen, die Instanzen des angegebenen Vertragstyps sein müssen (oder eine leere Enumeration, wenn die Abhängigkeit nicht aufgelöst werden konnte).</returns>
      <param name="type">Die Schnittstelle oder die abstrakte Basisklasse, die die aufzulösende Abhängigkeit definiert.Es wird vorausgesetzt, dass jedes zurückgegebene Objekt eine Instanz dieses Typs ist.</param>
      <param name="key">Optional: der Schlüssel der aufzulösenden Abhängigkeit.Dies kann für Abhängigkeiten, die nicht nach Schlüssel unterschieden werden, null sein.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>Implementiert <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, um eine Abhängigkeit aufzulösen, sodass immer dieselbe Instanz zurückgegeben wird.</summary>
      <typeparam name="T">Der Typ, der den Vertrag für die Abhängigkeit definiert, die aufgelöst wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Erstellt einen neuen Resolver, der die angegebene Instanz für den Vertragstyp zurückgibt, unabhängig vom Schlüssel, der der Get-Methode übergeben wurde.</summary>
      <param name="singletonInstance">Die zurückzugebende Instanz.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>Erstellt einen neuen Resolver, der die angegebene Instanz für den Vertragstyp zurückgibt, wenn der angegebene Schlüssel dem Schlüssel entspricht, der anhand des gegebenen Prädikats an die Get-Methode übergeben wurde.</summary>
      <param name="singletonInstance">Die zurückzugebende Instanz.</param>
      <param name="keyPredicate">Ein Prädikat, welches das Schlüsselobjekt annimmt und nur dann TRUE zurückgibt, wenn dieses übereinstimmt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>Erstellt einen neuen Resolver, der die angegebene Instanz für den Vertragstyp zurückgibt, wenn der angegebene Schlüssel genau dem Schlüssel entspricht, der der Get-Methode übergeben wurde.</summary>
      <param name="singletonInstance">Die zurückzugebende Instanz.</param>
      <param name="key">Optional: der Schlüssel der aufzulösenden Abhängigkeit.Dies kann für Abhängigkeiten, die nicht nach Schlüssel unterschieden werden, null sein.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>Versucht, eine Abhängigkeit für einen angegebenen Vertragstyp und optional einen angegebenen Schlüssel aufzulösen.Wenn der Konfliktlöser die Abhängigkeit nicht auflösen kann, muss er null und nicht throw zurückgeben.Dies ermöglicht die Verwendung von Resolvern in einem Verantwortungskettenmuster, sodass mehrere Resolver aufgefordert werden können, eine Abhängigkeit aufzulösen, bis dies schließlich von einem Resolver ausgeführt wird.</summary>
      <returns>Die aufgelöste Abhängigkeit, die eine Instanz des angegebenen Vertragstyps sein muss (oder null, wenn die Abhängigkeit nicht aufgelöst werden konnte).</returns>
      <param name="type">Die Schnittstelle oder die abstrakte Basisklasse, die die aufzulösende Abhängigkeit definiert.Vorm zurückgegebenen Objekt wird vorausgesetzt, dass es eine Instanz dieses Typs ist.</param>
      <param name="key">Optional: der Schlüssel der aufzulösenden Abhängigkeit.Dies kann für Abhängigkeiten, die nicht nach Schlüssel unterschieden werden, null sein.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Versucht, eine Abhängigkeit für einen angegebenen Vertragstyp und optional einen angegebenen Schlüssel aufzulösen.Wenn der Konfliktlöser die Abhängigkeit nicht auflösen kann, muss er eine leere Enumeration und nicht throw zurückgeben.</summary>
      <returns>Alle Dienste, die die Abhängigkeit auflösen, die Instanzen des angegebenen Vertragstyps sein müssen (oder eine leere Enumeration, wenn die Abhängigkeit nicht aufgelöst werden konnte).</returns>
      <param name="type">Die Schnittstelle oder die abstrakte Basisklasse, die die aufzulösende Abhängigkeit definiert.Es wird vorausgesetzt, dass jedes zurückgegebene Objekt eine Instanz dieses Typs ist.</param>
      <param name="key">Optional: der Schlüssel der aufzulösenden Abhängigkeit.Dies kann für Abhängigkeiten, die nicht nach Schlüssel unterschieden werden, null sein.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>Stellt eine <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />-Implementierung dar, die zum Auflösen von <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />-Factorys verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" />-Klasse.</summary>
      <param name="transactionHandlerFactory">Eine Funktion, die eine neue Instanz eines Transaktionshandlers zurückgibt.</param>
      <param name="providerInvariantName">Der invariante Name des ADO.NET-Anbieters, der den Typ der ADO.NET-Verbindung angibt, für die der Transaktionshandler verwendet wird.null passt zu allen Namen.</param>
      <param name="serverName">Eine Zeichenfolge, die mit dem Servernamen in der Verbindungszeichenfolge abgeglichen wird.null passt zu allen Namen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, mit dem verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>Ruft den Hashcode für die Objektinstanz ab.</summary>
      <returns>Der Hashcode für die Objektinstanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann versucht diese Methode, den Dienst zurückzugeben, der verwendet werden soll; andernfalls gibt sie null zurück.Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann wird als Schlüssel Folgendes erwartet: <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Ein <see cref="T:System.Func`1" /> oder null.</returns>
      <param name="type">Der aufzulösende Diensttyp.</param>
      <param name="key">Ein Schlüssel, der zur Identifizierung des zurückzugebenden Diensts verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann versucht dieser Konfliktlöser, den Dienst zurückzugeben, der verwendet werden soll; andernfalls gibt er eine leere Enumeration zurück.Wenn der angegebene Typ <see cref="T:System.Func`1" /> ist, dann wird als Schlüssel Folgendes erwartet: <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Eine <see cref="T:System.Func`1" />-Aufzählung oder eine leere Enumeration.</returns>
      <param name="type">Der aufzulösende Diensttyp.</param>
      <param name="key">Ein Schlüssel, der zur Identifizierung des zurückzugebenden Diensts verwendet wird.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>Bietet Hilfsprogrammmethoden für das Lesen einer App.config- oder Web.config-Datei.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" />.</summary>
      <param name="configuration">Die Konfiguration, aus der gelesen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>Ruft die angegebenen Anbieterdienste von der Konfiguration ab.</summary>
      <returns>Der Name des Anbieterdiensttyps oder NULL, falls nicht gefunden.</returns>
      <param name="invariantName">Der invariante Name des Anbieterdiensts.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>Stellt eine Zuordnungssicht dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>Erstellt eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />-Instanz mit dem angegebenen Entity SQL.</summary>
      <param name="entitySql">Eine Zeichenfolge, die das Entity SQL angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>Ruft das Entity SQL ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>Stellt die abstrakte Basisklasse zur Zuordnungssicht von Cacheimplementierungen dar.Abgeleitete Klassen müssen über einen Konstruktor ohne Parameter verfügen, wenn sie mit <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Ruft eine Sicht ab, die dem angegebenen Extent entspricht.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />, die die Zuordnungssicht angibt oder NULL, wenn das Extent keiner Zuordnungssicht zugeordnet ist.</returns>
      <param name="extent">Eine <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, die das Extent angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>Ruft einen Hashwert ab, der über den Zuordnungsschluss errechnet wurde.</summary>
      <returns>Ein Hashwert, der über den Zuordnungsschluss errechnet wurde.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>Gibt die Art der Erstellung konkreter <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />-Instanzen an.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>Erstellt eine Cacheinstanz einer generierten Sicht für die Containerzuordnung, die durch die Namen der zugeordneten Container angegeben wird.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />, das die erzeugte Cache-Ansicht angibt.</returns>
      <param name="conceptualModelContainerName">Der Name eines Containers im konzeptionellen Modell.</param>
      <param name="storeModelContainerName">Der Name eines Containers im Speichermodell.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>Definiert ein benutzerdefiniertes Attribut, das den Cachetyp der Zuordnungssicht angibt (Unterklasse von <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />), der einem Kontexttyp zugeordnet ist (Unterklasse von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder <see cref="T:System.Data.Entity.DbContext" />).Der Cachetyp wird während der Laufzeit instanziiert und verwendet, um vorab generierte Sichten im entsprechenden Kontext abzurufen.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>Erstellt eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />-Instanz, die einen Kontexttyp zu einem Cachetyp der Zuordnungssicht zuordnet.</summary>
      <param name="contextType">Eine Unterklasse von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheTypeName">Der durch die Assembly qualifizierte vollständige Name des Cachetyps.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />-Instanz, die einen Kontexttyp zu einem Cachetyp der Zuordnungssicht zuordnet.</summary>
      <param name="contextType">Eine Unterklasse von <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> oder <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheType">Eine Unterklasse von <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>Stellt einen benutzerdefinierten Pluralisierungsbegriff dar, der durch <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>Erstellen Sie eine neue Instanz.</summary>
      <param name="singular">Eine Zeichenfolge ungleich NULL oder eine leere Zeichenfolge, die die Singularform darstellt.</param>
      <param name="plural">Eine Zeichenfolge ungleich NULL oder eine leere Zeichenfolge, die die Pluralform darstellt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>Rufen Sie die Pluralform ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>Rufen Sie die Singularform ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Die durch Entity Framework. zu verwendende standardmäßige Pluralisierungsdienstimplementierung.Dieser Pluralisierungsdienst basiert auf dem Gebietsschema in englischer Sprache.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Erstellt eine neue Instanz des in Entity Framework verwendeten standardmäßigen Pluralisierungsdiensts.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Erstellt eine neue Instanz des in Entity Framework verwendeten standardmäßigen Pluralisierungsdiensts.</summary>
      <param name="userDictionaryEntries">Eine Auflistung der durch diesen Dienst verwendeten Benutzerwörterbucheinträge. Diese Eingaben können den Dienst gemäß den Benutzeranforderungen anpassen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>Gibt die Pluralform des angegebenen Worts zurück.</summary>
      <returns>Die Pluralform des Eingabeparameters.</returns>
      <param name="word">Das Wort, dessen Pluralform gebildet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>Gibt die Singularform des angegebenen Worts zurück.</summary>
      <returns>Die Singularform des Eingabeparameters.</returns>
      <param name="word">Das Wort, dessen Singularform gebildet werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>Pluralisierungsdienste, die von der EF-Laufzeit zum Implementieren dieser Schnittstelle verwendet werden.Standardmäßig wird <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> verwendet, aber der zu verwendende Pluralisierungsdienst kann in einer aus <see cref="T:System.Data.Entity.DbConfiguration" /> abgeleiteten Klasse festgelegt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>Verleihen Sie einem Wort mithilfe des Diensts die Pluralform.</summary>
      <returns>Das pluralisierte Wort.</returns>
      <param name="word">Das zu pluralisierende Wort.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>Verleihen Sie einem Wort mithilfe des Diensts die Singularform.</summary>
      <returns>Das singularisierte Wort.</returns>
      <param name="word">Das zu singularisierende Wort.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Stellt die Basisklasse für codebasierte Migrationen dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Fügt einen Vorgang hinzu, mit dem einer vorhandenen Tabelle eine Spalte hinzugefügt wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, der die Spalte hinzugefügt werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der hinzuzufügenden Spalte.</param>
      <param name="columnAction">Eine Aktion, die die hinzuzufügende Spalte angibt.Bestimmen Siec =&gt; c.Int(nullable: false, defaultValue: 3)</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen Fremdschlüsseleinschränkung hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="dependentColumn">Die Fremdschlüsselspalte.</param>
      <param name="principalTable">Die Tabelle mit der Spalte, auf die dieser Fremdschlüssel verweist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="principalColumn">Die Spalte, auf die dieser Fremdschlüssel verweist.Falls kein Wert angegeben wird, wird auf den Primärschlüssel der Prinzipaltabelle verwiesen.</param>
      <param name="cascadeDelete">Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsselbeziehung konfiguriert werden soll.Wenn kein Wert angegeben wird, wird die Löschweitergabe deaktiviert.</param>
      <param name="name">Der Name der Fremdschlüsseleinschränkung in der Datenbank.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen Fremdschlüsseleinschränkung hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalten enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="dependentColumns">Die Fremdschlüsselspalten.</param>
      <param name="principalTable">Die Tabelle mit den Spalten, auf die dieser Fremdschlüssel verweist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="principalColumns">Die Spalten, auf die dieser Fremdschlüssel verweist.Falls kein Wert angegeben wird, wird auf den Primärschlüssel der Prinzipaltabelle verwiesen.</param>
      <param name="cascadeDelete">Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsselbeziehung konfiguriert werden soll.Wenn kein Wert angegeben wird, wird die Löschweitergabe deaktiviert.</param>
      <param name="name">Der Name der Fremdschlüsseleinschränkung in der Datenbank.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen eines neuen Primärschlüssels hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Die Tabelle, die die Primärschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="column">Die Primärschlüsselspalte.</param>
      <param name="name">Der Name des Primärschlüssels in der Datenbank.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Primärschlüssel handelt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen eines neuen Primärschlüssels auf Grundlage mehrerer Spalten hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Die Tabelle, die die Primärschlüsselspalten enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columns">Die Primärschlüsselspalten.</param>
      <param name="name">Der Name des Primärschlüssels in der Datenbank.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Primärschlüssel handelt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Fügt einen Vorgang hinzu, mit dem die Definition einer vorhandenen Spalte geändert wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, in der die Spalte vorhanden ist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der zu ändernden Spalte.</param>
      <param name="columnAction">Eine Aktion, die die neue Definition für die Spalte angibt.Bestimmen Siec =&gt; c.String(nullable: false, defaultValue: "none")</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Ändern einer gespeicherten Prozedur hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="parametersAction">Die Aktion, die die Parameter der gespeicherten Prozedur angibt.</param>
      <param name="body">Der Text der gespeicherten Prozedur.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten.Beispiel: 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Die Parameter in diesem Vorgang zum Ändern der gespeicherten Prozedur.Dieser Typ muss nicht angegeben werden, weil er vom angegebenen <paramref name="parametersAction" />-Parameter abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Ändern einer gespeicherten Prozedur hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="body">Der Text der gespeicherten Prozedur.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten.Beispiel: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Fügt einen Vorgang hinzu, der Änderungen an den für Tabellen definierten Anmerkungen verarbeitet.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columnsAction">Eine Aktion die die Spalten angibt, die in der Tabelle enthalten sein sollen.Bestimmen Siet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Die benutzerdefinierten Anmerkungen der Tabelle, die geändert wurden.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Die Spalten in diesem Vorgang.Dieser Typ muss nicht angegeben werden, weil er vom angegebenen columnsAction-Parameter abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen eines Indexes für eine einzelne Spalte hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, für die der Index erstellt werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="column">Der Name der Spalte, für die der Index erstellt werden soll.</param>
      <param name="unique">Ein Wert, der angibt, ob dieser Index eindeutig ist.Wenn kein Wert angegeben wird, wird ein nicht eindeutiger Index erstellt.</param>
      <param name="name">Der Name, der für den Index in der Datenbank verwendet werden soll.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Index handelt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen eines Indexes für mehrere Spalten hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, für die der Index erstellt werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columns">Der Name der Spalten, für die der Index erstellt werden soll.</param>
      <param name="unique">Ein Wert, der angibt, ob dieser Index eindeutig ist.Wenn kein Wert angegeben wird, wird ein nicht eindeutiger Index erstellt.</param>
      <param name="name">Der Name, der für den Index in der Datenbank verwendet werden soll.Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Index handelt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen gespeicherten Prozedur hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="parametersAction">Die Aktion, die die Parameter der gespeicherten Prozedur angibt.</param>
      <param name="body">Der Text der gespeicherten Prozedur.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten.Beispiel: 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Die Parameter in diesem Vorgang zum Erstellen der gespeicherten Prozedur.Dieser Typ muss nicht angegeben werden, weil er vom angegebenen <paramref name="parametersAction" />-Parameter abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen gespeicherten Prozedur hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="body">Der Text der gespeicherten Prozedur.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten.Beispiel: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Ein Objekt, das die weitere Konfiguration des Tabellenerstellungsvorgangs ermöglicht.</returns>
      <param name="name">Der Name der Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columnsAction">Eine Aktion die die Spalten angibt, die in der Tabelle enthalten sein sollen.Bestimmen Siet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Die benutzerdefinierten Anmerkungen der zu erstellenden Tabelle.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Die Spalten in diesem Tabellenerstellungsvorgang.Dieser Typ muss nicht angegeben werden, weil er vom angegebenen columnsAction-Parameter abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>Fügt einen Vorgang zum Erstellen einer neuen Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Ein Objekt, das die weitere Konfiguration des Tabellenerstellungsvorgangs ermöglicht.</returns>
      <param name="name">Der Name der Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columnsAction">Eine Aktion die die Spalten angibt, die in der Tabelle enthalten sein sollen.Bestimmen Siet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Die Spalten in diesem Tabellenerstellungsvorgang.Dieser Typ muss nicht angegeben werden, weil er vom angegebenen columnsAction-Parameter abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>Vorgänge, die während des Downgradeprozesses ausgeführt werden sollen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer vorhandenen Spalte hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="removedAnnotations">Die benutzerdefinierten Anmerkungen der zu löschenden Spalte.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer vorhandenen Spalte hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage des Namens hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der Fremdschlüsseleinschränkung in der Datenbank.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage der Spalte hinzu, die das Ziel der Einschränkung darstellt.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="dependentColumn">Die Fremdschlüsselspalte.</param>
      <param name="principalTable">Die Tabelle mit der Spalte, auf die dieser Fremdschlüssel verweist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage der Spalte hinzu, die das Ziel der Einschränkung darstellt.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="dependentColumn">Die Fremdschlüsselspalte.</param>
      <param name="principalTable">Die Tabelle mit der Spalte, auf die dieser Fremdschlüssel verweist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="principalColumn">Die Spalten, auf die dieser Fremdschlüssel verweist.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage der Spalten hinzu, die das Ziel der Einschränkung darstellen.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="dependentTable">Die Tabelle, die die Fremdschlüsselspalten enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="dependentColumns">Die Fremdschlüsselspalten.</param>
      <param name="principalTable">Die Tabelle mit den Spalten, auf die dieser Fremdschlüssel verweist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen eines Indexes auf Grundlage des Namens hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der der Index gelöscht werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name des zu löschenden Indexes.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>Fügt einen Vorgang zum Löschen eines Indexes auf Grundlage der Spalten hinzu, die das Ziel des Indexes darstellen.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der der Index gelöscht werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columns">Der Name mindestens einer Spalte, die das Ziel des Indexes darstellt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen eines vorhandenen Primärschlüssels hinzu, der mit dem Standardnamen erstellt wurde.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Die Tabelle, die die Primärschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen eines vorhandenen Primärschlüssels hinzu, der nicht den Standardnamen aufweist.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Die Tabelle, die die Primärschlüsselspalte enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name des zu löschenden Primärschlüssels.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>Fügt einen Vorgang hinzu, um eine vorhandene gespeicherte Prozedur mit dem angegebenen Namen zu löschen.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten.Beispiel: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="removedColumnAnnotations">Die benutzerdefinierten Anmerkungen der Spalten der zu löschenden Tabelle.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="removedAnnotations">Die benutzerdefinierten Anmerkungen der zu löschenden Tabelle.Darf NULL oder leer sein.</param>
      <param name="removedColumnAnnotations">Die benutzerdefinierten Anmerkungen der Spalten der zu löschenden Tabelle.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="removedAnnotations">Die benutzerdefinierten Anmerkungen der zu löschenden Tabelle.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Löschen einer Tabelle hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der angegebenen Instanz ist; andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Gibt die Hashfunktion für das aktuelle Objekt zurück.</summary>
      <returns>Eine Hashfunktion für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Gibt den Laufzeittyp der aktuellen Instanz zurück.</summary>
      <returns>Der Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Verschieben einer gespeicherten Prozedur in ein neues Schema hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu verschiebenden gespeicherten Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="newSchema">Das Schema, in das die gespeicherte Prozedur verschoben werden soll.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Verschieben einer Tabelle in ein neues Schema hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu verschiebenden Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="newSchema">Das Schema, in das die Tabelle verschoben werden soll.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Umbenennen einer Spalte hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, in der die umzubenennende Spalte enthalten ist.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name der Spalte, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Spalte.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Umbenennen eines Index hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, die den umzubenennenden Index enthält.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="name">Der Name des umzubenennenden Indexes.</param>
      <param name="newName">Der neue Name für den Index.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Umbenennen einer gespeicherten Prozedur hinzu.Um das Schema einer gespeicherten Prozedur zu ändern, verwenden Sie MoveStoredProcedure. Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur, die umbenannt werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="newName">Der neue Name für die gespeicherte Prozedur.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>Fügt einen Vorgang zum Umbenennen einer Tabelle hinzu.Um das Schema einer Tabelle zu ändern, verwenden Sie MoveTable.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der Tabelle, die umbenannt werden soll.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="newName">Der neue Name der Tabelle.Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Ausführen eines SQL-Befehls hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="sql">Der auszuführende SQL-Befehl.</param>
      <param name="suppressTransaction">Ein Wert, der angibt, ob der SQL-Befehl außerhalb der Transaktion ausgeführt werden soll, die für den Migrationsprozess verwendet wird.Wenn kein Wert angegeben wird, wird der SQL-Befehl innerhalb der Transaktion ausgeführt.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Ausführen einer SQL-Datei hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="sqlFile">Die auszuführende SQL-Datei.Es wird angenommen, dass relative Pfade relativ zum aktuellen BaseDirectory der AppDomain sind.</param>
      <param name="suppressTransaction">Ein Wert, der angibt, ob der SQL-Befehl außerhalb der Transaktion ausgeführt werden soll, die für den Migrationsprozess verwendet wird.Wenn kein Wert angegeben wird, wird der SQL-Befehl innerhalb der Transaktion ausgeführt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>Fügt einen Vorgang zum Ausführen einer SQL-Ressourcendatei hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="sqlResource">Der Manifestressourcenname der auszuführenden SQL-Ressourcendatei.</param>
      <param name="resourceAssembly">Die Assembly mit der Ressourcendatei.Die aufrufende Assembly wird angenommen, wenn sie nicht angegeben wird.</param>
      <param name="suppressTransaction">Ein Wert, der angibt, ob der SQL-Befehl außerhalb der Transaktion ausgeführt werden soll, die für den Migrationsprozess verwendet wird.Wenn kein Wert angegeben wird, wird der SQL-Befehl innerhalb der Transaktion ausgeführt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Fügt einen Migrationsvorgang hinzu.</summary>
      <param name="migrationOperation">Der hinzuzufügende Migrationsvorgang.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>Vorgänge, die während des Upgradeprozesses ausgeführt werden sollen.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Eine Konfiguration für die Verwendung von Migrationen für ein angegebenes Modell.Normalerweise erstellen Sie eine Konfigurationsklasse, die von <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> abgeleitet wird, anstatt diese Klasse zu verwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>Initialisiert eine neue Instanz der DbMigrationsConfiguration-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>Ruft einen Wert ab, der angibt, ob während der automatischen Migration Datenverluste zulässig sind, oder legt ihn fest.Wenn der Wert auf "false" festgelegt ist, wird eine Ausnahme ausgelöst, wenn während einer automatischen Migration Datenverluste auftreten dürfen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob während der Datenbankmigration automatische Migrationen verwendet werden können, oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>Ruft den Code-Generator ab, der beim Gerüstbau für Migrationen verwendet werden soll, oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>Ruft den Timeoutwert ab, der für die einzelnen Befehle innerhalb einer Migration verwendet werden soll, oder legt ihn fest.Ein NULL-Wert gibt an, dass der Standardwert des zugrunde liegenden Anbieters verwendet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>Ruft die Zeichenfolge ab (bzw. legt diese fest), die verwendet wird, um Migrationen, die zu dieser Konfiguration gehören, von Migrationen zu unterscheiden, die zu anderen Konfigurationen gehören, aber dieselbe Datenbank verwenden.Diese Eigenschaft ermöglicht das Anwenden von Migrationen aus mehreren verschiedenen Modellen auf eine einzige Datenbank.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>Ruft den abgeleiteten DbContext ab, der das zu migrierende Modell darstellt, oder legt ihn fest.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>Das Standardverzeichnis, in dem Migrationen gespeichert sind.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>Ruft die Verlaufskontextfactory ab, die für einen angegebenen Datenbankanbieter verwendet werden soll.</summary>
      <returns>Der für den Datenbankanbieter festgelegte Verlaufskontextanbieter.</returns>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den die Factory abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>Ruft den SQL-Generator ab, der für einen angegebenen Datenbankanbieter verwendet werden soll.</summary>
      <returns>Der für den Datenbankanbieter festgelegte SQL-Generator.</returns>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den der SQL-Generator abgerufen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>Ruft die Assembly mit codebasierten Migrationen ab oder legt sie fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>Ruft das Unterverzeichnis ab, in dem codebasierte Migrationen gespeichert sind, oder legt es fest.Beachten Sie, dass diese Eigenschaft auf einen relativen Pfad für ein Unterverzeichnis unter dem Visual Studio-Projektstamm festgelegt werden muss; sie kann nicht auf einen absoluten Pfad festgelegt werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>Ruft den für codebasierte Migrationen verwendeten Namespace ab oder legt ihn fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Fügt eine neue Factory zum Erstellen von <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />-Instanzen hinzu, die für einen angegebenen Datenbankanbieter verwendet werden soll.</summary>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den der SQL-Generator festgelegt werden soll.</param>
      <param name="factory">Eine Factory zum Erstellen von <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />-Instanzen für eine angegebene <see cref="T:System.Data.Common.DbConnection" /> und einen <see cref="T:System.String" />, der das Standardschema darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>Fügt einen neuen SQL-Generator hinzu, der für einen angegebenen Datenbankanbieter verwendet werden soll.</summary>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den der SQL-Generator festgelegt werden soll.</param>
      <param name="migrationSqlGenerator">Der zu verwendende SQL-Generator.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>Ruft einen Wert ab, um die Verbindung der zu migrierenden Datenbank zu überschreiben, oder legt ihn fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Eine Konfiguration für die Verwendung von Migrationen für ein angegebenes Modell.</summary>
      <typeparam name="TContext">Der Kontext, der das Modell darstellt, für das diese Konfiguration gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz der DbMigrationsConfiguration-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob die aktuelle Konfiguration gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn die aktuelle Konfiguration gleich dem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit der aktuellen Konfiguration verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Ruft die Hashfunktion für diese Instanz ab.</summary>
      <returns>Die Hashfunktion für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Gibt den Laufzeittyp der aktuellen Instanz zurück.</summary>
      <returns>Der Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>Wird nach dem Upgrade auf die neueste Migration ausgeführt, um das Aktualisieren von Seedingdaten zu ermöglichen.</summary>
      <param name="context">Der zum Aktualisieren der Seedingdaten zu verwendende Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieser Konfiguration zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Konfiguration.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator wird zum Anwenden vorhandener Migrationen auf eine Datenbank verwendet.DbMigrator kann verwendet werden, um ein Upgrade und Downgrade auf eine beliebige angegebene Migration auszuführen.Verwenden Sie <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />, um ein Migrationsgerüst basierend auf Änderungen am Modell zu erstellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialisiert eine neue Instanz der DbMigrator-Klasse.</summary>
      <param name="configuration">Die Konfiguration, die für den Migrationsprozess verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>Ruft die Konfiguration ab, die für den Migrationsprozess verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>Ruft alle Migrationen ab, die auf die Zieldatenbank angewendet wurden.</summary>
      <returns>Die Liste der Migrationen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>Ruft alle Migrationen ab, die in der konfigurierten Migrationsassembly definiert sind.</summary>
      <returns>Die Liste der Migrationen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>Ruft alle Migrationen ab, die in der Assembly definiert sind, aber nicht auf die Zieldatenbank angewendet wurden.</summary>
      <returns>Die Liste der Migrationen.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>Die Migrations-ID, die den Status der Datenbank darstellt, bevor Migrationen angewendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>Aktualisiert die Zieldatenbank auf eine angegebene Migration.</summary>
      <param name="targetMigration">Die Migration, auf die ein Upgrade oder Downgrade ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>Ein Satz von Erweiterungsmethoden für <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Fügt Entitäten beim Aufruf von SaveChanges nach einem benutzerdefinierten Identifikationsausdruck hinzu bzw. aktualisiert diese.Entspricht einem Upsert-Vorgang aus der Datenbankterminologie.Diese Methode kann beim Datenseeding unter Verwendung von Migrationen hilfreich sein.</summary>
      <param name="set">Die Entitätenmenge, zu der die Entitäten gehören.</param>
      <param name="identifierExpression">Ein Ausdruck, der die Eigenschaften angibt, mit deren Hilfe bestimmt wird, ob ein Hinzufüge- oder Updatevorgang ausgeführt werden soll.</param>
      <param name="entities">Die Entitäten, die hinzugefügt oder aktualisiert werden sollen.</param>
      <typeparam name="TEntity">Der Typ der Entitäten, die hinzugefügt oder aktualisiert werden sollen.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Fügt Entitäten beim Aufruf von SaveChanges nach dem Schlüssel hinzu bzw. aktualisiert diese.Entspricht einem Upsert-Vorgang aus der Datenbankterminologie.Diese Methode kann beim Datenseeding unter Verwendung von Migrationen hilfreich sein.</summary>
      <param name="set">Die Entitätenmenge, zu der die Entitäten gehören.</param>
      <param name="entities">Die Entitäten, die hinzugefügt oder aktualisiert werden sollen.</param>
      <typeparam name="TEntity">Der Typ der Entitäten, die hinzugefügt oder aktualisiert werden sollen.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Hilfsklasse, die zum Konfigurieren einer Spalte verwendet wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Binary-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="maxLength">Die maximal zulässige Länge von Arraydaten.</param>
      <param name="fixedLength">Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="timestamp">Wert, der angibt, ob diese Spalte als Zeitstempel konfiguriert werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Boolean-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Byte-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von DateTime-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von DateTimeOffset-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Decimal-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die numerische Genauigkeit der Spalte.</param>
      <param name="scale">Die numerischen Dezimalstellen der Spalte.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Double-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Gibt an, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Geography-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Geometry-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von GUID-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Integer-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Long-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen <see cref="T:System.Object" />.</summary>
      <returns>Eine flache Kopie des aktuellen <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Short-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Single-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von String-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="maxLength">Die maximale zulässige Länge von Zeichenfolgendaten.</param>
      <param name="fixedLength">Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="unicode">Wert, der angibt, ob die Spalte Unicode-Inhalt unterstützt.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Time-Daten.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, normalerweise aus dem Code First-Modell.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>Stellt eine Klasse dar, die zum Konfigurieren eines Parameters verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Binärdaten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="maxLength">Die maximal zulässige Länge von Arraydaten.</param>
      <param name="fixedLength">Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Boolean-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Byte-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von DateTime-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="precision">Die Genauigkeit des Parameters.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von DateTimeOffset-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="precision">Die Genauigkeit des Parameters.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Dezimaldaten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="precision">Die numerische Genauigkeit des Parameters.</param>
      <param name="scale">Die numerische Skala des Parameters.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Double-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Geografiedaten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Geometriedaten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von GUID-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Integer-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Long-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen <see cref="T:System.Object" />.</summary>
      <returns>Eine flache Kopie des aktuellen <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Short-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Single-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von String-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="maxLength">Die maximale zulässige Länge von Zeichenfolgendaten.</param>
      <param name="fixedLength">Ein Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="unicode">Ein Wert, der angibt, ob der Parameter Unicode-Inhalt unterstützt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Parameterdefinition zum Übergeben von Time-Daten.</summary>
      <returns>Die neu erstellte Parameterdefinition.</returns>
      <param name="precision">Die Genauigkeit des Parameters.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diesen Parameter verwendet werden soll.</param>
      <param name="name">Der Name des Parameters.</param>
      <param name="storeType">Ein für den Anbieter spezifischer Datentyp, der für diesen Parameter verwendet werden soll.</param>
      <param name="outParameter">Ein Wert, der angibt, ob der Parameter ein Ausgabeparameter ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Hilfsklasse, die zur weiteren Konfiguration einer Tabelle verwendet wird, die auf der Basis eines CreateTable-Aufrufs von <see cref="T:System.Data.Entity.Migrations.DbMigration" /> erstellt wurde.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <typeparam name="TColumns">Der Typ, der die Spalten der Tabelle darstellt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Initialisiert eine neue Instanz der TableBuilder-Klasse.</summary>
      <param name="createTableOperation">Der Tabellenerstellungsvorgang, der weiter konfiguriert werden soll.</param>
      <param name="migration">Die Migration, in der die Tabelle erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Gibt eine Fremdschlüsseleinschränkung an, die für die Tabelle erstellt werden soll.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="principalTable">Name der Tabelle, auf die sich die Fremdschlüsseleinschränkung bezieht.</param>
      <param name="dependentKeyExpression">Ein Lambdaausdruck, der die Eigenschaften des Fremdschlüssels darstellt.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Wenn der Fremdschlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) Neu mit { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsseleinschränkung konfiguriert werden soll.</param>
      <param name="name">Der Name dieser Fremdschlüsseleinschränkung.Wenn kein Name angegeben wird, wird ein Standardname berechnet.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Ruft den Hashcode für das aktuelle Objekt ab.</summary>
      <returns>Der Hashcode für die aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Gibt einen Index an, der für die Tabelle erstellt werden soll.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="indexExpression">Ein Lambdaausdruck, der die zu indizierende Eigenschaft darstellt.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Wenn mehrere Eigenschaften indiziert werden sollen, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) Neu mit { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">Der Name des Index.</param>
      <param name="unique">Ein Wert, der angibt, ob es sich um einen eindeutigen Index handelt.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Index handelt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen <see cref="T:System.Object" />.</summary>
      <returns>Eine flache Kopie des aktuellen <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>Gibt einen Primärschlüssel für die Tabelle an.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als primärer Schlüssel verwendet werden soll.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Wenn der primäre Schlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) Neu mit { t.Id1, t.Id2 }</param>
      <param name="name">Der Name des Primärschlüssels.Wenn NULL angegeben wird, wird ein Standardname generiert.</param>
      <param name="clustered">Ein Wert, der angibt, ob es sich um einen gruppierten Primärschlüssel handelt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des aktuellen Objekts zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des aktuellen Objekts.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Generiert C#-Code für eine codebasierte Migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:byte[]" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Generiert die Primärcodedatei, die vom Benutzer angezeigt und bearbeitet werden kann.</summary>
      <returns>Der generierte Code.</returns>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um mithilfe eines Lambdaausdrucks eine Gruppe von Spaltennamen anzugeben.</summary>
      <param name="columns">Die Spalten, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für einen <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Der Vorgang, für den Code generiert werden soll.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code, um die Definition für <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> anzugeben.</summary>
      <param name="column">Die Spaltendefinition, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">Ein Wert, der angibt, ob der Spaltenname in die Definition eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code, um die Definition für <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" /> anzugeben.</summary>
      <param name="parameterModel">Die Parameterdefinition, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">Ein Wert, der angibt, ob der Spaltenname in die Definition eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTime" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTimeOffset" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Decimal" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Guid" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Int64" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Generiert Code, um den Standardwert für eine Spalte eines unbekannten Datentyps anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Single" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.String" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="operations">Der Vorgang, für den Code generiert wird.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.TimeSpan" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für den angegebenen Anmerkungswert. Dieser kann NULL sein.Standardmäßig wird ein <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> verwendet, falls ein solcher registriert wurde. Andernfalls wird ToString für den Anmerkungswert aufgerufen.</summary>
      <param name="name">Der Name der Anmerkung, für die Code benötigt wird.</param>
      <param name="annotation">Der zu generierende Anmerkungswert.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für die erneute Erstellung des angegebenen Anmerkungswörterbuchs. Dieser wird verwendet, wenn diese Anmerkungen als Parameter in einem <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Aufruf übergeben werden.</summary>
      <param name="annotations">Die zu generierenden Anmerkungen.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für die erneute Erstellung des angegebenen Anmerkungswörterbuchs. Dieser wird verwendet, wenn diese Anmerkungen als Parameter in einem <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Aufruf übergeben werden.</summary>
      <param name="annotations">Die zu generierenden Anmerkungen.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Versieht einen Bezeichner mit geeigneten Escapezeichen, damit er in einer Zeichenfolge gespeichert werden kann.</summary>
      <returns>Der in Anführungszeichen gesetzte Bezeichner.</returns>
      <param name="identifier">Der Bezeichner, der in Anführungszeichen gesetzt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Entfernt ungültige Zeichen aus dem Namen eines Datenbankartefakts.</summary>
      <returns>Der bereinigte Name.</returns>
      <param name="name">Der zu bereinigende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Ruft den Typnamen ab, der für eine Spalte des angegebenen Datentyps verwendet werden soll.</summary>
      <returns>Der in der generierten Migration zu verwendende Typname.</returns>
      <param name="primitiveTypeKind">Der zu übersetzende Datentyp.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Klassenattribute.</summary>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert den abschließenden Code für eine Klasse, die mit "WriteClassStart" gestartet wurde.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Generiert einen Namespace unter Verwendung von Anweisungen und einer Klassendefinition.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="base">Die Basisklasse der generierten Klasse.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
      <param name="namespaces">Die Namespaces, für die "Using"-Direktiven hinzugefügt werden.Bei NULL werden die aus "GetDefaultNamespaces" zurückgegebenen Namespaces verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert eine Eigenschaft, um das Quell- oder Zielmodell in der CodeBehind-Datei zurückzugeben.</summary>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="value">Zurückzugebender Wert.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Die Basisklasse für Anbieter, von denen Code für codebasierte Migrationen generiert wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>Ruft die <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />-Instanzen ab, die verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Generiert den Code, der dem Benutzerprojekt hinzugefügt werden soll.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>Ruft die Standardnamespaces ab, die als "using"-Direktive oder "Imports"-Direktive für generierten Code ausgegeben werden müssen.</summary>
      <returns>Eine sortierte Liste von Namespacenamen.</returns>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Ruft die Namespaces ab, die als "using"-Direktive oder "Imports"-Direktive ausgegeben werden müssen, um den durch die angegebenen Vorgänge generierten Code zu behandeln.</summary>
      <returns>Eine sortierte Liste von Namespacenamen.</returns>
      <param name="operations">Die Vorgänge, für die Code generiert wird.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Erstellt ein Gerüst codebasierter Migrationen, um ausstehende Modelländerungen auf die Datenbank anzuwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialisiert eine neue Instanz der MigrationScaffolder-Klasse.</summary>
      <param name="migrationsConfiguration">Konfiguration, die für die Erstellung des Gerüsts verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>Ruft den Namespace ab, der im generierten Code der Migration verwendet werden soll, oder legt ihn fest.Standardmäßig entspricht dieser dem "MigrationsNamespace" des an den Konstruktor übergebenen Migrationskonfigurationsobjekts.Bei VB.NET-Projekten wird dieser Namespace aktualisiert, um den Stammnamespace des Projekts zu berücksichtigen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen auf die Datenbank anzuwenden.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der für das Migrationsgerüst zu verwendende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen auf die Datenbank anzuwenden.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der für das Migrationsgerüst zu verwendende Name.</param>
      <param name="ignoreChanges">Ob Modelländerungen einbezogen werden oder nicht.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>Erstellt das Gerüst der anfänglichen codebasierten Migration nach einem zuvor ausgeführten Datenbankinitialisierer.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>Stellt eine codebasierte Migration dar, für die ein Gerüst erstellt wurde und die in eine Datei geschrieben werden kann.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>Ruft das Migrationscodegerüst ab, das in einer CodeBehind-Datei gespeichert werden soll, oder legt es fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>Ruft das Unterverzeichnis im Benutzerprojekt ab, in dem diese Migration gespeichert werden soll, oder legt es fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>Ruft ab oder legt fest, ob für die Migration ein erneutes Gerüst erstellt wurde.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>Ruft die für diese Migration zu verwendende Programmiersprache ab oder legt sie fest.Wird normalerweise für die Dateierweiterung des generierten Codes verwendet.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>Ruft den eindeutigen Bezeichner für diese Migration ab oder legt ihn fest.Wird normalerweise für den Dateinamen des generierten Codes verwendet.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>Ruft ein Wörterbuch mit Zeichenfolgenressourcen ab, das der Migrationsressourcendatei hinzugefügt werden kann.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>Ruft das Migrationscodegerüst ab, das vom Benutzer bearbeitet werden kann, oder legt es fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Hilfsklasse, die von Entwurfszeittools zum Ausführen migrationsbezogener Befehle verwendet wird, die mit einer in Visual Studio bearbeiteten Anwendung interagieren müssen.Da die Anwendung bearbeitet wird, müssen die Assemblys in eine separate "AppDomain" geladen werden, um sicherzustellen, dass immer die neueste Version geladen ist.Die Datei App.config oder Web.config aus dem Startprojekt wird ebenfalls kopiert, um sicherzustellen, dass jede Konfiguration angewendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz der ToolingFacade-Klasse.</summary>
      <param name="migrationsAssemblyName">Der Name der Assembly, in der die zu verwendende Migrationskonfiguration enthalten ist.</param>
      <param name="contextAssemblyName">Der Name der Assembly, in der der zu verwendende DbContext enthalten ist.</param>
      <param name="configurationTypeName">Der durch den Namespace angegebene Name der Migrationskonfiguration, der verwendet werden soll.</param>
      <param name="workingDirectory">Das Arbeitsverzeichnis, in dem die kompilierten Assemblys enthalten sind.</param>
      <param name="configurationFilePath">Der Pfad der CONFIG-Datei aus dem Startprojekt.</param>
      <param name="dataDirectory">Der Pfad des Anwendungsdatenverzeichnisses aus dem Startprojekt.Normalerweise das Verzeichnis App_Data für Webanwendungen oder das Arbeitsverzeichnis für ausführbare Dateien.</param>
      <param name="connectionStringInfo">Die Verbindung mit der zu migrierenden Datenbank.Wenn NULL angegeben wird, wird die Standardverbindung für den Kontext verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Gibt die von der aktuellen Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Gibt sämtliche von der Fassade verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben; false, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Gibt alle von der Fassade verwendeten, nicht verwalteten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>Ruft den vollqualifizierten Namen eines von <see cref="T:System.Data.Entity.DbContext" /> abgeleiteten Typs ab.</summary>
      <returns>Der gefundene Kontexttyp.</returns>
      <param name="contextTypeName">Der Name des Kontexttyps.Wenn NULL, wird der einzelne Kontexttyp, der in der Assembly gefunden wird, zurückgegeben.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Ruft den vollqualifizierten Namen aller von <see cref="T:System.Data.Entity.DbContext" /> abgeleiteten Typen ab.</summary>
      <returns>Alle gefundenen Kontexttypen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Ruft eine Liste aller Migrationen ab, die auf die Datenbank angewendet wurden.</summary>
      <returns>IDs angewendeter Migrationen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Ruft eine Liste aller Migrationen ab, die nicht auf die Datenbank angewendet wurden.</summary>
      <returns>IDs ausstehender Migrationen.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren von Informationen ausgeführt wird, oder legt sie fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren ausführlicher Informationen ausgeführt wird, oder legt sie fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren von Warnungen ausgeführt wird, oder legt sie fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen anzuwenden.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der Name der generierten Migration.</param>
      <param name="language">Die Programmiersprache der generierten Migration.</param>
      <param name="rootNamespace">Der Stammnamespace des Projekts, dem die Migration hinzugefügt wird.</param>
      <param name="ignoreChanges">Ob Modelländerungen einbezogen werden oder nicht.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Erstellt das Gerüst der anfänglichen codebasierten Migration nach einem zuvor ausgeführten Datenbankinitialisierer.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="language">Die Programmiersprache der generierten Migration.</param>
      <param name="rootNamespace">Der Stammnamespace des Projekts, dem die Migration hinzugefügt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Generiert ein SQL-Skript, das zwischen zwei Migrationen generiert werden soll.</summary>
      <returns>Das generierte SQL-Skript.</returns>
      <param name="sourceMigration">Die Migration, von der aktualisiert werden soll.Wenn NULL angegeben wird, wird ein Updateskript für die aktuelle Datenbank erstellt.</param>
      <param name="targetMigration">Die Migration, auf die aktualisiert werden soll.Wenn NULL angegeben wird, wird ein Skript für ein Update auf die neueste Migration erstellt.</param>
      <param name="force">Wert, der angibt, ob während der automatischen Migration Datenverluste zulässig sind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Aktualisiert die Datenbank auf die angegebene Migration.</summary>
      <param name="targetMigration">Die ID der Migration, die migriert werden soll.Wenn NULL angegeben wird, wird die Datenbank auf die neueste Migration aktualisiert.</param>
      <param name="force">Wert, der angibt, ob während der automatischen Migration Datenverluste zulässig sind.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Generiert VB.Net-Code für eine codebasierte Migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:byte[]" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Generiert die Primärcodedatei, die vom Benutzer angezeigt und bearbeitet werden kann.</summary>
      <returns>Der generierte Code.</returns>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um mithilfe eines Lambdaausdrucks eine Gruppe von Spaltennamen anzugeben.</summary>
      <param name="columns">Die Spalten, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für einen <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Der Vorgang, für den Code generiert werden soll.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code, um die Definition für <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> anzugeben.</summary>
      <param name="column">Die Spaltendefinition, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">Ein Wert, der angibt, ob der Spaltenname in die Definition eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">Die Parametermodelldefinition, für die Code generiert werden soll.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">true, um den Spaltennamen in die Definition einzuschließen; andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTime" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTimeOffset" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Decimal" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Guid" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Int64" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>Generiert Code, um den Standardwert für eine Spalte eines unbekannten Datentyps anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Single" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.String" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.TimeSpan" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für den angegebenen Anmerkungswert. Dieser kann NULL sein.Standardmäßig wird ein <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> verwendet, falls ein solcher registriert wurde. Andernfalls wird ToString für den Anmerkungswert aufgerufen.</summary>
      <param name="name">Der Name der Anmerkung, für die Code benötigt wird.</param>
      <param name="annotation">Der zu generierende Anmerkungswert.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für die erneute Erstellung des angegebenen Anmerkungswörterbuchs. Dieser wird verwendet, wenn diese Anmerkungen als Parameter in einem <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Aufruf übergeben werden.</summary>
      <param name="annotations">Die zu generierenden Anmerkungen.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code für die erneute Erstellung des angegebenen Anmerkungswörterbuchs. Dieser wird verwendet, wenn diese Anmerkungen als Parameter in einem <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Aufruf übergeben werden.</summary>
      <param name="annotations">Die zu generierenden Anmerkungen.</param>
      <param name="writer">Der Writer, in den der generierte Code geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>Versieht einen Bezeichner mit geeigneten Escapezeichen, damit er in einer Zeichenfolge gespeichert werden kann.</summary>
      <returns>Der in Anführungszeichen gesetzte Bezeichner.</returns>
      <param name="identifier">Der Bezeichner, der in Anführungszeichen gesetzt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Entfernt ungültige Zeichen aus dem Namen eines Datenbankartefakts.</summary>
      <returns>Der bereinigte Name.</returns>
      <param name="name">Der zu bereinigende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Ruft den Typnamen ab, der für eine Spalte des angegebenen Datentyps verwendet werden soll.</summary>
      <returns>Der in der generierten Migration zu verwendende Typname.</returns>
      <param name="primitiveTypeKind">Der zu übersetzende Datentyp.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Klassenattribute.</summary>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert den abschließenden Code für eine Klasse, die mit "WriteClassStart" gestartet wurde.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Generiert einen Namespace unter Verwendung von Anweisungen und einer Klassendefinition.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="base">Die Basisklasse der generierten Klasse.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
      <param name="namespaces">Namespaces, für die "Imports"-Direktiven hinzugefügt werden.Bei NULL werden die aus "GetDefaultNamespaces" zurückgegebenen Namespaces verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert eine Eigenschaft, um das Quell- oder Zielmodell in der CodeBehind-Datei zurückzugeben.</summary>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="value">Zurückzugebender Wert.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>Diese Klasse wird von Code First-Migrationen verwendet, um den Migrationsverlauf aus der Datenbank zu lesen bzw. in die Datenbank zu schreiben.Zum Anpassen der Definition der Migrationsverlaufstabelle, die Sie aus dieser Klasse ableiten können, und zum Überschreiben von OnModelCreating.Abgeleitete Instanzen können entweder mit <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> auf einer Konfigurationsgrundlage pro Migration oder mit <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> global registriert werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>Initialisiert eine neue Instanz der HistoryContext-Klasse.Wenn Sie einen abgeleiteten Verlaufskontext erstellen, stellen Sie normalerweise einen Konstruktor zur Verfügung, der dieselben Parameter akzeptiert und sie an diesen Basiskonstruktor weiterleitet.</summary>
      <param name="existingConnection">Eine vorhandene Verbindung, die für den neuen Kontext verwendet werden soll.</param>
      <param name="defaultSchema">Das Standardschema des Modells, das migriert wird.Dieses Schema wird für die Migrationsverlaufstabelle verwendet, es sei denn, in OnModelCreating wurde ein anderes Schema konfiguriert.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>Ruft den Schlüssel ab, der verwendet wird, um ein Modell zu suchen, das zuvor für diesen Kontext erstellt wurde.Dies wird verwendet, um das Verarbeiten von OnModelCreating und das wiederholte Berechnen des Modells zu verhindern, wenn eine neue Kontextinstanz erstellt wird.Standardmäßig gibt diese Eigenschaft das Standardschema zurück.In den meisten Fällen ist es nicht notwendig, diese Eigenschaft zu überschreiben.Wenn Ihre Implementierung von OnModelCreating jedoch Bedingungslogik enthält, die in einem anderen Modell resultiert, das für den gleichen Datenbankanbieter und das gleiche Standardschema erstellt wird, sollten Sie diese Eigenschaft überschreiben und einen geeigneten Schlüssel berechnen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>Ruft das Standardschema des Modells ab, das migriert wird.Dieses Schema wird für die Migrationsverlaufstabelle verwendet, es sei denn, in OnModelCreating wurde ein anderes Schema konfiguriert.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>Der Standardname, der für die Migrationsverlaufstabelle verwendet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>Ruft ein <see cref="T:System.Data.Entity.DbSet`1" /> ab oder legt eines fest, das zum Schreiben und Lesen von <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />-Instanzen verwendet werden kann.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Übernimmt die Standardkonfiguration für die Migrationsverlaufstabelle.Wenn Sie diese Methode überschreiben, wird empfohlen, dass Sie diese Basisimplementierung aufrufen, bevor Sie die benutzerdefinierte Konfiguration anwenden.</summary>
      <param name="modelBuilder">Der Generator, der das Modell für den zu erstellenden Kontext definiert.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>Diese Klasse wird von Code First-Migrationen verwendet, um den Migrationsverlauf aus der Datenbank zu lesen bzw. in die Datenbank zu schreiben.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>Ruft einen Schlüssel ab, der darstellt, für welchen Kontext die Zeile gilt, oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>Ruft die ID der Migration ab, die von dieser Zeile dargestellt wird, oder legt sie fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>Ruft den Zustand des Modells nach Anwendung der Migration ab oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>Ruft die Entity Framework-Version ab, von der dieser Eintrag erstellt wurde, oder legt sie fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Stellt einen Fehler dar, der auftritt, wenn eine automatische Migration zu einem Datenverlust führen würde.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>Initialisiert eine neue Instanz der AutomaticDataLossException-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der AutomaticDataLossException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat, oder ein NULL-Verweis (Nothing in Visual Basic), wenn keine innere Ausnahme angegeben ist.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Stellt einen Fehler dar, der auftritt, wenn nach Anwendung der letzten Migration ausstehende Modelländerungen vorhanden sind und die automatische Migration deaktiviert ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>Initialisiert eine neue Instanz der AutomaticMigrationsDisabledException-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der AutomaticMigrationsDisabledException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat, oder ein NULL-Verweis (Nothing in Visual Basic), wenn keine innere Ausnahme angegeben ist.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>Explizit durch <see cref="T:System.Data.Entity.Migrations.DbMigration" /> implementiert, um zu verhindern, dass bestimmte Elemente in den IntelliSense von Migrationsgerüsten gelangen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Fügt der Migration einen benutzerdefinierten <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> hinzu.Für benutzerdefinierte Vorgangsimplementierungen wird empfohlen, Erweiterungsmethoden für <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> zu erstellen, die eine flüssige API zum Hinzufügen neuer Vorgänge bereitstellen.</summary>
      <param name="migrationOperation">Der hinzuzufügende Vorgang.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Stellt zusätzliche Metadaten über eine codebasierte Migration bereit.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>Ruft den eindeutigen Bezeichner für die Migration ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>Ruft den Zustand des Modells vor Ausführung der Migration ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>Ruft den Zustand des Modells nach Ausführung der Migration ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Stellt Fehler dar, die in der Pipeline von Code First-Migrationen auftreten.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse mit serialisierten Daten.</summary>
      <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der Kontextinformationen zur Quelle oder zum Ziel enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der MigrationsException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat, oder ein NULL-Verweis (Nothing in Visual Basic), wenn keine innere Ausnahme angegeben ist.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Basisklasse für Protokollierungen, die für den Migrationsprozess verwendet werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>Protokolliert eine Informationsmeldung.</summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>Protokolliert zusätzliche Informationen, die dem Benutzer nur angezeigt werden sollen, wenn er die Ausgabe ausführlicher Informationen anfordert.</summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>Protokolliert eine Warnung, über die der Benutzer benachrichtigt werden soll.</summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>Wird ausgelöst, wenn ein Vorgang nicht durchgeführt werden kann, weil Migrationen vorhanden sind, die nicht auf die Datenbank angewendet wurden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>Initialisiert eine neue Instanz der MigrationsPendingException-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der MigrationsPendingException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der MigrationsPendingException-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat, oder ein NULL-Verweis (Nothing in Visual Basic), wenn keine innere Ausnahme angegeben ist.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Stelle eine Basisklasse für Decorator-Elemente dar, die den hauptsächlichen <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> umschließen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" />-Klasse.</summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>Ruft die Konfiguration ab, die für den Migrationsprozess verwendet wird.</summary>
      <returns>Der Prozess, der für den Migrationsprozess verwendet wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>Ruft eine Liste der Migrationen ab, die auf die Datenbank angewendet wurden.</summary>
      <returns>Liste der Migrations-IDs.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>Ruft eine Liste der Migrationen ab, die in der Assembly definiert sind.</summary>
      <returns>Liste der Migrations-IDs.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>Ruft eine Liste der ausstehenden Migrationen ab, die nicht auf die Datenbank angewendet wurden.</summary>
      <returns>Liste der Migrations-IDs.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>Aktualisiert die Zieldatenbank auf die neueste Migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>Aktualisiert die Zieldatenbank auf eine angegebene Migration.</summary>
      <param name="targetMigration">Die Migration, auf die ein Upgrade oder Downgrade ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Decorator zur Bereitstellung von Protokollierungsinformationen im Verlauf von Migrationsvorgängen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>Initialisiert eine neue Instanz der MigratorLoggingDecorator-Klasse.</summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
      <param name="logger">Die Protokollierung, in die Meldungen geschrieben werden.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Decorator, der ein SQL-Skript erstellt anstatt Änderungen auf die Datenbank anzuwenden.Wenn <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> mit diesem Decorator umschlossen wird, wird <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> daran gehindert, Änderungen auf die Zieldatenbank anzuwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialisiert eine neue Instanz der MigratorScriptingDecorator-Klasse.</summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Erstellt ein Skript zum Aktualisieren der Datenbank.</summary>
      <returns>Das generierte SQL-Skript.</returns>
      <param name="sourceMigration">Die Migration, von der aktualisiert werden soll.Wenn NULL angegeben wird, wird ein Updateskript für die aktuelle Datenbank erstellt.</param>
      <param name="targetMigration">Die Migration, auf die aktualisiert werden soll.Wenn NULL angegeben wird, wird ein Skript für ein Update auf die neueste Migration erstellt.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Stellt eine Spalte dar, die einer Tabelle hinzugefügt wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>Initialisiert eine neue Instanz der AddColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, der die Spalte hinzugefügt werden soll.</param>
      <param name="column">Die Details zur hinzugefügten Spalte.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>Ruft die Details zur hinzugefügten Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen der hinzugefügten Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
      <returns>true, wenn die Änderung destruktiv ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>Ruft den Name der Tabelle ab, der die Spalte hinzugefügt werden soll.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Stellt eine Fremdschlüsseleinschränkung dar, die einer Tabelle hinzugefügt wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der AddForeignKeyOperation-Klasse.Die Eigenschaften "PrincipalTable", "PrincipalColumns", "DependentTable" und "DependentColumns" sollten ebenfalls aufgefüllt werden.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>Ruft einen Wert ab, der angibt, ob die Löschweitergabe für die Fremdschlüsseleinschränkung konfiguriert werden soll, oder legt ihn fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>Ruft einen Vorgang ab, durch den ein Index für die Fremdschlüsselspalte(n) erstellt wird.</summary>
      <returns>Ein Vorgang zum Hinzufügen des Indexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen der Fremdschlüsseleinschränkung ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob diese Änderung zu Datenverlusten führen, oder legt ihn fest.</summary>
      <returns>true, wenn diese Änderung zu Datenverlusten führt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>Die Namen der Tabellen, auf die sich die Fremdschlüsseleinschränkung bezieht.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Stellt einen Vorgang dar, durch den einer Tabelle ein Primärschlüssel hinzugefügt wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der AddPrimaryKeyOperation-Klasse.Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen des Primärschlüssels ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>Ruft ab oder legt fest, ob es sich um einen gruppierten Primärschlüssel handelt.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Stellt einen Vorgang zum Ändern einer vorhandenen Spalte dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der AlterColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="column">Details zu den Änderungen, die für die Spalte ausgeführt werden.</param>
      <param name="isDestructiveChange">Ein Wert, der angibt, ob diese Änderung zu einem Datenverlust führt.</param>
      <param name="inverse">Ein Vorgang, durch den die Änderung der Spalte rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>Initialisiert eine neue Instanz der AlterColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="column">Details zu den Änderungen, die für die Spalte ausgeführt werden.</param>
      <param name="isDestructiveChange">Ein Wert, der angibt, ob diese Änderung zu einem Datenverlust führt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>Ruft die neue Definition für die Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den die Änderung rückgängig gemacht wird.Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob diese Änderung zu einem Datenverlust führt.</summary>
      <returns>true, wenn diese Änderung zu Datenverlusten führt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>Ruft den Namen der Tabelle ab, der die Spalte angehört.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>Ein Vorgang zum Ändern einer vorhandenen gespeicherten Prozedur.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.</param>
      <param name="bodySql">Der Text der gespeicherten Prozedur in SQL.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird.Gibt immer ein <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" /> zurück.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>Stellt Änderungen an benutzerdefinierten Anmerkungen einer Tabelle dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der Tabelle, deren Anmerkungen geändert wurden.</param>
      <param name="annotations">Die benutzerdefinierten Anmerkungen der Tabelle, die geändert wurden.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>Ruft die benutzerdefinierten Anmerkungen ab, die in der Tabelle geändert wurden.</summary>
      <returns>Die benutzerdefinierten Anmerkungen, die in der Tabelle geändert wurden.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>Ruft die Spalten ab, die in der Tabelle enthalten sein sollen, deren Anmerkungen geändert wurden.</summary>
      <returns>Die Spalten, die in der Tabelle enthalten sein sollen, deren Anmerkungen geändert wurden.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>Ruft einen Vorgang ab, der diesen Vorgang umkehrt, sodass die Anmerkungen in ihren Zustand vor der Ausführung dieses Vorgangs zurückgesetzt werden.</summary>
      <returns>Ein Vorgang, der diesen Vorgang umkehrt, sodass die Anmerkungen in ihren Zustand vor der Ausführung dieses Vorgangs zurückgesetzt werden.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>Ruft den Namen der Tabelle ab, deren Anmerkungen geändert wurden.</summary>
      <returns>Der Name der Tabelle, deren Anmerkungen geändert wurden.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Stellt Informationen über eine Spalte dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Initialisiert eine neue Instanz der ColumnModel-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="type">Der Datentyp für diese Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialisiert eine neue Instanz der ColumnModel-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="type">Der Datentyp für diese Spalte.</param>
      <param name="typeUsage">Zusätzliche Informationen über den Datentyp.Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>Abfrage bzw. Änderung der benutzerdefinierten Anmerkungen der Spalte, die geändert wurden.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>Ruft den Standardwert für den CLR-Typ ab, der dem Datenbanktyp dieser Spalte entspricht.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>Ruft den CLR-Typ ab, der dem Datenbanktyp dieser Spalte entspricht.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>Ruft einen Wert ab, der angibt, ob Werte für diese Spalte von der Datenbank mithilfe des Identitätsmusters generiert werden, oder legt ihn fest.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>Bestimmt, ob diese Spalte einen enger gefassten Datentyp aufweist als eine andere Spalte.Dient zur Bestimmung, ob ein Datenverlust auftritt, wenn die angegebene Spaltendefinition in diese Definition geändert wird.</summary>
      <returns>TRUE, wenn diese Spalte einen enger gefassten Datentyp aufweist.</returns>
      <param name="column">Die Spalte, mit der verglichen wird.</param>
      <param name="providerManifest">Details zum verwendeten Datenbankanbieter.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>Ruft einen Wert ab, der angibt, ob diese Spalte NULL-Werte speichern kann, oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Eigenschaftenmodell als Zeitstempel konfiguriert werden soll, oder legt ihn fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Stellt einen Vorgang zum Erstellen eines Datenbankindexes dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der CreateIndexOperation-Klasse.Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen dieses Indexes ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>Ruft ab, ob es sich um einen gruppierten Index handelt, oder legt dies fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob diese Änderung zu Datenverlusten führen, oder legt ihn fest.</summary>
      <returns>true, wenn diese Änderung zu Datenverlusten führt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Index eindeutig ist, oder legt ihn fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>Ein Migrationsvorgang zum Hinzufügen einer neuen gespeicherten Prozedur zur Datenbank.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.</param>
      <param name="bodySql">Der Text der gespeicherten Prozedur in SQL.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen der gespeicherten Prozedur ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Stellt einen Vorgang zum Erstellen einer Tabelle dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu erstellenden Tabelle.</param>
      <param name="annotations">Benutzerdefinierte Anmerkungen, die in der zu erstellenden Tabelle vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu erstellenden Tabelle.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>Ruft die benutzerdefinierten Anmerkungen der zu erstellenden Tabelle ab.</summary>
      <returns>Die benutzerdefinierten Anmerkungen der zu erstellenden Tabelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>Ruft die Spalten ab, die in die neue Tabelle eingeschlossen werden sollen.</summary>
      <returns>Die Spalten, die in die neue Tabelle eingeschlossen werden sollen.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>Ruft einen Vorgang zum Löschen der Tabelle ab.</summary>
      <returns>Ein Vorgang zum Löschen der Tabelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>Ruft den Namen der zu erstellenden Tabelle ab.</summary>
      <returns>Der Name der zu erstellenden Tabelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>Ruft den Primärschlüssel für die neue Tabelle ab oder legt ihn fest.</summary>
      <returns>Der Primärschlüssel für die neue Tabelle.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Stellt eine Spalte dar, die aus einer Tabelle gelöscht wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="removedAnnotations">Benutzerdefinierte Anmerkungen, die in der zu löschenden Spalte vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="inverse">Der Vorgang, durch den der Löschvorgang rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Initialisiert eine neue Instanz der DropColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="removedAnnotations">Benutzerdefinierte Anmerkungen, die in der zu löschenden Spalte vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="inverse">Der Vorgang, durch den der Löschvorgang rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den das Löschen der Spalte rückgängig gemacht wird.Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>Ruft den Namen der zu löschenden Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>Ruft die benutzerdefinierten Anmerkungen der zu löschenden Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>Ruft den Namen der Tabelle ab, aus der die Spalte gelöscht werden soll.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Stellt eine Fremdschlüsseleinschränkung dar, die aus einer Tabelle gelöscht wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="inverse">Der Vorgang, durch den die Fremdschlüsseleinschränkung nach dem Löschen wiederhergestellt wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />-Klasse.Die Eigenschaften "PrincipalTable", "DependentTable" und "DependentColumns" sollten ebenfalls aufgefüllt werden.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>Ruft einen Vorgang ab, durch den der zugeordnete Index für die Fremdschlüsselspalte(n) gelöscht wird.</summary>
      <returns>Ein Vorgang zum Löschen des Indexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den die Fremdschlüsseleinschränkung nach dem Löschen wiederhergestellt wird.Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück.</summary>
      <returns>Ein Vorgang, durch den die Fremdschlüsseleinschränkung nach dem Löschen wiederhergestellt wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob eine Änderung destruktiv ist.</summary>
      <returns>true, wenn eine Änderung destruktiv ist, andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Stellt einen Vorgang zum Löschen eines vorhandenen Indexes dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropIndexOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="inverse">Der Vorgang, durch den das Löschen des Indexes rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der DropIndexOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den das Löschen des Indexes rückgängig gemacht wird.Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Stellt einen Vorgang zum Löschen eines Primärschlüssels aus einer Tabelle dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der DropPrimaryKeyOperation-Klasse.Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>Wird beim Ändern der Migrationsverlaufstabelle verwendet, sodass die Tabelle neu erstellt werden kann, statt den Primärschlüssel zu löschen und neu hinzuzufügen.</summary>
      <returns>Der Tabellenerstellungsvorgang für die Migrationsverlaufstabelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>Ruft einen Vorgang zum Hinzufügen des Primärschlüssels ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>Löscht eine gespeicherte Prozedur aus der Datenbank.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden gespeicherten Prozedur.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird.Gibt immer ein <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" /> zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>Ruft den Namen der zu löschenden gespeicherten Prozedur ab.</summary>
      <returns>Der Name der zu löschenden gespeicherten Prozedur.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Stellt einen Vorgang zum Löschen einer vorhandenen Tabelle dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="removedAnnotations">Benutzerdefinierte Anmerkungen, die auf der zu löschenden Tabelle vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="removedColumnAnnotations">Benutzerdefinierte Anmerkungen, die auf den Spalten der zu löschenden Tabelle vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="inverse">Ein Vorgang, durch den das Löschen der Tabelle rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Initialisiert eine neue Instanz der DropTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="removedAnnotations">Benutzerdefinierte Anmerkungen, die auf der zu löschenden Tabelle vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="removedColumnAnnotations">Benutzerdefinierte Anmerkungen, die auf den Spalten der zu löschenden Tabelle vorhanden sind.Darf NULL oder leer sein.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="inverse">Ein Vorgang, durch den das Löschen der Tabelle rückgängig gemacht wird.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der DropTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den das Löschen der Tabelle rückgängig gemacht wird.Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob der Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn der Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>Ruft den Namen der zu löschenden Tabelle ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>Ruft die benutzerdefinierten Anmerkungen der zu löschenden Tabelle ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>Ruft die benutzerdefinierten Anmerkungen der Spalten der zu löschenden Tabelle ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Basisklasse für Änderungen, die sich auf Fremdschlüsseleinschränkungen auswirken.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der ForeignKeyOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>Die Namen der Fremdschlüsselspalte(n).Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>Ruft den Namen der Tabelle ab, in der sich die Fremdschlüsselspalten befinden, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diese Fremdschlüsseleinschränkung angegeben wurde.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>Ruft den Namen dieser Fremdschlüsseleinschränkung ab oder legt ihn fest.Wenn kein Name angegeben wird, wird ein Standardname berechnet.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>Ruft den Namen der Tabelle ab, auf den sich die Fremdschüsseleinschränkung bezieht, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Vorgang, der DML-Änderungen an der Migrationsverlaufstabelle darstellt.Die Migrationsverlaufstabelle wird verwendet, um ein Protokoll der auf die Datenbank angewendeten Migrationen zu speichern.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>Initialisiert eine neue Instanz der HistoryOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="commandTrees">Eine Sequenz von Befehlsstrukturen, die die Vorgänge darstellt, die auf die Verlaufstabelle angewendet werden.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>Eine Sequenz von Befehlen, die die Vorgänge darstellt, die auf die Verlaufstabelle angewendet werden.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Allgemeine Basisklasse für indexbezogene Vorgänge.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der IndexOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Erstellt einen Standard-Indexnamen anhand der gegebenen Spaltennamen.</summary>
      <returns>Ein Standard-Indexname.</returns>
      <param name="columns">Die für die Erstellung des Standard-Indexnamens verwendeten Spaltennamen.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>Ruft die indizierten Spalten ab.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diesen Index angegeben wurde.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>Ruft den Namen dieses Indexes ab oder legt ihn fest.Wenn kein Name angegeben wird, wird ein Standardname berechnet.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>Ruft die Tabelle ab, der der Index angehört, oder legt sie fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Stellt einen Vorgang zum Ändern eines Datenbankschemas dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der MigrationOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>Ruft zusätzliche Argumente ab, die von Anbietern verarbeitet werden können.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>Eine Verschiebung einer gespeicherten Prozedur in ein neues Schema in der Datenbank.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu verschiebenden gespeicherten Prozedur.</param>
      <param name="newSchema">Das neue Schema für die gespeicherte Prozedur.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>Ruft den Namen der zu verschiebenden gespeicherten Prozedur ab.</summary>
      <returns>Der Name der zu verschiebenden gespeicherten Prozedur.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>Ruft das neue Schema für die gespeicherte Prozedur ab.</summary>
      <returns>Das neue Schema für die gespeicherte Prozedur.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Stellt einen Vorgang zum Verschieben einer Tabelle zwischen zwei Schemas dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der MoveTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der zu verschiebenden Tabelle.</param>
      <param name="newSchema">Der Name des Schemas, in das die Tabelle verschoben werden soll.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>Wird beim Ändern der Migrationsverlaufstabelle verwendet, sodass Daten in die neue Tabelle verschoben werden können.</summary>
      <returns>Der Kontextschlüssel für das Modell.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>Wird beim Ändern der Migrationsverlaufstabelle verwendet, sodass die Tabelle neu erstellt werden kann, statt den Primärschlüssel zu löschen und neu hinzuzufügen.</summary>
      <returns>Der Tabellenerstellungsvorgang für die Migrationsverlaufstabelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den die Tabelle in ihr ursprüngliches Schema zurückverschoben wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob diese Änderung zu Datenverlusten führen.</summary>
      <returns>true, wenn diese Änderung zu Datenverlusten führt; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>Ruft einen Wert ab, der angibt, ob es sich um eine Systemtabelle handelt.</summary>
      <returns>true, wenn die Tabelle eine Systemtabelle ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>Ruft den Namen der zu verschiebenden Tabelle ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>Ruft den Namen des Schemas ab, in das die Tabelle verschoben werden soll.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>Stellt einen Migrationsvorgang dar, der nicht ausgeführt werden kann, z. B. weil dieser vom Ziel-Datenbankanbieter nicht unterstützt wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>Stellt Informationen über einen Parameter dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Initialisiert eine neue Instanz der ParameterModel-Klasse mit angegebenem Typ.</summary>
      <param name="type">Der Datentyp für diesen Parameter.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialisiert eine neue Instanz der ParameterModel-Klasse unter Verwendung des angegebenen Typs und der Typenverwendung.</summary>
      <param name="type">Der Datentyp für diesen Parameter.</param>
      <param name="typeUsage">Zusätzliche Informationen über den Datentyp.Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob diese Instanz ein out-Parameter ist.</summary>
      <returns>true, wenn diese Instanz ein out-Parameter ist, andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Allgemeine Basisklasse für Vorgänge, die sich auf Primärschlüssel auswirken.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der PrimaryKeyOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>Gibt den Standardnamen für den Primärschlüssel zurück.</summary>
      <returns>Der Standardname des Primärschlüssels.</returns>
      <param name="table">der Name der Zieltabelle.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>Ruft die Spalte(n) ab, aus denen der Primärschlüssel besteht.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diesen Primärschlüssel angegeben wurde.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>Ruft den Namen dieses Primärschlüssels ab oder legt ihn fest.Wenn kein Name angegeben wird, wird ein Standardname berechnet.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>Ruft den Namen der Tabelle ab, in der der Primärschlüssel enthalten ist, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>Ein Migrationsvorgang, der sich auf gespeicherte Prozeduren auswirkt.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der gespeicherten Prozedur.</param>
      <param name="bodySql">Der Text der gespeicherten Prozedur in SQL.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>Ruft den Text der gespeicherten Prozedur in SQL ab.</summary>
      <returns>Der Text der gespeicherten Prozedur in SQL.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>Ruft den Namen der gespeicherten Prozedur ab.</summary>
      <returns>Der Name der gespeicherten Prozedur.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>Ruft die Parameter der gespeicherten Prozedur ab.</summary>
      <returns>Die Parameter der gespeicherten Prozedur.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>Stellt Informationen über eine Eigenschaft einer Entity dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialisiert eine neue Instanz der PropertyModel-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="type">Der Datentyp für dieses Eigenschaftenmodell.</param>
      <param name="typeUsage">Zusätzliche Informationen über den Datentyp.Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>Ruft einen konstanten Wert ab, der als Standardwert für dieses Eigenschaftenmodell verwendet werden soll, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>Ruft einen SQL-Ausdruck ab, der als Standardwert für dieses Eigenschaftenmodell verwendet werden soll, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Eigenschaftenmodell eine feste Länge aufweist, oder legt ihn fest.Gilt nur für Arraydatentypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Eigenschaftenmodell Unicode-Zeichen unterstützt, oder legt ihn fest.Gilt nur für Textdatentypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>Ruft die maximale Länge für dieses Eigenschaftenmodell ab oder legt sie fest.Gilt nur für Arraydatentypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>Ruft den Namen des Eigenschaftenmodells ab oder legt diesen fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>Ruft die Genauigkeit für dieses Eigenschaftenmodell ab oder legt sie fest.Gilt nur für Dezimaldatentypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>Ruft die Skala für dieses Eigenschaftenmodell ab oder legt sie fest.Gilt nur für Dezimaldatentypen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>Ruft einen für den Anbieter spezifischen Datentyp ab, der für dieses Eigenschaftenmodell verwendet werden soll, oder legt ihn fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>Ruft den Datentyp für dieses Eigenschaftenmodell ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>Ruft zusätzliche Informationen über den Datentyp dieses Eigenschaftenmodells ab.Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Stellt einen Vorgang zum Umbenennen einer vorhandenen Spalte dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der RenameColumnOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="name">Der Name der Spalte, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Spalte.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den die Umbenennung rückgängig gemacht wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>Ruft den Namen der umzubenennenden Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>Ruft den neuen Namen für die Spalte ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>Ruft den Namen der Tabelle ab, der die Spalte angehört.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>Stellt den Vorgang der Umbenennung eines vorhandenen Index dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der RenameIndexOperation-Klasse.</summary>
      <param name="table">Der Name der Tabelle, der der Index angehört.</param>
      <param name="name">Der Name des umzubenennenden Indexes.</param>
      <param name="newName">Der neue Name für den Index.</param>
      <param name="anonymousArguments">Die zusätzlichen Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>Ruft einen Vorgang ab, der den vorherigen Namen des Index rückgängig macht.</summary>
      <returns>Ein Vorgang, der den vorherigen Namen des Index rückgängig macht.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>Ruft ab, ob die Umbenennung des Index destruktiv für den Vorgang sein kann.</summary>
      <returns>true, wenn die Umbenennung des Index destruktiv für den Vorgang sein kann, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>Ruft den Namen des umzubenennenden Indexes ab.</summary>
      <returns>Der Name des umzubenennenden Indexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>Ruft den neuen Namen für den Index ab.</summary>
      <returns>Der neue Name für den Index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>Ruft den Namen der Tabelle ab, die den Index enthält.</summary>
      <returns>Der Name der Tabelle, der der Index angehört.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>Eine Umbenennung einer gespeicherten Prozedur in der Datenbank.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der umzubenennenden gespeicherten Prozedur.</param>
      <param name="newName">Der neue Name für die gespeicherte Prozedur.</param>
      <param name="anonymousArguments">Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.Gibt immer FALSE zurück.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>Ruft den Namen der umzubenennenden gespeicherten Prozedur ab.</summary>
      <returns>Der Name der umzubenennenden gespeicherten Prozedur.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>Ruft den neuen Name für die gespeicherte Prozedur ab.</summary>
      <returns>Der neue Name für die gespeicherte Prozedur.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>Stellt einen Vorgang zum Umbenennen einer vorhandenen Tabelle dar.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der RenameTableOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="name">Der Name der Tabelle, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Tabelle.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>Ruft einen Vorgang ab, durch den die Umbenennung rückgängig gemacht wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
      <returns>true, wenn die Änderung destruktiv ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>Ruft den Namen der umzubenennenden Tabelle ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>Ruft den neuen Namen für die Tabelle ab.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Stellt eine anbieterspezifische SQL-Anweisung dar, die direkt für die Zieldatenbank ausgeführt wird.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>Initialisiert eine neue Instanz der SqlOperation-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="sql">Der auszuführende SQL-Befehl.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können.Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
      <returns>true, wenn dieser Vorgang zu Datenverlusten führen kann; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>Ruft den auszuführenden SQL-Befehl ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>Ruft einen Wert ab, der angibt, ob diese Anweisung außerhalb des Transaktionsbereichs ausgeführt werden soll, in dem der Migrationsprozess normalerweise ausgeführt wird, oder legt ihn fest.Wenn auf TRUE festgelegt, wird für diesen Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>Wird bei der Generierung von Änderungsvorgängen für eine Datenbank verwendet, um die Vorgänge zu speichern, die auf der Datenbank ausgeführt worden wären.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" />-Klasse.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="historyQueryTrees">Die Abfragen, um zu bestimmen, ob diese Migration auf der Datenbank ausgeführt werden muss.Dies wird verwendet, um ein idempotentes SQL-Skript zu generieren, das auf allen Versionen von Datenbanken ausgeführt werden kann.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Fügt eine Migration zu diesem Änderungsvorgang für die Datenbank hinzu.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <param name="migrationId">Die ID der Migration.</param>
      <param name="operations">Die einzelnen in der Migration angewendeten Operationen.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>Die Abfragen, um zu bestimmen, ob diese Migration auf der Datenbank ausgeführt werden muss.Dies wird verwendet, um ein idempotentes SQL-Skript zu generieren, das auf allen Versionen von Datenbanken ausgeführt werden kann.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Vorgänge zu einem Datenverlust führen können.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>Ruft eine Liste der Migrationen ab, die während des Änderungsvorgangs an der Datenbank angewendet wurden.</summary>
      <returns>Die Migrationen, die während des Änderungsvorgangs an der Datenbank angewendet wurden.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>Stellt eine Migration dar, die auf die Datenbank angewendet werden soll.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>Ruft die ID der Migration ab.</summary>
      <returns>Die ID der Migration.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>Ruft die einzelnen in dieser Migration angewendeten Operationen ab.</summary>
      <returns>Die einzelnen in dieser Migration angewendeten Operationen.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>Allgemeine Basisklasse für Anbieter, die anbieteragnostische Migrationsvorgänge in Datenbankanbieter-spezifische SQL-Befehle konvertieren.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>Erstellt die Speichertypnutzung für den angegebenen <paramref name="storeTypeName" /> anhand der Facets aus dem angegebenen <paramref name="propertyModel" />.</summary>
      <returns>Eine speicherspezifische TypeUsage</returns>
      <param name="storeTypeName">Name des Speichertyps.</param>
      <param name="propertyModel">Die Target-Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Konvertiert eine Gruppe von Migrationsvorgängen in Datenbankanbieter-spezifische SQL-Befehle.</summary>
      <returns>Eine Liste von SQL-Anweisungen, mit denen Migrationsvorgänge ausgeführt werden.</returns>
      <param name="migrationOperations">Die zu konvertierenden Vorgänge.</param>
      <param name="providerManifestToken">Das Token, das die Zielversion der Datenbank darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>Erzeugt den SQL-Text für eine gespeicherte Prozedur.</summary>
      <returns>Der SQL-Text für die gespeicherte Prozedur.</returns>
      <param name="commandTrees">Die Befehlsstrukturen, die die Befehle für einen Einfüge-, Aktualisierungs- oder Löschvorgang darstellen.</param>
      <param name="rowsAffectedParameter">Die vom Parameternamen betroffenen Zeilen.</param>
      <param name="providerManifestToken">Das Anbietermanifesttoken.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>Ruft das Anbietermanifest ab oder legt es fest.</summary>
      <returns>Das Anbietermanifest.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Stellt einen Migrationsvorgang dar, der in eine SQL-Anweisung übersetzt wurde.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>Ruft das Batchabschlusszeichen für den Datenbankanbieter ab oder legt es fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
      <returns>Das Batchabschlusszeichen für den Datenbankanbieter.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>Ruft die SQL-Anweisung zum Ausführen dieses Migrationsvorgangs ab oder legt sie fest.Entity Framework-Migrations-APIs wurden nicht für das Akzeptieren von Eingaben aus nicht vertrauenswürdigen Quellen (z. B. vom Endbenutzer einer Anwendung) entwickelt.Wenn Eingaben aus solchen Quellen akzeptiert werden sollen, müssen diese vor der Übergabe an die APIs überprüft werden, um einen Schutz vor SQL-Injection-Angriffen und anderen Gefahren sicherzustellen.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>Ruft einen Wert ab, der angibt, ob diese Anweisung außerhalb des Transaktionsbereichs ausgeführt werden soll, in dem der Migrationsprozess normalerweise ausgeführt wird, oder legt ihn fest.Wenn auf TRUE festgelegt, wird für diesen Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>Ist mit <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> identisch, unterstützt jedoch die teilweise Vertrauenswürdigkeit; fügt die explizite Zwischenspeicherung von erzeugten Einzugszeichenfolgen hinzu und erkennt auch das Schreiben von Zeichenfolgen, die nur \r\n oder \n als Schreibzeile enthalten, um sicherzustellen, dass die nächste Zeile wie gewünscht eingerückt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Initialisiert eine neue Instanz der IndentedTextWriter-Klasse mit dem angegebenen Textwriter und der angegebenen Standardzeichenfolge für Tabstopps.Beachten Sie, dass der an diesen Konstruktor übergebene Writer die <see cref="T:System.Globalization.CultureInfo" /> verwenden muss, die durch die <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />-Eigenschaft angegeben wird.</summary>
      <param name="writer">Der für die Ausgabe zu verwendende <see cref="T:System.IO.TextWriter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initialisiert eine neue Instanz der IndentedTextWriter-Klasse mit dem angegebenen Textwriter und der angegebenen Zeichenfolge für Tabstopps.Beachten Sie, dass der an diesen Konstruktor übergebene Writer die <see cref="T:System.Globalization.CultureInfo" /> verwenden muss, die durch die <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />-Eigenschaft angegeben wird.</summary>
      <param name="writer">Der für die Ausgabe zu verwendende <see cref="T:System.IO.TextWriter" />.</param>
      <param name="tabString">Die für Einzüge zu verwendende Tabstoppzeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>Schließt das Dokument, in das geschrieben wird.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>Gibt die Kultur an, die vom zugrunde liegenden TextWriter verwendet wird.Diese statische Eigenschaft ist schreibgeschützt.Beachten Sie, dass alle an einen der Konstruktoren von <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> übergebenen Writer die gleiche Kultur verwenden müssen.Die Kultur ist <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>Erstellt eine Zeichenfolge, welche die aktuelle Einzugsebene für eine neue Zeile darstellt.</summary>
      <returns>Eine leere Zeichenfolge oder eine Zeichenfolge, die den Wert der angegebenen Zeichenfolge für Tabstopps der Einzugsebene enthält.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>Gibt die Standardzeichenfolge für Tabstopps an.Dieses Feld ist konstant.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>Ruft die Codierung für den zu verwendenden Textwriter ab.</summary>
      <returns>Eine <see cref="T:System.Text.Encoding" />-Klasse, die die Codierung für den zu verwendenden Textwriter angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>Leert den Datenstrom.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>Ruft die Anzahl der Leerzeichen für den Einzug ab oder legt sie fest.</summary>
      <returns>Die Anzahl der Leerzeichen für den Einzug.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>Ruft den zu verwendenden <see cref="T:System.IO.TextWriter" /> ab.</summary>
      <returns>Der zu verwendende <see cref="T:System.IO.TextWriter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>Ruft das zu verwendende Neue-Zeile-Zeichen ab oder legt es fest.</summary>
      <returns>Die zu verwendende Zeilenendemarke.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>Gibt die Tabstoppzeichenfolge entsprechend der <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />-Eigenschaft einmal für jede Einzugsebene aus.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>Schreibt die Textdarstellung eines booleschen Werts in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende boolesche Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>Schreibt ein Zeichen in den Textdatenstrom.</summary>
      <param name="value">Das zu schreibende Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>Schreibt ein Zeichenarray in den Textdatenstrom.</summary>
      <param name="buffer">Das zu schreibende Zeichenarray.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Schreibt ein Unterarray von Zeichen in den Textdatenstrom.</summary>
      <param name="buffer">Das Zeichenarray, aus dem Daten geschrieben werden sollen.</param>
      <param name="index">Der Startindex im Puffer.</param>
      <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Schreibt die Textdarstellung eines Double-Werts in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende Double-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>Schreibt die Textdarstellung einer ganzen Zahl in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende ganze Zahl.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>Schreibt die Textdarstellung einer ganzen Zahl mit 8 Bytes in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende ganze Zahl mit 8 Bytes.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>Schreibt die Textdarstellung eines Objekts in den Textdatenstrom.</summary>
      <param name="value">Das zu schreibende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Schreibt die Textdarstellung eines Single-Werts in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende Single-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>Schreibt die angegebene Zeichenfolge in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende Zeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik.</summary>
      <param name="format">Die Formatierungszeichenfolge.</param>
      <param name="arg0">Das Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik.</summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge.</param>
      <param name="arg0">Das erste Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
      <param name="arg1">Das zweite Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik.</summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge.</param>
      <param name="arg">Das auszugebende Argumentarray.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>Schreibt ein Zeilenabschlusszeichen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Schreibt die Textdarstellung eines booleschen Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende boolesche Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Schreibt ein Zeichen, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Das zu schreibende Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Schreibt ein Zeichenarray, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="buffer">Das zu schreibende Zeichenarray.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Schreibt ein Unterarray von Zeichen, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="buffer">Das Zeichenarray, aus dem Daten geschrieben werden sollen.</param>
      <param name="index">Der Startindex im Puffer.</param>
      <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Schreibt die Textdarstellung eines Double-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende Double-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Schreibt die Textdarstellung einer ganzen Zahl, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende ganze Zahl.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Schreibt die Textdarstellung einer ganzen Zahl mit 8 Bytes, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende ganze Zahl mit 8 Bytes.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Schreibt die Textdarstellung eines Objekts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Das zu schreibende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Schreibt die Textdarstellung eines Single-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Der zu schreibende Single-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>Schreibt die angegebene Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Die zu schreibende Zeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik.</summary>
      <param name="format">Die Formatierungszeichenfolge.</param>
      <param name="arg0">Das Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik.</summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge.</param>
      <param name="arg0">Das erste Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
      <param name="arg1">Das zweite Objekt, das in die formatierte Zeichenfolge geschrieben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik.</summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge.</param>
      <param name="arg">Das auszugebende Argumentarray.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Schreibt die Textdarstellung eines UInt32-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom.</summary>
      <param name="value">Ein auszugebender UInt32-Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Schreibt die angegebene Zeichenfolge ohne Tabstopps in eine Zeile.</summary>
      <param name="value">Die zu schreibende Zeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines komplexen Typs in einem Modell.Eine ComplexTypeConfiguration kann mit der ComplexType-Methode in einem <see cref="T:System.Data.Entity.DbModelBuilder" /> bezogen werden, und ein benutzerdefinierter Typ, der von ComplexTypeConfiguration abgeleitet wurde, kann mit der Configurations-Eigenschaft in <see cref="T:System.Data.Entity.DbModelBuilder" /> registriert werden.</summary>
      <typeparam name="TComplexType">Der komplexe Typ, der konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz von ComplexTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem angegebenen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Eine Hashfunktion für einen besonderen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche ComplexTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, die ignoriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines Entitätstyps in einem Modell.Eine EntityTypeConfiguration kann mit der Entity-Methode in einem <see cref="T:System.Data.Entity.DbModelBuilder" /> abgerufen werden, oder ein benutzerdefinierter Typ, der von EntityTypeConfiguration abgeleitet wurde, kann mit der Configurations-Eigenschaft in <see cref="T:System.Data.Entity.DbModelBuilder" /> registriert werden.</summary>
      <typeparam name="TEntityType">Der Entitätstyp, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz von EntityTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Gibt zurück, ob das angegebene Konfigurationsmodell und das aktuelle Konfigurationsmodell gleich sind.</summary>
      <returns>true, wenn das angegebene Konfigurationsmodell und das aktuelle Konfigurationsmodell gleich sind, andernfalls false.</returns>
      <param name="obj">Das Modell, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Gibt die Hashfunktion für das angegebene Konfigurationsmodell zurück.</summary>
      <returns>Die Hashfunktion für den angegebenen Modell-Generator.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Ruft den Typ für die aktuelle Modellkonfiguration ab.</summary>
      <returns>Der Typ für die aktuelle Modellkonfiguration.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Konfiguriert den Namen der Entitätenmenge, die für diesen Entitätstyp verwendet werden soll.Der Name der Entitätenmenge kann nur für den Basistyp in der jeweiligen Menge konfiguriert werden.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Eigenschaften des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als primärer Schlüssel verwendet werden soll.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Wenn der primäre Schlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) Neu mit { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Konfiguriert eine m:n-Beziehung von diesem Entitätstyp.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert eine optionale Beziehung von diesem Entitätstyp.Instanzen dieses Entitätstyps können in der Datenbank gespeichert werden, ohne dass diese Beziehung angegeben werden muss.Der Fremdschlüssel in der Datenbank kann NULL sein.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert eine erforderliche Beziehung von diesem Entitätstyp.Instanzen dieses Entitätstyps können nur in der Datenbank gespeichert werden, wenn diese Beziehung angegeben wurde.Der Fremdschlüssel in der Datenbank kann nicht NULL sein.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Tabelle, der diese Entität zugeordnet ist.Der Wert der Anmerkung kann später bei der Verarbeitung der Tabelle verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, die ignoriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>Ermöglicht die erweiterte Konfiguration bezüglich der Zuordnung eines abgeleiteten Entitätstyps zum Datenbankschema.Map-Aufrufe sind ergänzend, und nachfolgende Aufrufe überschreiben keine Konfiguration, die bereits über Map ausgeführt wurde.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="derivedTypeMapConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> durchgeführt wird.</param>
      <typeparam name="TDerived">Der abgeleitete Entitätstyp, der konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>Ermöglicht die erweiterte Konfiguration bezüglich der Zuordnung dieses Entitätstyps zum Datenbankschema.Die Konfiguration wird standardmäßig auch für alle Typen übernommen, die von diesem Entitätstyp abgeleitet werden.Abgeleitete Typen können mit der Überladung von Map konfiguriert werden, mit der ein abgeleiteter Typ konfiguriert wird, oder mit einer EntityTypeConfiguration für den abgeleiteten Typ.Die Eigenschaften einer Entität können durch mehrere Map-Aufrufe auf mehrere Tabellen aufgeteilt werden.Map-Aufrufe sind ergänzend, und nachfolgende Aufrufe überschreiben keine Konfiguration, die bereits über Map ausgeführt wurde.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entityMappingConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> durchgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.Die Standardkonventionen für Prozedur- und Parameternamen werden verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Konfiguration zum Überschreiben der Standardkonventionen für Prozedur- und Parameternamen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Modellkonfiguration zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des Modell-Generators.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche EntityTypeConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
      <param name="schemaName">Das Datenbankschema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>Vom <see cref="T:System.Data.Entity.DbModelBuilder" /> während der Modellerstellung ausgelöste Ausnahme beim Generieren eines ungültigen Modells.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>Initialisiert eine neue Instanz von ModelValidationException</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der Klassenserialisierungsinformationen und des Streamingkontexts von <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">Die Serialisierungsinformationen.</param>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz von ModelValidationException</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz von ModelValidationException</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>Basisklasse für das Konfigurieren einer Beziehung.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Ändern einer Beziehung verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, die für die Konfiguration der Beziehung verwendet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>Wird verwendet, um die <see cref="T:System.byte[]" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.Beim Festlegen von NULL wird die Standardoption verwendet. Dies kann 'None', 'Identity' oder 'Computed' sein, je nach Typ der Eigenschaft, deren Semantik im Modell (z. B.werden Primärschlüssel unterschiedlich behandelt) und den verwendeten Konventionen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft.Bei NULL werden Beschränkungen für die maximale Länge ggf. aus der Eigenschaft entfernt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>Konfiguriert eine feste Länge für die Eigenschaft.Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.<see cref="T:System.byte[]" />-Eigenschaften sind standardmäßig optional.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>Konfiguriert die Eigenschaft als Zeilenversion in der Datenbank.Der tatsächliche Datentyp ist abhängig vom verwendeten Datenbankanbieter.Durch Festlegen der Eigenschaft auf eine Zeilenversion wird die Eigenschaft automatisch als Token für vollständige Parallelität konfiguriert.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>Konfiguriert eine variable Länge für die Eigenschaft.<see cref="T:System.byte[]" />-Eigenschaften weisen standardmäßig eine variable Länge auf.</summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>Konfiguriert eine Beziehung zur Unterstützung der Weitergabe bei Löschfunktionen.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>Konfiguriert die Verwendung der Löschweitergabe für die Beziehung.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>Konfiguriert die Aktivierung bzw. Deaktivierung der Löschweitergabe für die Beziehung.</summary>
      <param name="value">Wert, der angibt, ob die Löschweitergabe aktiviert ist oder nicht.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>Ermöglicht das Registrieren von abgeleiteten Konfigurationsklassen für Entitäten und komplexe Typen mit einem <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>Fügt dem <see cref="T:System.Data.Entity.DbModelBuilder" /> eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> hinzu.Jedem Modell im Typ kann nur eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> hinzugefügt werden.</summary>
      <returns>Die gleiche ConfigurationRegistrar-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="complexTypeConfiguration">Die Konfiguration des komplexen Typs, die hinzugefügt werden soll.</param>
      <typeparam name="TComplexType">Der komplexe Typ, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>Fügt dem <see cref="T:System.Data.Entity.DbModelBuilder" /> eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> hinzu.Jedem Modell im Typ kann nur eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> hinzugefügt werden.</summary>
      <returns>Die gleiche ConfigurationRegistrar-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entityTypeConfiguration">Die Konfiguration des Entitätstyps, die hinzugefügt werden soll.</param>
      <typeparam name="TEntityType">Der Entitätstyp, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Ermittelt alle von <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> oder <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> geerbten Typen in der angegebenen Assembly und fügt eine Instanz jedes ermittelten Typs zur Registrierungsstelle hinzu.</summary>
      <returns>Die gleiche ConfigurationRegistrar-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="assembly">Die Assembly, die hinzuzufügende Modellkonfigurationen enthält.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>Erstellt eine Konvention zum Konfigurieren von gespeicherten Prozeduren, die zum Löschen von Entitäten in der Datenbank verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Instanz zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>Ruft den zugrunde liegenden Typ dieser Instanz ab.</summary>
      <returns>Der zugrunde liegende Typ dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Konfiguriert den Ausgabeparameter, der die von dieser gespeicherten Prozedur betroffenen Zeilen zurückgibt.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>Erstellt eine Konvention zum Konfigurieren von gespeicherten Prozeduren, die zum Einfügen von Entitäten in der Datenbank verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Ruft den Hashcode für die aktuelle Instanz ab.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>Ruft den Typ ab, der der Konfiguration zugeordnet ist.</summary>
      <returns>Der Typ, der der Konfiguration zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die das Ergebnis konfiguriert wird.</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die das Ergebnis konfiguriert wird.</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>Stellt eine Konvention zum Konfigurieren von gespeicherten Prozeduren dar, die zum Ändern von Entitäten in der Datenbank verwendet werden.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>Erstellt eine Konvention zum Konfigurieren von gespeicherten Prozeduren, die zum Ändern von Entitäten in der Datenbank verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Löschen von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob diese Konfiguration gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Konfiguration gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>Ruft den Hashcode ab, der dieser Konfiguration zugeordnet ist.</summary>
      <returns>Der Hashcode, der dieser Konfiguration zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Einfügen von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />-Klasse zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />-Klasse.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Aktualisieren von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>Stellt eine primitive Eigenschaft eines Entitätstyps oder eines komplexen Typs dar.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>Ruft die <see cref="T:System.Reflection.PropertyInfo" /> für diese Eigenschaft ab.</summary>
      <returns>Die <see cref="T:System.Reflection.PropertyInfo" /> für diese Eigenschaft.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem anderen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem anderen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>Ruft den Hashcode dieser Instanz ab.</summary>
      <returns>Der Hashcode dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="maxLength">Die maximale Länge für die Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Konfiguriert den Namen des Parameters, der in gespeicherten Prozeduren für diese Eigenschaft verwendet wird.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Konfiguriert die Genauigkeit der <see cref="T:System.DateTime" />-Eigenschaft.Wenn die Genauigkeit für den Datentyp der Spalte vom Datenbankanbieter nicht unterstützt wird, wird der Wert ignoriert.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Genauigkeit der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Konfiguriert die Genauigkeit und Skalierung der <see cref="T:System.Decimal" />-Eigenschaft.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="precision">Die Genauigkeit der Eigenschaft.</param>
      <param name="scale">Die Skalierung der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>Konfiguriert eine feste Länge für die Eigenschaft.Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>Konfiguriert diese Eigenschaft, sodass sie Teil des primären Schlüssels des Entitätstyps wird.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>Konfiguriert die Eigenschaft als Zeilenversion in der Datenbank.Der tatsächliche Datentyp ist abhängig vom verwendeten Datenbankanbieter.Durch Festlegen der Eigenschaft auf eine Zeilenversion wird die Eigenschaft automatisch als Token für vollständige Parallelität konfiguriert.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>Konfiguriert die Eigenschaft zur Unterstützung von Unicode-Zeichenfolgen.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>Gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="unicode">Dieser Wert gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>Konfiguriert eine variable Länge für die Eigenschaft.Die Eigenschaften weisen standardmäßig eine variable Länge auf.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>Ermöglicht das Anpassen von Konventionen, die von einer <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz verwendet werden.Die standardmäßigen Konventionen können im System.Data.Entity.ModelConfiguration.Conventions-Namespace gefunden werden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>Aktiviert eine Konvention für den <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TConvention">Der Typ der Konvention, der aktiviert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Aktiviert eine oder mehrere Konventionen für den <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Die Konventionen, die aktiviert werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Aktiviert eine Konvention für den <see cref="T:System.Data.Entity.DbModelBuilder" />.Diese Konvention wird nach der angegebenen ausgeführt.</summary>
      <param name="newConvention">Die Konvention, die aktiviert werden soll.</param>
      <typeparam name="TExistingConvention">Der Typ der Konvention, nach der die aktivierte ausgeführt wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Aktiviert eine Konfigurationskonvention für den <see cref="T:System.Data.Entity.DbModelBuilder" />.Diese Konvention wird vor der angegebenen ausgeführt.</summary>
      <param name="newConvention">Die Konvention, die aktiviert werden soll.</param>
      <typeparam name="TExistingConvention">Der Typ der Konvention, vor der die aktivierte ausgeführt wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Entdecken Sie alle Konventionen in der gegebenen Assembly und fügen Sie sie der <see cref="T:System.Data.Entity.DbModelBuilder" /> hinzu.</summary>
      <param name="assembly">Die Assembly, die hinzuzufügende Konventionen enthält.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Deaktiviert eine Konvention für den <see cref="T:System.Data.Entity.DbModelBuilder" />.Die standardmäßigen Konventionen, die zum Löschen verfügbar sind, können im System.Data.Entity.ModelConfiguration.Conventions-Namespace gefunden werden.</summary>
      <typeparam name="TConvention">Der Typ der Konvention, die aktiviert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Deaktiviert eine oder mehrere Konventionen für den <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Die Konventionen, die deaktiviert werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>Ermöglicht das Konfigurieren eines Entitätstyps in einem Modell.Diese Konfigurationsfunktionalität ist über einfache Konventionen verfügbar.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>Ruft den <see cref="T:System.Type" /> des Entitätstyps ab.</summary>
      <returns>Der <see cref="T:System.Type" /> des Entitätstyps.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>Konfiguriert den Namen der Entitätenmenge, die für diesen Entitätstyp verwendet werden soll.Der Name der Entitätenmenge kann nur für den Basistyp in der jeweiligen Menge konfiguriert werden.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>Konfiguriert die Eigenschaften des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyProperties">Die Eigenschaften, die als Primärschlüssel verwendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Konfiguriert die Eigenschaften des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyNames">Die Namen der Eigenschaften, die als Primärschlüssel verwendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>Konfiguriert die Eigenschaft des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, die als Primärschlüssel verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>Konfiguriert die Eigenschaft des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, die als Primärschlüssel verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Tabelle, der diese Entität zugeordnet ist.Der Wert der Anmerkung kann später bei der Verarbeitung der Tabelle verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>Schließt diesen Entitätstyp aus dem Modell aus, sodass dieser nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, die konfiguriert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, die konfiguriert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>Ändert diese Entität zu einem komplexen Typen.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.Die Standardkonventionen für Prozedur- und Parameternamen werden verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Konfiguration zum Überschreiben der Standardkonventionen für Prozedur- und Parameternamen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>Konfiguriert eine Eigenschaft, die für diesen Typ definiert ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyInfo">Die Eigenschaft, die konfiguriert wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>Konfiguriert eine Eigenschaft, die für diesen Typ definiert ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyName">Der Name der Eigenschaft, die konfiguriert wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
      <param name="schemaName">Das Datenbankschema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines Entitätstyps in einem Modell.Diese Konfigurationsfunktionalität ist über einfache Konventionen verfügbar.</summary>
      <typeparam name="T">Ein vom Entitätstyp geerbter Typ.</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>Ruft den <see cref="T:System.Type" /> des Entitätstyps ab.</summary>
      <returns>Der <see cref="T:System.Type" /> des Entitätstyps.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich der aktuellen Instanz ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode der aktuellen Instanz ab.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Konfiguriert den Namen der Entitätenmenge, die für diesen Entitätstyp verwendet werden soll.Der Name der Entitätenmenge kann nur für den Basistyp in der jeweiligen Menge konfiguriert werden.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entitySetName">Der Name der Entitätenmenge.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Eigenschaften des primären Schlüssels für diesen Entitätstyp.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als primärer Schlüssel verwendet werden soll.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Wenn der primäre Schlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) Neu mit { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">Der Typ des Schlüssels.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Tabelle, der diese Entität zugeordnet ist.Der Wert der Anmerkung kann später bei der Verarbeitung der Tabelle verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>Schließt diesen Entitätstyp aus dem Modell aus, sodass dieser nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, die ignoriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>Ändert diese Entität zu einem komplexen Typen.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.Die Standardkonventionen für Prozedur- und Parameternamen werden verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Konfiguriert diesen Typ, um gespeicherte Prozeduren zum Einfügen, Aktualisieren und Löschen zu verwenden.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Konfiguration zum Überschreiben der Standardkonventionen für Prozedur- und Parameternamen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert eine Eigenschaft, die für diesen Typ definiert ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>Konvertiert den Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
      <param name="schemaName">Das Datenbankschema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>Erstellt eine Konvention zum Konfigurieren von gespeicherten Prozeduren, die zum Aktualisieren von Entitäten in der Datenbank verwendet werden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich dem angegebenen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>Gibt den Typ zurück, der der aktuellen Instanz zugeordnet ist.</summary>
      <returns>Der der aktuellen Instanz zugeordnete Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die der Parameter konfiguriert wird.</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyInfo">Die Eigenschaft, für die das Ergebnis konfiguriert wird.</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyName">Der Name der Eigenschaft, für die das Ergebnis konfiguriert wird.</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Konfiguriert den Ausgabeparameter, der die von dieser gespeicherten Prozedur betroffenen Zeilen zurückgibt.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>Gibt die Zeichenfolgendarstellung für diese Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung für diese Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>Wird verwendet, um die <see cref="T:System.DateTime" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.Beim Festlegen von NULL wird die Standardoption verwendet. Dies kann 'None', 'Identity' oder 'Computed' sein, je nach Typ der Eigenschaft, deren Semantik im Modell (z. B.werden Primärschlüssel unterschiedlich behandelt) und den verwendeten Konventionen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Konfiguriert die Genauigkeit der Eigenschaft.Wenn die Genauigkeit für den Datentyp der Spalte vom Datenbankanbieter nicht unterstützt wird, wird der Wert ignoriert.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Genauigkeit der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.<see cref="T:System.DateTime" />-Eigenschaften sind standardmäßig erforderlich.</summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>Wird verwendet, um die <see cref="T:System.decimal" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.Beim Festlegen von NULL wird die Standardoption verwendet. Dies kann 'None', 'Identity' oder 'Computed' sein, je nach Typ der Eigenschaft, deren Semantik im Modell (z. B.werden Primärschlüssel unterschiedlich behandelt) und den verwendeten Konventionen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Konfiguriert die Genauigkeit und Skalierung der Eigenschaft.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="precision">Die Genauigkeit der Eigenschaft.</param>
      <param name="scale">Die Skalierung der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.<see cref="T:System.decimal" />-Eigenschaften sind standardmäßig erforderlich.</summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Löschen von Entitäten verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, der mit der gespeicherten Prozedur gelöscht werden kann.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, mit dem verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode der aktuellen Instanz ab.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der Typ der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Konfiguriert den Ausgabeparameter, der die von dieser gespeicherten Prozedur betroffenen Zeilen zurückgibt.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>Konvertiert den Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>Konfiguriert eine Beziehung, von der Fremdschlüsseleigenschaften unterstützt werden können, die im Objektmodell verfügbar gemacht werden.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TDependentEntityType">Der abhängige Entitätstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Beziehung zur Verwendung von Fremdschlüsseleigenschaften, die im Objektmodell verfügbar gemacht werden.Wenn die Fremdschlüsseleigenschaften nicht im Objektmodell verfügbar gemacht werden, muss die Map-Methode verwendet werden.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="foreignKeyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als Fremdschlüssel verwendet werden soll.Wenn der Fremdschlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Prinzipalentitätstyp konfiguriert wurden.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>Konfiguriert die Tabellen- und Spaltenzuordnung für einen Entitätstyp oder eine Teilmenge von Eigenschaften eines Entitätstyps.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Der Entitätstyp, der zugeordnet werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Tabelle, der diese Entität zugeordnet ist.Der Wert der Anmerkung kann später bei der Verarbeitung der Tabelle verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>Ordnet alle von Basistypen geerbten Eigenschaften neu zu.Beim Konfigurieren eines abgeleiteten Typs, der einer separaten Tabelle zugeordnet werden soll, werden alle Eigenschaften in die Tabelle eingeschlossen, nicht nur Eigenschaften, die nicht geerbt wurden.Dies wird auch als Tabelle pro konkreten Typ-Zuordnung (TPC) bezeichnet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Eigenschaften, die in diesem Mappingfragment enthalten sind.Wenn diese Methode nicht aufgerufen wird, werden alle Eigenschaften konfiguriert, die noch nicht in ein Mappingfragment eingeschlossen wurden.</summary>
      <param name="propertiesExpression">Ein Lambdaausdruck für einen anonymen Typ, der die zuzuordnenden Eigenschaften enthält.C#: t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) Neu mit { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">Ein anonymer Typ, der die zuzuordnenden Eigenschaften enthält.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.byte[]" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:DbGeography" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:DbGeometry" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.DateTime" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.DateTimeOffset" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.decimal" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.DateTime?" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.DateTimeOffset?" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.decimal?" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.TimeSpan?" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.struct?" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.string" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.TimeSpan" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Eigenschaft <see cref="T:System.struct" />, die in diesem Mappingfragment enthalten ist.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert die Unterscheidungsbedingung zur Differenzierung von Typen in einer Vererbungshierarchie.</summary>
      <returns>Ein Konfigurationsobjekt zum weiteren Konfigurieren der Unterscheidungsbedingung.</returns>
      <param name="property">Ein Lambdaausdruck, der die Eigenschaft zur Unterscheidung zwischen Typen darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, der für die Unterscheidung zwischen Typen verwendet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>Konfiguriert die Unterscheidungsspalte zur Differenzierung von Typen in einer Vererbungshierarchie.</summary>
      <returns>Ein Konfigurationsobjekt zum weiteren Konfigurieren der Unterscheidungsspalten und -werte.</returns>
      <param name="discriminator">Der Name der Unterscheidungsspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle für die Zuordnung.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen und das Schema der Tabelle für die Zuordnung.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Konfiguriert die Tabellen- und Spaltenzuordnung einer Beziehung, von der keine Fremdschlüsseleigenschaften im Objektmodell verfügbar gemacht werden.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="other">Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>Legt ein Anmerkung im Modell für eine Datenbankspalte fest, die mit <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" /> konfiguriert wurde.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche ForeignKeyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnName">Der Name der Spalte, die mit der HasKey-Methode konfiguriert wurde.</param>
      <param name="annotationName">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>Konfiguriert die Namen der Spalten für den Fremdschlüssel.</summary>
      <returns>Die gleiche ForeignKeyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames">Die Namen der Spalten für den Fremdschlüssel.Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, in der sich die Fremdschlüsselspalten befinden.Die angegebene Tabelle muss bereits über eine Zuordnung für den Entitätstyp verfügen.Wenn sich die Fremdschlüssel in einer eigenen Tabelle befinden sollen, muss mit der Map-Methode für <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> eine Entitätsaufteilung durchgeführt werden, um die Tabelle nur mit der Eigenschaft des primären Schlüssels zu erstellen.Fremdschlüssel können der Tabelle anschließend mit dieser Methode hinzugefügt werden.</summary>
      <returns>Die gleiche ForeignKeyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen und das Schema der Tabelle, in der sich die Fremdschlüsselspalten befinden.Die angegebene Tabelle muss bereits über eine Zuordnung für den Entitätstyp verfügen.Wenn sich die Fremdschlüssel in einer eigenen Tabelle befinden sollen, muss mit der Map-Methode für <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> eine Entitätsaufteilung durchgeführt werden, um die Tabelle nur mit der Eigenschaft des primären Schlüssels zu erstellen.Fremdschlüssel können der Tabelle anschließend mit dieser Methode hinzugefügt werden.</summary>
      <returns>Die gleiche ForeignKeyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Konfiguriert eine Beziehung, von der nur Fremdschlüsseleigenschaften unterstützt werden können, die nicht im Objektmodell verfügbar gemacht werden.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das mit der aktuellen-Instanz zu vergleichende Objekt. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Konfiguriert die Beziehung zur Verwendung von Fremdschlüsseleigenschaften, die nicht im Objektmodell verfügbar gemacht werden.Die Spalten und die Tabelle können durch Angeben einer Konfigurationsaktion angepasst werden.Wenn eine leere Konfigurationsaktion angegeben wird, werden die Spaltennamen gemäß Konvention generiert.Wenn Fremdschlüsseleigenschaften im Objektmodell verfügbar gemacht werden, muss die HasForeignKey-Methode verwendet werden.Das Verfügbarmachen von Fremdschlüsseleigenschaften im Objektmodell wird nicht von allen Beziehungen unterstützt.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="configurationAction">Aktion zum Konfigurieren der Fremdschlüsselspalten und der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>Stellt das Zulassen dar, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Einfügen von Entitäten verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, der mit der gespeicherten Prozedur eingefügt werden kann.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem bestimmten Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem bestimmten Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode für diese Instanz ab.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>Ruft den Typ dieser Instanz ab.</summary>
      <returns>Der Typ dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>Wird verwendet, um eine Spalte mit Längenfacets für einen Entitätstyp oder einen komplexen Typ zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Spalte für die angegebene maximale Länge.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für diese Spalte.Durch Festlegen dieses Werts auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Spalte entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Konfiguriert die Spalte für eine feste Länge.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>Konfiguriert die Spalte für die maximal zulässige und vom Datenbankanbieter unterstützte Länge.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>Konfiguriert die Spalte für eine variable Länge.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>Wird verwendet, um eine Eigenschaft mit Längenfacets für einen Entitätstyp oder einen komplexen Typ zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche LengthPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft.Durch Festlegen dieses Werts auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Eigenschaft entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>Konfiguriert eine feste Länge für die Eigenschaft.Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest.</summary>
      <returns>Die gleiche LengthPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft.</summary>
      <returns>Die gleiche LengthPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>Konfiguriert eine variable Länge für die Eigenschaft.Die Eigenschaften weisen standardmäßig eine variable Länge auf.</summary>
      <returns>Die gleiche LengthPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>Konfiguriert eine m:n-Beziehung von einem Entitätstyp.</summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>Konfiguriert die Beziehung als m:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Konfiguriert die Beziehung als m:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>Konfiguriert die Beziehung als m:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als m:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>Konfiguriert die Beziehung als m:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als m:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>Konfiguriert die Tabellen- und Spaltenzuordnung einer m:n-Beziehung.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="other">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Jointabelle.Der Wert der Anmerkung kann später bei der Verarbeitung der Tabelle verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>Konfiguriert die Namen der Spalten für den linken Fremdschlüssel.Der linke Fremdschlüssel zeigt auf die übergeordnete Entität der Navigationseigenschaft, die im HasMany-Aufruf angegeben wurde.</summary>
      <returns>Die gleiche ManyToManyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames">Die Namen der Spalten für den Fremdschlüssel.Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>Konfiguriert die Namen der Spalten für den rechten Fremdschlüssel.Der rechte Fremdschlüssel zeigt auf die übergeordnete Entität der Navigationseigenschaft, die im WithMany-Aufruf angegeben wurde.</summary>
      <returns>Die gleiche ManyToManyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames">Die Namen der Spalten für den Fremdschlüssel.Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Jointabelle für die Beziehung.</summary>
      <returns>Die gleiche ManyToManyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen und das Schema der Jointabelle für die Beziehung.</summary>
      <returns>Die gleiche ManyToManyAssociationMappingConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Ändern einer m:n-Beziehung verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, die für die Konfiguration der Beziehung verwendet wird.</typeparam>
      <typeparam name="TTargetEntityType">Der Typ der Entität, die das Ziel des anderen Endes der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>Ruft den Hashcode der aktuellen Instanz ab.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>Ruft den Typ dieser aktuellen Instanz ab.</summary>
      <returns>Der Typ dieser aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>Legt den Namen der gespeicherten Prozedur fest.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Name der Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>Legt den Namen der gespeicherten Prozedur fest.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Name der Prozedur.</param>
      <param name="schemaName">Der Name des Schemas.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert die Parameter für den linken Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert die Parameter für den linken Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert die Parameter für den linken Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert die Parameter für den linken Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>Konfiguriert die Parameter für den rechten Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert die Parameter für den rechten Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>Konfiguriert die Parameter für den rechten Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>Konfiguriert die Parameter für den rechten Schlüsselwert.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>Konvertiert den Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Ändern einer m:n-Beziehung verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, die für die Konfiguration der Beziehung verwendet wird.</typeparam>
      <typeparam name="TTargetEntityType">Der Typ der Entität, die das Ziel des anderen Endes der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Löschen von Beziehungen verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>Ruft den Hashcode der aktuellen Instanz ab.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Einfügen von Beziehungen verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>Konvertiert den Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>Konfiguriert eine m:n-Beziehung.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Der Typ der übergeordneten Entität der Navigationseigenschaft, die im HasMany-Aufruf angegeben wurde.</typeparam>
      <typeparam name="TTargetEntityType">Der Typ der übergeordneten Entität der Navigationseigenschaft, die im WithMany-Aufruf angegeben wurde.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>Konfiguriert die Fremdschlüsselspalten und die Tabelle, in denen die Beziehung gespeichert wird.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="configurationAction">Aktion zum Konfigurieren der Fremdschlüsselspalten und der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>Konfiguriert die gespeicherten Prozeduren, die zum Ändern dieser Beziehung verwendet werden sollen.Die Standardkonventionen für Prozedur- und Parameternamen werden verwendet.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>Konfiguriert die gespeicherten Prozeduren, die zum Ändern dieser Beziehung verwendet werden sollen.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Konfiguration zum Überschreiben der Standardkonventionen für Prozedur- und Parameternamen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>Führt die Konfiguration einer gespeicherten Prozedur aus, die zum Ändern einer Entität in der Datenbank verwendet wird.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Ändern von Entitäten verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, der mit der gespeicherten Prozedur geändert werden kann.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Löschen von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem angegebenen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode für diese Instanz ab.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Einfügen von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>Konfiguriert die gespeicherte Prozedur, die zum Aktualisieren von Entitäten verwendet wird.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration der gespeicherten Prozedur ausführt.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>Konfiguriert eine Bedingung zur Unterscheidung zwischen Typen in einer Vererbungshierarchie anhand von einer Eigenschaft zugewiesenen Werten.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>Konfiguriert die Bedingung für die Verwendung eines Werts in der Eigenschaft.Zeilen, denen kein Wert für Spalten zugewiesen wurde, in denen diese Eigenschaft gespeichert wird, werden als Basistyp für diesen Entitätstyp behandelt.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Konfiguriert eine optionale Beziehung von einem Entitätstyp.</summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>Konfiguriert die Beziehung als optional:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Konfiguriert die Beziehung als optional:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>Konfiguriert die Beziehung als optional:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als optional:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>Konfiguriert die Beziehung als optional:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als optional:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Konfiguriert die Beziehung als optional:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als optional:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Konfiguriert eine primitive Spalte von einem Entitätstyp.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der primitiven Spalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der primitiven Spalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Konfiguriert die primitive Spalte als optional.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Konfiguriert die primitive Spalte als erforderlich.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>Stellt Methoden bereit, die zum Konfigurieren einer primitiven Eigenschaft eines Entitätstyps oder eines komplexen Typs verwendet werden.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich dem angegebenen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.Beim Festlegen von NULL wird die Standardoption verwendet. Dies kann 'None', 'Identity' oder 'Computed' sein, je nach Typ der Eigenschaft, deren Semantik im Modell (z. B.werden Primärschlüssel unterschiedlich behandelt) und den verwendeten Konventionen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Konfiguriert den Namen des Parameters, der in gespeicherten Prozeduren für diese Eigenschaft verwendet wird.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert, der angibt, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.</summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>Lässt zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Eigenschaften in einem Modell basiert.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>Lässt die Konfiguration der Eigenschaften zu, für die diese Konvention gilt.</summary>
      <param name="propertyConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> durchgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>Filtert die Eigenschaften, für die diese Konvention basierend auf einem Prädikat gilt, und erfasst gleichzeitig einen Wert, der im weiteren Verlauf der Konfiguration verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="capturingPredicate">Eine Funktion zum Erfassen eines Werts für jede Eigenschaft.Wenn der Wert NULL ist, wird die Eigenschaft herausgefiltert.</param>
      <typeparam name="T">Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>Filtert die Eigenschaften, für die diese Konvention basierend auf einem Prädikat gilt.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="predicate">Eine Funktion zum Überprüfen jeder Eigenschaft für eine Bedingung.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Eigenschaften von Entitätstypen in einem Modell und einem erfassten Wert basiert.</summary>
      <typeparam name="T">Der Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>Lässt die Konfiguration der Eigenschaften zu, für die diese Konvention gilt.</summary>
      <param name="propertyConfigurationAction">Eine Aktion, die eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> mit einem erfassten Wert ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>Wird für die Konfiguration einer Eigenschaft in einem Mappingfragment verwendet.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Dieselbe PropertyMappingConfiguration-Instanz, um die Verkettung mehrerer Aufrufe zu ermöglichen.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll, in einem Zuordnungsfragment.</summary>
      <returns>Dieselbe PropertyMappingConfiguration-Instanz, um die Verkettung mehrerer Aufrufe zu ermöglichen.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>Konfiguriert eine erforderliche Beziehung von einem Entitätstyp.</summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Gibt an, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Ruft den Hashcode ab, der dem aktuellen Objekt zugeordnet ist.</summary>
      <returns>Der Hashcode, der dem aktuellen Objekt zugeordnet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des aktuellen Objekts zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>Konfiguriert die Beziehung als erforderlich:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Konfiguriert die Beziehung als erforderlich:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>Konfiguriert die Beziehung als erforderlich:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als erforderlich:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung.Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>Konfiguriert eine Datenbankspalte zum Speichern von Zeichenfolgenwerten.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft.Durch Festlegen auf NULL wird eine Standardlänge für die Spalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>Konfiguriert die Spalte für eine feste Länge.Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>Konfiguriert die Spalte für die maximal zulässige und vom Datenbankanbieter unterstützte Länge.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>Konfiguriert die Spalte als optional.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>Konfiguriert die Spalte als erforderlich.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Konfiguriert die Unterstützung von Unicode-Zeichenfolgen durch die Spalte.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob Unicode-Zeichenfolgen von der Spalte unterstützt werden.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="unicode">Dieser Wert gibt an, ob Unicode-Zeichenfolgen von der Spalte unterstützt werden.Bei "null" wird das Unicode-Facet aus der Spalte entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>Konfiguriert die Spalte für eine variable Länge.Spalten weisen standardmäßig eine variable Länge auf.</summary>
      <returns>Die gleiche StringColumnConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Wird verwendet, um die <see cref="T:System.string" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Setzt eine Anmerkung im Modell für die Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Der Wert der Anmerkung kann später bei der Verarbeitung der Spalte verwendet werden, z. B. bei der Erstellung von Migrationen.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="name">Der Anmerkungsname muss ein gültiger C#/EDM-Bezeichner sein.</param>
      <param name="value">Der Anmerkungswert. Dies kann eine Zeichenkette oder ein sonstiger per <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> serialisierbarer Typ sein.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.Beim Festlegen von NULL wird die Standardoption verwendet. Dies kann 'None', 'Identity' oder 'Computed' sein, je nach Typ der Eigenschaft, deren Semantik im Modell (z. B.werden Primärschlüssel unterschiedlich behandelt) und den verwendeten Konventionen.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft.Durch Festlegen dieses Werts auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Eigenschaft entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken">Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird.Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Konfiguriert eine feste Länge für die Eigenschaft.Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten.<see cref="T:System.string" />-Eigenschaften sind standardmäßig optional.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>Konfiguriert die Eigenschaft als erforderlich.Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Konfiguriert die Eigenschaft zur Unterstützung von Unicode-Zeichenfolgen.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="unicode">Dieser Wert gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden.Bei NULL wird das Unicode-Facet aus der Eigenschaft entfernt.Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Konfiguriert eine variable Länge für die Eigenschaft.<see cref="T:System.string" />-Eigenschaften weisen standardmäßig eine variable Länge auf.</summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines Typs in einem Modell.</summary>
      <typeparam name="TStructuralType">Der zu konfigurierende Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Konfiguriert eine <see cref="T:System.byte[]" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Konfiguriert eine <see cref="T:DbGeography" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Konfiguriert eine <see cref="T:DbGeometry" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Konfiguriert eine <see cref="T:System.DateTime" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Konfiguriert eine <see cref="T:System.DateTimeOffset" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Konfiguriert eine <see cref="T:System.decimal" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Konfiguriert eine <see cref="T:System.DateTime?" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Konfiguriert eine <see cref="T:System.DateTimeOffset?" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Konfiguriert eine <see cref="T:System.decimal?" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Konfiguriert eine <see cref="T:System.TimeSpan?" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Konfiguriert eine <see cref="T:System.struct?" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Konfiguriert eine <see cref="T:System.string" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Konfiguriert eine <see cref="T:System.TimeSpan" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Konfiguriert eine <see cref="T:System.struct" />-Eigenschaft, die für diesen Typ definiert wird.</summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>Lässt zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Entitätstypen in einem Modell basiert.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>Lässt die Konfiguration der Entitätstypen zu, für die diese Konvention gilt.</summary>
      <param name="entityConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> durchgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>Ruft den Hashcode für diese Instanz ab.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>Filtert die Entitätstypen, für die diese Konvention basierend auf einem Prädikat gilt, und erfasst gleichzeitig einen Wert, der im weiteren Verlauf der Konfiguration verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="capturingPredicate">Eine Funktion zum Erfassen eines Werts für jeden Entitätstyp.Wenn der Wert NULL ist, wird der Entitätstyp herausgefiltert.</param>
      <typeparam name="T">Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtert die Entitätstypen, für die diese Konvention basierend auf einem Prädikat gilt.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="predicate">Eine Funktion zum Überprüfen jedes einzelnen Entitätstyps für eine Bedingung.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>Lässt es zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Entitätstypen in einem Modell basiert, die von einem allgemeinen angegebenen Typ geerbt werden.</summary>
      <typeparam name="T">Der allgemeine Typ der Entitätstypen, für den diese Konvention gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>Lässt die Konfiguration der Entitätstypen zu, für die diese Konvention gilt.</summary>
      <param name="entityConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> durchgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode für diese Instanz ab.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>Filtert die Entitätstypen, für die diese Konvention basierend auf einem Prädikat gilt, und erfasst gleichzeitig einen Wert, der im weiteren Verlauf der Konfiguration verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="capturingPredicate">Eine Funktion zum Erfassen eines Werts für jeden Entitätstyp.Wenn der Wert NULL ist, wird der Entitätstyp herausgefiltert.</param>
      <typeparam name="TValue">Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtert die Entitätstypen, für die diese Konvention basierend auf einem Prädikat gilt.</summary>
      <returns>Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="predicate">Eine Funktion zum Überprüfen jedes einzelnen Entitätstyps für eine Bedingung.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Entitätstypen in einem Modell und einem erfassten Wert basiert.</summary>
      <typeparam name="T">Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>Lässt die Konfiguration der Entitätstypen zu, für die diese Konvention gilt.</summary>
      <param name="entityConfigurationAction">Eine Aktion, die eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> mit einem erfassten Wert ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, mit dem verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode der aktuellen Instanz ab.</summary>
      <returns>Der Hashcode der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>Konvertiert einen Wert der aktuellen Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>Lässt es zu, dass die Konfiguration für eine einfache Konvention ausgeführt wird, die auf den Entitätstypen in einem Modell basiert, die von einem allgemeinen angegebenen Typ und einem erfassten Wert geerbt werden.</summary>
      <typeparam name="T">Der allgemeine Typ der Entitätstypen, für den diese Konvention gilt.</typeparam>
      <typeparam name="TValue">Typ des erfassten Werts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>Lässt die Konfiguration der Entitätstypen zu, für die diese Konvention gilt.</summary>
      <param name="entityConfigurationAction">Eine Aktion, die eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> mit einem erfassten Wert ausführt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>Gibt an, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>true, wenn diese Instanz gleich einem angegebenen Objekt ist; andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>Ruft den Hashcode für diese Instanz ab.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung dieser Instanz zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>Lässt zu, dass die Konfiguration für eine gespeicherte Prozedur ausgeführt wird, die zum Aktualisieren von Entitäten verwendet wird.</summary>
      <typeparam name="TEntityType">Der Typ der Entität, der mit der gespeicherten Prozedur aktualisiert werden kann.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich diesem Instanzobjekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich diesem Instanzobjekt ist, andernfalls false.</returns>
      <param name="obj">Das zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Ruft den Hashcode ab.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>Ruft den Typ dieser Konfiguration ab.</summary>
      <returns>Der Typ dieser Konfiguration.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Konfiguriert den Namen der gespeicherten Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="procedureName">Der Name der gespeicherten Prozedur.</param>
      <param name="schemaName">Der Schemaname.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Konfiguriert Parameter für eine Beziehung, in der die Fremdschlüsseleigenschaft nicht in der Klasse eingeschlossen ist.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="navigationPropertyExpression">Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Ein Lambdaausdruck, der die Konfiguration ausführt.</param>
      <typeparam name="TPrincipalEntityType">Der Typ der Prinzipalentität in der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Der Name des Parameters.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>Konfiguriert einen Parameter für diese gespeicherte Prozedur.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die der Parameter konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Der aktuelle Wertparametername.</param>
      <param name="originalValueParameterName">Der ursprüngliche Wertparametername.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Konfiguriert eine Ergebnisspalte für diese gespeicherte Prozedur für die Zuordnung zu einer Eigenschaft.Wird für datenbankgenerierte Spalten verwendet.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, für die das Ergebnis konfiguriert wird.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Der Name der Ergebnisspalte.</param>
      <typeparam name="TProperty">Der Typ der zu konfigurierenden Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Konfiguriert den Ausgabeparameter, der die von dieser gespeicherten Prozedur betroffenen Zeilen zurückgibt.</summary>
      <returns>Die gleiche Konfigurationsinstanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="parameterName">Der Name des Parameters.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>Konvertiert den Wert dieser Instanz in die entsprechende Zeichenfolgendarstellung.</summary>
      <returns>Eine Zeichenfolgendarstellung des Wertes dieser Instanz.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>Konfiguriert eine Unterscheidungsspalte zur Differenzierung von Typen in einer Vererbungshierarchie.Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Ruft den <see cref="T:System.Type" /> der aktuellen Instanz ab.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps.</summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
      <typeparam name="T">Der Typ des Unterscheidungswerts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps.</summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps.</summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
      <typeparam name="T">Der Typ des Unterscheidungswerts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Stellt eine Konvention zur Erkennung von Navigationseigenschaften als Gegenstücke voneinander bereit, wenn nur ein Paar von Navigationseigenschaften zwischen den verwandten Typen vorhanden ist.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>Eine Mehrzweckklasse für Code First-Konventionen, die Attribute aus .NET-Eigenschaften liest und auf deren Basis Column-Anmerkungen erzeugt.</summary>
      <typeparam name="TAttribute">Der Attributtyp, der gesucht werden soll.</typeparam>
      <typeparam name="TAnnotation">Der Anmerkungstyp, der erstellt werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>Erzeugt eine Konvention, die Column-Anmerkungen mit dem angegebenen Namen und Factory-Delegat erstellt.</summary>
      <param name="annotationName">Der Name der zu erstellenden Anmerkungen.</param>
      <param name="annotationFactory">Eine Factory zur Erstellung von Anmerkungen für die einzelnen Spalten.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>Eine Mehrzweckklasse für Code First-Konventionen, die Attribute aus .NET-Typen liest und auf deren Basis Tabellenanmerkungen erzeugt.</summary>
      <typeparam name="TAttribute">Der Attributtyp, der gesucht werden soll.</typeparam>
      <typeparam name="TAnnotation">Der Anmerkungstyp, der erstellt werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>Erzeugt eine Konvention, die Tabellenanmerkungen mit dem angegebenen Namen und Factory-Delegat erstellt.</summary>
      <param name="annotationName">Der Name der zu erstellenden Anmerkungen.</param>
      <param name="annotationFactory">Eine Factory zur Erstellung von Anmerkungen für die einzelnen Tabellen.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>Wendet die Konvention auf die angegebene Konfiguration an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Spaltenattribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>Stellt eine Konvention zum Anwenden der Spaltensortierung dar, die durch die Verwendung des <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> oder der <see cref="T:System.Data.Entity.DbModelBuilder" />-API angegeben wird.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet Konfiguration auf das angegebene Element im Zuordnungsmodell an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Überprüft die für die Spalten bereitgestellte Sortierungskonfiguration.Diese Basisimplementierung führt keine Aktion aus.</summary>
      <param name="table">Der Name der Tabelle, der die Spalten angehören.</param>
      <param name="tableName">Die Definition der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>Konvention zum Anwenden der Spaltensortierung, die durch die Verwendung des <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> oder der <see cref="T:System.Data.Entity.DbModelBuilder" />-API angegeben wird.Diese Konvention wird ausgelöst, wenn eine doppelt konfigurierte Spaltenreihenfolge erkannt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Überprüft die für die Spalten bereitgestellte Sortierungskonfiguration, um sicherzustellen, dass nicht dieselbe Ordnungszahl für zwei Spalten angegeben ist.</summary>
      <param name="table">Der Name der Tabelle, der die Spalten angehören.</param>
      <param name="tableName">Die Definition der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Stellt die Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" />-Instanzen für Typen des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>Wendet die Konvention mit der angegebenen Konfiguration und dem Attribut an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Stellt eine Konvention zum Konfigurieren eines Typs als komplexer Typ dar, wenn kein primärer Schlüssel, kein zugeordneter Basistyp und keine Navigationseigenschaften vorhanden sind.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet Konfiguration auf das angegebene Element im Zuordnungsmodell an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Stellt die Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="configuration">Die Konfiguration für die Eigenschaft, die das Attribut enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>Eine Konvention, welche die Konfiguration nicht überschreibt.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>Die abgeleitete Klasse kann den Standardkonstruktor verwenden, um eine festgelegte Regel zur Änderung der Modellkonfiguration anzuwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle Eigenschaften im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle primitiven Eigenschaften des angegebenen Typs im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
      <typeparam name="T">Der Typ der Eigenschaften, für den die Konvention gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle zugeordneten Typen im Modell gilt, die vom angegebenen Typen abgeleitet sind oder diesen implementieren.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
      <typeparam name="T">Der Typ der Entitäten, für den diese Konvention gilt.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>Startet die Konfiguration einer einfachen Konvention, die für alle zugeordneten Typen im Modell gilt.</summary>
      <returns>Ein Konfigurationsobjekt für die Konvention.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>Wendet die Konvention auf das Attribut mit der gegebenen Konfiguration an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Konvention für Dezimaleigenschaften zum Festlegen der Genauigkeit auf 18 und der Skalierung auf 2.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> mit den Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> mit der angegebenen Genauigkeit und Dezimalstellenanzahl.</summary>
      <param name="precision">Genauigkeit</param>
      <param name="scale">Dezimalstellenanzahl</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Stellt eine Konvention zum Verschieben von Primärschlüsseleigenschaften an die erste Stelle dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Stellt eine Konvention zur Unterscheidung zwischen optionalen und erforderlichen Beziehungen auf Grundlage Zulässigkeit von NULL-Werten der CLR in der Fremdschlüsseleigenschaft dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet Konfiguration auf das angegebene Element im Zuordnungsmodell an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>Stellt eine Basisklasse für Konventionen dar, die Fremdschlüsseleigenschaften erkennen.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Gibt, wenn überschrieben, true zurück, wenn <paramref name="dependentProperty" /> Teil des Fremdschlüssels sein sollte.</summary>
      <returns>true, wenn dependentProperty Teil des Fremdschlüssels sein soll, andernfalls false.</returns>
      <param name="associationType">Der Zuordnungstyp, der konfiguriert wird.</param>
      <param name="dependentAssociationEnd">Das abhängige Ende.</param>
      <param name="dependentProperty">Die mögliche Eigenschaft am abhängigen Ende.</param>
      <param name="principalEntityType">Der Entitätstyp des Prinzipalendes.</param>
      <param name="principalKeyProperty">Eine wichtige Eigenschaft am Prinzipalende, die ein mögliches Ziel für den Fremdschlüssel darstellt.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Ruft ab, ob die Konvention Entitätstypenpaare unterstützt, für die mehrere Zuordnungen definiert sind.</summary>
      <returns>Gibt true zurück, wenn die Konvention Entitätstypenpaare unterstützt, für die mehrere Zuordnungen definiert sind, andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>Stellt eine Konvention zum Einführen von Indizes für Fremdschlüssel dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="item">Das Element.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />-Instanzen in Navigationseigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Datenbankmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />-Instanzen in Fremdschlüsseleigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>Wendet die Konfiguration auf das angegebene Attribut an.</summary>
      <param name="memberInfo">Die Eigenschaftsinformationen.</param>
      <param name="configuration">Das Konfigurieren eines Entitätstyps in einem Modell.</param>
      <param name="attribute">Die aus der Datenbankzuordnung ausgeschlossene Eigenschaft oder Klasse.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>Eine Konvention, die nach der Erstellung des Modells auf dessen konzeptionellen Bereich ausgeführt wird.</summary>
      <typeparam name="T">Der Typ von Metadatenelement, auf dem diese Konvention ausgeführt wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifiziert Konventionen, die einer <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz hinzugefügt oder aus ihr entfernt werden können.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Primärschlüsseleigenschaften.Bei der Erkennung von Benennungsschemata gilt folgende Rangfolge: 1. 'ID' 2.[type name]Id Bei der Erkennung von Primärschlüsseln wird zwischen Groß- und Kleinschreibung unterschieden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Konvention, um der <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />-Klasse zu entsprechen.</summary>
      <returns>Die <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />-Klasse für die Übereinstimmung.</returns>
      <param name="entityType">Der Entitätstyp.</param>
      <param name="primitiveProperties">Die Auflistung der primitiven Eigenschaften.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>Eine Konvention für die Ermittlung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" />-Attributen in Eigenschaften und die Erzeugung von <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />-Column-Anmerkungen im Modell</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>Erstellt eine neue Instanz der Konvention.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>Wendet die Konvention auf das angegebene Attribut mit Konfiguration an.</summary>
      <param name="memberInfo">Die Memberinformationen.</param>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>Eine Konvention, die nach der Erstellung des Modells auf dessen Datenbankbereich ausgeführt wird.</summary>
      <typeparam name="T">Der Typ von Metadatenelement, auf dem diese Konvention ausgeführt wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />-Instanzen in Eigenschaften des Modells.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>Stellt eine Basisklasse für Konventionen dar, die Primärschlüsseleigenschaften erkennen.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Gibt, wenn überschrieben, die Teilmenge der Eigenschaften zurück, die Teil des Primärschlüssels wird.</summary>
      <returns>Die Eigenschaften, die Teil des Primärschlüssels sein sollten.</returns>
      <param name="entityType">Der Entitätstyp.</param>
      <param name="primitiveProperties">Die primitiven Typen der Entitäten.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Konvention zum Hinzufügen einer Löschweitergabe zur Jointabelle aus beiden Tabellen einer m:n-Beziehung.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Konvention, die sicherstellt, dass beim Zuordnen geerbter Eigenschaften keine ungültigen/nicht unterstützten Zuordnungen erstellt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>Wendet die Konvention auf das Attribut mit der angegebenen Konfiguration an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Name aus dem Namen der abhängigen Navigationseigenschaft und dem bzw. den Namen der Eigenschaften des primären Schlüssels für den Prinzipaltyp zusammengesetzt ist.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Gleicht den Schlüssel des abhängigen Entitätsmodells ab.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
      <param name="associationType">Das Zuordnungstyp-Metadatenobjekt.</param>
      <param name="dependentAssociationEnd">Das Ende der abhängigen Zuordnung.</param>
      <param name="dependentProperty">Die abhängige Eigenschaft.</param>
      <param name="principalEntityType">Der Prinzipalentitätstyp.</param>
      <param name="principalKeyProperty">Die Prinzipalschlüsseleigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Ruft einen Wert ab, der angibt, ob die Konvention mehrere Zuordnungen unterstützt, oder legt ihn fest.</summary>
      <returns>true, wenn die Konvention mehrere Zuordnungen unterstützt; andernfalls false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Wendet die Konfiguration auf das angegebene Attribut an.</summary>
      <param name="memberInfo">Die Eigenschaftsinformationen.</param>
      <param name="configuration">Das Konfigurieren eines Entitätstyps in einem Modell.</param>
      <param name="attribute">Die aus der Datenbankzuordnung ausgeschlossene Eigenschaft oder Klasse.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />-Instanzen für Typen des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Wendet die Konfiguration auf das angegebene Attribut an.</summary>
      <param name="configuration">Das Konfigurieren eines Entitätstyps in einem Modell.</param>
      <param name="attribute">Die aus der Datenbankzuordnung ausgeschlossene Eigenschaft oder Klasse.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Stellt eine Konvention zum Aktivieren der Löschweitergabe für erforderliche Beziehungen bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Datenbankmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Stellt eine Konvention zum Konfigurieren der primären Schlüssel des abhängigen Entitätstyps als Fremdschlüssel in einer 1:1-Beziehung bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Datenbankmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Stellt eine Konvention zum Festlegen des Namens der Entitätenmenge auf eine pluralisierte Version des Namens des Entitätstyps dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="item">Die Entitätenmenge.</param>
      <param name="model">Das Datenbankmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Stellt eine Konvention zum Festlegen des Tabellennamens der Entitätsmenge auf eine pluralisierte Version des Namens des Entitätstyps dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet diese Konvention auf ein Element im Modell an.</summary>
      <param name="item">Das Element, auf das die Konvention angewendet werden soll.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Namen mit dem bzw. Eigenschaftennamen des primären Schlüssels für den Prinzipaltyp übereinstimmen.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Entspricht der abhängigen Schlüsseleigenschaft ab, die der Konvention zugeordnet ist.</summary>
      <returns>Die abgeglichene abhängige Schlüsseleigenschaft.</returns>
      <param name="associationType">Der Zuordnungstyp.</param>
      <param name="dependentAssociationEnd">Das Ende der abhängigen Zuordnung.</param>
      <param name="dependentProperty">Die abhängige Eigenschaft.</param>
      <param name="principalEntityType">Der Prinzipalentitätstyp.</param>
      <param name="principalKeyProperty">Die Prinzipalschlüsseleigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>Die Basisklasse für Konventionen, die CLR-Attribute verarbeiten, die in primitiven Eigenschaften im Modell gefunden wurden.</summary>
      <typeparam name="TAttribute">Der zu suchende Attributstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>Führt diese Konvention auf eine Eigenschaft aus, die über ein Attribut vom Typ TAttribute verfügt.</summary>
      <param name="configuration">Die Konfiguration für die Eigenschaft, die das Attribut enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>Die Basisklasse für Konventionen, die CLR-Attribute verarbeiten, die in Eigenschaften von Typen im Modell gefunden wurden.</summary>
      <typeparam name="TAttribute">Der zu suchende Attributstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Führt diese Konvention auf eine Eigenschaft aus, die über ein Attribut vom Typ TAttribute verfügt.</summary>
      <param name="memberInfo">Die Memberinformationen für die Eigenschaft, die das Attribut enthält.</param>
      <param name="configuration">Die Konfiguration für die Klasse, welche die Eigenschaft enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Stellt eine Konvention zum Festlegen einer maximalen Länge für Eigenschaften dar, deren Typ Längenfacets unterstützt.Der Standardwert ist 128.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> mit der Standardlänge.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> mit der angegebenen Länge.</summary>
      <param name="length">Die maximale Eigenschaftenlänge.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention mit der angegebenen Modellkonfiguration an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention mit der angegebenen Modellkonfiguration an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention mit der angegebenen Modellkonfiguration an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />-Instanzen in Navigationseigenschaften des Modells.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />-Instanzen in primitiven Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Wendet die Konvention auf das Attribut mit der gegebenen Konfiguration an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Stellt eine Konvention dar, um eine maximale Standardlänge von 4000 für Eigenschaften festzulegen, deren Typ Längenfacets unterstützt, wenn SqlCE als Anbieter fungiert.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> mit der Standardlänge.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> mit der angegebenen Länge.</summary>
      <param name="length">Der Standardwert für die maximale Länge von Eigenschaften.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention auf den angegebenen Anbieter an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet die Konvention auf den angegebenen Anbieter an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Modell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Stellt eine Konvention zum Konfigurieren von Primärschlüsseln ganzer Zahlen als Identität dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Wendet Konfiguration auf das angegebene Element im Zuordnungsmodell an.</summary>
      <param name="item">Das Element.</param>
      <param name="model">Das Zuordnungsmodell.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Wendet die Konvention mit der angegebenen Konfiguration und dem Attribut an.</summary>
      <param name="configuration">Die Konfiguration.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" />-Instanzen für Typen des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="configuration">Die Konfiguration für die Eigenschaft, die das Attribut enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Stellt eine Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />-Instanzen für Eigenschaften des Modells dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>Wendet diese Konvention auf eine Eigenschaft an.</summary>
      <param name="configuration">Die Konfiguration für die Eigenschaft, die das Attribut enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>Basisklasse für Konventionen, die CLR-Attribute verarbeiten, die im Modell gefunden wurden.</summary>
      <typeparam name="TAttribute">Der zu suchende Attributstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Führt diese Konvention auf eine Klasse aus, die über ein Attribut vom Typ TAttribute verfügt.</summary>
      <param name="configuration">Die Konfiguration für die Klasse, welche die Eigenschaft enthält.</param>
      <param name="attribute">Das Attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Name aus dem Namen des Prinzipaltyps und dem bzw. den Namen der Eigenschaften des primären Schlüssels für den Prinzipaltyp zusammengesetzt ist.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Bestimmt, ob die Eigenschaft des abhängigen Schlüssels dem aktuellen Schlüssel entspricht.</summary>
      <returns>true, wenn die Eigenschaft des abhängigen Schlüssels dem aktuellen Schlüssel entspricht; andernfalls false.</returns>
      <param name="associationType">Der Zuordnungstyp.</param>
      <param name="dependentAssociationEnd">Die abhängige Zuordnung am Ende.</param>
      <param name="dependentProperty">Die abhängige Eigenschaft.</param>
      <param name="principalEntityType">Der Prinzipalentitätstyp.</param>
      <param name="principalKeyProperty">Die Prinzipalschlüsseleigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>Stellt Daten in einem geodätischen (runde Erde) Koordinatensystem dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>Ruft einen doppelten Wert ab, der NULL-Werte zulässt und der den Bereich dieses angegebenen DbGeography-Werts angibt, der möglicherweise NULL ist, wenn dieser Wert keine Oberfläche darstellt.</summary>
      <returns>Ein doppelter Wert, der NULL-Werte zulässt und der den Bereich dieses DbGeography-Werts angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>Generiert die bekannte binäre Darstellung dieses DbGeography-Werts.</summary>
      <returns>Die bekannte binäre Darstellung dieses DbGeography-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>Generiert die Darstellung dieses DbGeography-Werts in der GML (Geography Markup Language).</summary>
      <returns>Eine Zeichenfolge, die die GML-Darstellung dieses DbGeography-Werts enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>Generiert die bekannte Textdarstellung dieses DbGeography-Werts.Schließt nur Breite und Länge für Punkte ein.</summary>
      <returns>Eine Zeichenfolge, die die bekannte Textdarstellung dieses DbGeography-Werts enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>Gibt ein Geografieobjekt zurück, das die Gesamtmenge aller Punkte darstellt, deren Abstand zu einer Geografieinstanz kleiner oder gleich einem angegebenen Wert ist.</summary>
      <returns>Ein Geografieobjekt, das die Gesamtmenge aller Punkte darstellt.</returns>
      <param name="distance">Der Abstand.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>Ruft den Bezeichner ab, der dem Koordinatensystem zugeordnet ist.</summary>
      <returns>Der Bezeichner, der dem Koordinatensystem zugeordnet ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>Ruft die ID des Standardkoordinatensystems (SRID) für Geografiewerte (WGS 84) ab.</summary>
      <returns>Die ID des Standardkoordinatensystems (SRID) für Geografiewerte (WGS 84).</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Differenz zwischen diesem DbGeography-Wert und einem anderen DbGeography-Wert.</summary>
      <returns>Ein neuer DbGeography-Wert, der den Unterschied zwischen diesem Geografiewert und other darstellt.</returns>
      <param name="other">Der Geografiewert, für den die Differenz zu diesem Wert berechnet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>Ruft die Dimension des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts ab, oder die größte Elementdimension, wenn der Wert eine Auflistung ist.</summary>
      <returns>Die Dimension des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob dieses DbGeography vom angegebenen DbGeography-Argument räumlich disjunkt ist.</summary>
      <returns>True, wenn other von diesem Geografiewert disjunkt ist; andernfalls false.</returns>
      <param name="other">Der Geografiewert, der mit diesem Geografiewert auf Disjunktheit verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet den Abstand zwischen den nächsten Punkten in diesem DbGeography-Wert und in einem anderen DbGeography-Wert.</summary>
      <returns>Ein double-Wert, der den Abstand zwischen den beiden nächsten Punkten in diesem Geografiewert und other angibt.</returns>
      <param name="other">Der Geografiewert, für den die Entfernung zu diesem Wert berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>Gibt ein Element dieses DbGeography-Werts von einer bestimmten Position zurück, wenn er eine Geografiesammlung darstellt.&amp;amp;lt;param name="index"&amp;amp;gt;Die Position in diesem Geografiewert, an der das Element abgerufen werden soll.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;Das Element in diesem Geografiewert an der angegebenen Position, wenn es eine Auflistung von anderen Geografiewerten darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Ein Element dieses DbGeography-Werts von einer bestimmten Position.</returns>
      <param name="index">Der Index.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>Ruft die Anzahl der Elemente in diesem DbGeography-Wert ab, wenn er eine Geografieauflistung darstellt.&amp;amp;lt;returns&amp;amp;gt;Die Anzahl der Elemente in diesem Geografiewert, wenn er eine Auflistung von anderen Geografiewerten darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die Anzahl der Elemente in diesem DbGeography-Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>Ruft die Höhe (Z-Koordinate) dieses DbGeography-Werts ab, wenn er einen Punkt darstellt.&amp;amp;lt;returns&amp;amp;gt;Der Höhenwert (Z-Koordinate) dieses Geografiewerts, wenn er einen Punkt darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die Höhe (Z-Koordinate) dieses DbGeography-Werts.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>Ruft einen DbGeography-Wert ab, der den Anfangspunkt des Werts darstellt. Der kann möglicherweise NULL sein, wenn dieser DbGeography-Wert keine Kurve darstellt.</summary>
      <returns>Ein DbGeography-Wert, der den Startpunkt dieses Werts darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Binärwert.</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der Standard-Geography-Koordinatensystem-ID (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den GML-Wert mit der Standard-Geography-Koordinatensystem-ID (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="geographyMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language) und Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den GML-Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geographyMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Textwerts.</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der Standard-Geography-Koordinatensystem-ID (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Sammlungswert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geographyCollectionWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Sammlungswert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geographyCollectionWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Schnittmenge von diesem DbGeography-Wert und einem anderen DbGeography-Wert.</summary>
      <returns>Ein neuer DbGeography-Wert, der die Schnittmenge von diesem Geografiewert und other darstellt.</returns>
      <param name="other">Der Geografiewert, für den die Überschneidung mit diesem Wert berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob dieser DbGeography-Wert räumlich das angegebene DbGeography-Argument überschneidet.</summary>
      <returns>True, wenn other diesen Geografiewert schneidet; andernfalls false.</returns>
      <param name="other">Der Geografiewert, der mit diesem Geografiewert im Hinblick auf die Schnittmenge verglichen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>Ruft einen booleschen Wert ab, für den Nullwerte zulässig sind und der angibt, ob dieser DbGeography-Wert geschlossen ist. Kann NULL sein, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>Gibt true zurück, wenn dieser DbGeography-Wert geschlossen ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>Ruft einen booleschen Wert ab, für den Nullwerte zulässig sind und der angibt, ob dieser DbGeography-Wert leer ist.</summary>
      <returns>Gibt true zurück, wenn dieser DbGeography-Wert leer ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>Ruft die Breitenkoordinate dieses DbGeography-Werts ab, wenn er einen Punkt darstellt.&amp;amp;lt;returns&amp;amp;gt;Der Wert für die Breitenkoordinate dieses Geografiewerts, wenn er einen Punkt darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die Breitenkoordinate dieses DbGeography-Werts.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>Ruft einen doppelten Wert ab, der NULL-Werte zulässt und der die Länge dieses angegebenen DbGeography-Werts angibt, der möglicherweise NULL ist, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>Ein doppelter Wert, der NULL-Werte zulässt und der die Länge dieses DbGeography-Werts angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Zeilenwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="lineWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Zeilenwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="lineWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>Ruft die Längenkoordinate dieses DbGeography-Werts ab, wenn er einen Punkt darstellt.&amp;amp;lt;returns&amp;amp;gt;Der Wert für die Längenkoordinate dieses Geografiewerts, wenn er einen Punkt darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die Längenkoordinate dieses DbGeography-Werts.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>Ruft die M-Koordinate (Measure) dieses DbGeography-Werts ab, wenn er einen Punkt darstellt.&amp;amp;lt;returns&amp;amp;gt;Der M (Measure)-Koordinatenwert dieses Geografiewerts, wenn er einen Punkt darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die M (Measure)-Koordinate dieses DbGeography-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiLine-Wert von einem Binärwert zurück.</summary>
      <returns>Der MultiLine-Wert von einem Binärwert.</returns>
      <param name="multiLineWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>Gibt den MultiLine-Wert von einem bekannten Textwert zurück.</summary>
      <returns>Der MultiLine-Wert von einem bekannten Textwert.</returns>
      <param name="multiLineWellKnownText">Der bekannte Text.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiPoint-Wert von einem bekannten Binärwert zurück.</summary>
      <returns>Der MultiPoint-Wert von einem bekannten Binärwert.</returns>
      <param name="multiPointWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>Gibt den MultiPoint-Wert von einem bekannten Textwert zurück.</summary>
      <returns>Der MultiPoint-Wert von einem bekannten Textwert.</returns>
      <param name="multiPointWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiPolygon-Wert von einem bekannten Binärwert zurück.</summary>
      <returns>Der MultiPolygon-Wert von einem bekannten Binärwert.</returns>
      <param name="multiPolygonWellKnownBinary">Der MultiPolygon-WKB-Wert (well-known binary).</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Gibt den MultiPolygon-Wert von einem bekannten Textwert zurück.</summary>
      <returns>Der MultiPolygon-Wert von einem bekannten Textwert.</returns>
      <param name="multiPolygonWellKnownText">Der MultiPolygon-WKT-Wert (well-known text).</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>Gibt ein Element dieses DbGeography-Werts von einer bestimmten Position zurück, wenn er einen Linestring oder einen linearen Ring darstellt.&amp;amp;lt;param name="index"&amp;amp;gt;Die Position in diesem Geografiewert, an der das Element abgerufen werden soll.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;Das Element in diesem Geografiewert an der angegebenen Position, wenn es einen Linestring oder einen linearen Ring darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Ein Element dieses DbGeography-Werts von einer bestimmten Position.</returns>
      <param name="index">Der Index.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>Ruft die Anzahl der Punkte in diesem DbGeography-Wert ab, wenn er einen LineString oder einen linearen Ring darstellt.&amp;amp;lt;returns&amp;amp;gt;Die Anzahl der Elemente dieses Geografiewerts, wenn er einen Linestring oder einen linearen Ring darstellt; andernfalls null.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Die Anzahl der Punkte in diesem DbGeography-Wert.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Punktwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="pointWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Punktwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="pointWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Polygonwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="polygonWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Polygonwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeography-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="polygonWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeography-Wert verwenden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>Ruft den räumlichen Anbieter ab, der für Vorgänge mit diesem räumlichen Typ verwendet wird.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>Ruft eine Darstellung dieses DbGeography-Werts ab, der für den zugrunde liegenden Anbieter spezifisch ist, der sie erstellt hat.</summary>
      <returns>Eine Darstellung dieses DbGeography-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob dieses DbGeography mit dem angegebenen DbGeography-Argument räumlich gleich ist.</summary>
      <returns>True, wenn other diesem Geografiewert räumlich gleich ist; andernfalls false.</returns>
      <param name="other">Der Geografiewert, der mit diesem Geografiewert im Hinblick auf Gleichheit verglichen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>Ruft den speziellen Typnamen der DBGeography ab.</summary>
      <returns>Der räumliche Typname der DBGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>Ruft einen DbGeography-Wert ab, der den Anfangspunkt des Werts darstellt. Der kann möglicherweise NULL sein, wenn dieser DbGeography-Wert keine Kurve darstellt.</summary>
      <returns>Ein DbGeography-Wert, der den Startpunkt dieses Werts darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die symmetrische Differenz zwischen diesem DbGeography-Wert und einem anderen DbGeography-Wert.</summary>
      <returns>Ein neuer DbGeography-Wert, der den symmetrischen Unterschied zwischen diesem Geografiewert und other darstellt.</returns>
      <param name="other">Der Geografiewert, für den die symmetrische Differenz zu diesem Wert berechnet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>Gibt eine Zeichenfolgenentsprechung des Geografiewerts zurück.</summary>
      <returns>Eine Zeichenfolgenentsprechung des Geografiewerts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Union von diesem DbGeography-Wert und einem anderen DbGeography-Wert.</summary>
      <returns>Ein neuer DbGeography-Wert, der die Gesamtmenge von diesem Geografiewert und other darstellt.</returns>
      <param name="other">Der Geografiewert, für den die Vereinigung mit diesem Wert berechnet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>Ruft eine serialisierbare bekannte Darstellung des Datenvertrags dieses DbGeography-Werts ab oder legt diese fest.</summary>
      <returns>Eine serialisierbare bekannte Darstellung des Datenvertrags dieses DbGeography-Werts.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>Eine serialisierbare Darstellung des Datenvertrags eines <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>Ruft den Koordinatensystembezeichner (SRID) dieses Werts ab oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>Ruft die bekannte binäre Darstellung dieses Werts ab oder legt diese fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>Ruft die bekannte Textdarstellung dieses Werts ab oder legt diese fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>Stellt geometrische Formen dar.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>Ruft einen doppelten Wert ab, der NULL-Werte zulässt und der den Bereich dieses angegebenen DbGeometry-Werts angibt, der möglicherweise NULL ist, wenn dieser Wert keine Oberfläche darstellt.</summary>
      <returns>Ein double-Wert, der Nullwerte zulässt und der den Bereich dieses DbGeometry-Werts angibt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>Generiert die bekannte binäre Darstellung dieses DbGeometry-Werts.</summary>
      <returns>Die bekannte binäre Darstellung dieses DbGeometry-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>Generiert die Darstellung dieses DbGeometry-Werts in der GML (Geography Markup Language).</summary>
      <returns>Eine Zeichenfolge, die die GML-Darstellung dieses DbGeometry-Werts enthält.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>Generiert die bekannte Textdarstellung dieses DbGeometry-Werts.Schließt nur die X- und Y-Koordinaten für Punkte ein.</summary>
      <returns>Eine Zeichenfolge, die die bekannte Textdarstellung dieses DbGeometry-Werts enthält.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>Ruft die Begrenzung der DbGeometry-Objekte ab.</summary>
      <returns>Die Begrenzung der DbGeometry-Objekte.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>Gibt ein Geometrieobjekt zurück, das die Gesamtmenge aller Punkte darstellt, deren Abstand zu einer Geometrieinstanz kleiner oder gleich einem angegebenen Wert ist.</summary>
      <returns>Ein Geometrieobjekt, das die Gesamtmenge aller Punkte darstellt.</returns>
      <param name="distance">Der Abstand.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>Ruft den DbGeometry-Wert ab, der den Schwerpunkt dieses DbGeometry-Werts darstellt, der möglicherweise NULL ist, wenn der Wert keine Oberfläche darstellt.</summary>
      <returns>Der DbGeometry-Wert, der den Schwerpunkt dieses DbGeometry-Werts darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry-Wert räumlich das angegebene DbGeometry-Arguments enthält.</summary>
      <returns>true, wenn dieser Geometriewert other enthält; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Umschließung verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>Ruft die konvexe Hülle dieses DbGeometry-Werts als einen anderen DbGeometry-Wert ab.</summary>
      <returns>Die konvexe Hülle dieses DbGeometry-Werts als anderer DbGeometry-Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>Ruft den Bezeichner des Koordinatensystems des DbGeometry-Objekts ab.</summary>
      <returns>Der Bezeichner des Koordinatensystems des DbGeometry-Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob sich dieser DbGeometry-Wert räumlich mit dem angegebenen DbGeometry-Argument überschneidet.</summary>
      <returns>true, wenn other diesen Geometriewert kreuzt; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>Ruft die Standardkoordinatensystem-ID (SRID) für Geometriewerte ab.</summary>
      <returns>Die Standardkoordinatensystem-ID (SRID) für Geometriewerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet den Unterschied zwischen diesem DbGeometry-Wert und einem anderen DbGeometry-Wert.</summary>
      <returns>Ein neuer DbGeometry-Wert, der den Unterschied zwischen diesem Geometriewert und other darstellt.</returns>
      <param name="other">Der Geometriewert, für den die Differenz zu diesem Wert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>Ruft die Abmessungen des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts ab oder, wenn der Wert eine Auflistung ist, der Abmessung des größten Elements.</summary>
      <returns>Die Dimension des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry zum angegebenen DbGeometry-Argument räumlich disjunkt ist.</summary>
      <returns>true, wenn other von diesem Geometriewert disjunkt ist; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Disjunktheit verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet den Abstand zwischen den nächsten Punkten in diesem DbGeometry-Wert und in einem anderen DbGeometry-Wert.</summary>
      <returns>Ein double-Wert, der den Abstand zwischen den beiden nächsten Punkten in diesem Geometriewert und other angibt.</returns>
      <param name="other">Der Geometriewert, für den die Entfernung zu diesem Wert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>Gibt ein Element dieses DbGeometry-Werts von einer bestimmten Position zurück, wenn sie eine Geometrieauflistung darstellt. </summary>
      <returns>Das Element in diesem Geometriewert an der angegebenen Position, wenn es eine Auflistung anderer Geometriewerte darstellt, andernfalls null.</returns>
      <param name="index">Die Position innerhalb dieses Geometriewerts, an der das Element abgerufen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>Ruft die Anzahl der Elemente in diesem DbGeometry-Wert ab, wenn eine Geometrieauflistung dargestellt wird. </summary>
      <returns>Die Anzahl an Elementen in diesem Geometriewert, wenn er eine Auflistung anderer Geometriewerte darstellt, andernfalls null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>Ruft die Höhe (Z-Koordinate) dieses DbGeometry-Werts ab, wenn er einen Punkt darstellt. </summary>
      <returns>Die Höhe (Z-Koordinate) dieses DbGeometry-Werts, wenn er einen Punkt darstellt, andernfalls null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>Ruft einen DbGeometry-Wert ab, der den Anfangspunkt des Werts darstellt. Der kann möglicherweise NULL sein, wenn dieser DbGeometry-Wert keine Kurve darstellt.</summary>
      <returns>Ein DbGeometry-Wert, der den Startpunkt dieses Werts darstellt.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>Ruft den Umschlag (minimaler Begrenzungsrahmen) dieses DbGeometry-Werts als Geometriewert ab.</summary>
      <returns>Der Umschlag (minimaler Begrenzungsrahmen) dieses DbGeometry-Werts.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>Ruft den DbGeometry-Wert ab, der den äußeren Ring dieses angegebenen DbGeometry-Werts darstellt, der möglicherweise NULL ist, wenn der Wert kein Polygon darstellt.</summary>
      <returns>Der DbGeometry-Wert, der den Außenring dieses DbGeometry-Werts darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Binärwert.</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der Standard-Geometrie-Koordinatensystem-ID ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den GML-Wert mit der Standard-Geometrie-Koordinatensystem-ID (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="geometryMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geometriewerts enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language) und Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den GML-Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geometryMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Textwerts.</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der Standard-Geometrie-Koordinatensystem-ID (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Sammlungswert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geometryCollectionWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Sammlungswert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="geometryCollectionWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>Gibt einen inneren Ring dieses DbGeometry-Werts an einer bestimmten Position zurück, wenn er ein Polygon darstellt. </summary>
      <returns>Der innere Ring in diesem Geometriewert an der angegebenen Position, wenn er ein Polygon darstellt, andernfalls null.</returns>
      <param name="index">Die Position innerhalb dieses Geometriewerts, an der der innere Ring abgerufen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>Ruft die Anzahl der inneren Ringe in diesem DbGeometry-Wert ab, wenn er ein Polygon darstellt. </summary>
      <returns>Die Anzahl an Elementen in diesem Geometriewert, wenn er ein Polygon darstellt, andernfalls null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet die Schnittmenge von diesem DbGeometry-Wert und einem anderen DbGeometry-Wert.</summary>
      <returns>Ein neuer DbGeometry-Wert, der die Schnittmenge von diesem Geometriewert und other darstellt.</returns>
      <param name="other">Der Geometriewert, für den die Überschneidung mit diesem Wert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry-Wert räumlich das angegebene DbGeometry-Arguments überschneidet.</summary>
      <returns>true, wenn other diesen Geometriewert schneidet; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Schnittmenge verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>Ruft einen booleschen Wert ab, für den Nullwerte zulässig sind und der angibt, ob dieser DbGeometry-Wert geschlossen ist. Kann NULL sein, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>true, wenn dieser DbGeometry-Wert geschlossen ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>Ruft einen booleschen Wert ab, der Nullwerte zulässt und der angibt, ob dieser DbGeometry-Wert leer ist. Kann null sein, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>true, wenn dieser DbGeometry-Wert leer ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>Ruft einen booleschen Wert ab, für den Nullwerte zulässig sind und der angibt, ob dieser DbGeometry-Wert ein Ring ist. Kann NULL sein, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>true, wenn dieser DbGeometry-Wert ein Ring ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>Ruft einen booleschen Wert ab, der Nullwerte zulässt und der angibt, ob dieser DbGeometry-Wert einfach ist.</summary>
      <returns>true, wenn dieser DbGeometry-Wert einfach ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>Ruft einen booleschen Wert ab, der Nullwerte zulässt und der angibt, ob dieser DbGeometry-Wert gültig ist.</summary>
      <returns>true, wenn dieser DbGeometry-Wert gültig ist; andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>Ruft einen doppelten Wert ab, der NULL-Werte zulässt und der die Länge dieses angegebenen DbGeometry-Werts angibt, der möglicherweise NULL ist, wenn dieser Wert keine Kurve darstellt.</summary>
      <returns>Die Länge dieses DbGeometry-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Zeilenwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="lineWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Zeilenwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="lineWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>Ruft den Measure (M-Koordinate)-Wert dieses DbGeometry-Werts ab, wenn er einen Punkt darstellt. </summary>
      <returns>Der Measure (M-Koordinate)-Wert dieses Geometriewerts, wenn er einen Punkt darstellt, andernfalls null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiLine-Wert von einem Binärwert zurück.</summary>
      <returns>Der MultiLine-Wert von einem Binärwert.</returns>
      <param name="multiLineWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>Gibt den MultiLine-Wert von einem bekannten Textwert zurück.</summary>
      <returns>Der MultiLine-Wert von einem bekannten Textwert.</returns>
      <param name="multiLineWellKnownText">Der bekannte Text.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiPoint-Wert von einem bekannten Binärwert zurück.</summary>
      <returns>Der MultiPoint-Wert von einem bekannten Binärwert.</returns>
      <param name="multiPointWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>Gibt den MultiPoint-Wert von einem bekannten Textwert zurück.</summary>
      <returns>Der MultiPoint-Wert von einem bekannten Textwert.</returns>
      <param name="multiPointWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Gibt den MultiPolygon-Wert von einem bekannten Binärwert zurück.</summary>
      <returns>Der MultiPoint-Wert von einem bekannten Textwert.</returns>
      <param name="multiPolygonWellKnownBinary">Der MultiPolygon-WKT-Wert (well-known text).</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Gibt den MultiPolygon-Wert von einem bekannten Binärwert zurück.</summary>
      <returns>Der MultiPolygon-Wert von einem bekannten Binärwert.</returns>
      <param name="multiPolygonWellKnownText">Der MultiPolygon-WKT-Wert (well-known text).</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry-Wert räumlich das angegebene DbGeometry-Arguments überlappt.</summary>
      <returns>true, wenn dieser Geometriewert other überlappt; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Überlappung verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>Gibt ein Element dieses DbGeometry-Werts von einer bestimmten Position zurück, wenn er einen Linestring oder einen linearen Ring darstellt. </summary>
      <returns>Das Element in diesem Geometriewert an der angegebenen Position, wenn er einen LineString oder LinearRing darstellt, andernfalls null.</returns>
      <param name="index">Die Position innerhalb dieses Geometriewerts, an der das Element abgerufen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>Ruft die Anzahl der Punkte in diesem DbGeometry-Wert ab, wenn er einen Linestring oder einen linearen Ring darstellt. </summary>
      <returns>Die Anzahl der Elemente in diesem Geometriewert, wenn er einen LineString oder LinearRing darstellt, andernfalls null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Punktwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="pointWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Punktwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="pointWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>Ruft einen Punkt auf der Oberfläche dieses DbGeometry-Werts ab, der möglicherweise NULL ist, wenn dieser DbGeometry-Wert keine Oberfläche darstellt.</summary>
      <returns>Ein Punkt auf der Oberfläche des DbGeometry-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Polygonwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten binären Wert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="polygonWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Polygonwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer DbGeometry-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID definiert.</returns>
      <param name="polygonWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue DbGeometry-Wert verwenden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> ist ungültig.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>Ruft den räumlichen Anbieter ab, der für Vorgänge mit diesem räumlichen Typ verwendet wird.</summary>
      <returns>Der räumliche Anbieter, der für Vorgänge mit diesem räumlichen Typ verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>Ruft eine Darstellung dieses DbGeometry-Werts ab, der für den zugrunde liegenden Anbieter spezifisch ist, der sie erstellt hat.</summary>
      <returns>Eine Darstellung dieses DbGeometry-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Bestimmt, ob dieser DbGeometry-Wert räumlich mit dem angegebenen DbGeometry-Argument gemäß dem angegebenen Dimensionally Extended Nine-Intersection Model-Schnittmengenmusters (DE-9IM-Musters) verknüpft ist.</summary>
      <returns>true, wenn sich dieser Geometriewert nach der angegebenen Schnittmengenmustermatrix auf other bezieht; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Relation verglichen werden soll.</param>
      <param name="matrix">Eine Zeichenfolge, die die Textdarstellung des (DE-9IM) Schnittmengenmusters enthält, das die Verbindung definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> und <paramref name="matrix" /> ist null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry zum angegebenen DbGeometry-Argument räumlich gleich ist.</summary>
      <returns>true, wenn other diesem Geometriewert räumlich gleich ist; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Gleichheit verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>Ruft eine räumliche Darstellung des Typnamens dieses DbGeometry-Werts ab.</summary>
      <returns>Eine Darstellung des räumlichen Typnamens dieses DbGeometry-Werts.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>Ruft einen DbGeometry-Wert ab, der den Anfangspunkt des Werts darstellt. Der kann möglicherweise NULL sein, wenn dieser DbGeometry-Wert keine Kurve darstellt.</summary>
      <returns>Ein DbGeometry-Wert, der den Startpunkt dieses Werts darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet den symmetrischen Unterschied zwischen diesem DbGeometry-Wert und einem anderen DbGeometry-Wert.</summary>
      <returns>Ein neuer DbGeometry-Wert, der den symmetrischen Unterschied zwischen diesem Geometriewert und other darstellt.</returns>
      <param name="other">Der Geometriewert, für den die symmetrische Differenz zu diesem Wert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>Gibt eine Zeichenfolgenentsprechung des Geometriewerts zurück.</summary>
      <returns>Eine Zeichenfolgenentsprechung des Geometriewerts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieser DbGeometry-Wert das angegebene DbGeometry-Argument räumlich berührt.</summary>
      <returns>true, wenn other diesen Geometriewert berührt; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet die Union von diesem DbGeometry-Wert und einem anderen DbGeometry-Wert.</summary>
      <returns>Ein neuer DbGeometry-Wert, der die Gesamtmenge von diesem Geometriewert und other darstellt.</returns>
      <param name="other">Der Geometriewert, für den die Vereinigung mit diesem Wert berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>Ruft eine serialisierbare bekannte Darstellung des Datenvertrags dieses DbGeometry-Werts ab oder legt diese fest.</summary>
      <returns>Eine serialisierbare bekannte Darstellung des Datenvertrags dieses DbGeometry-Werts.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob dieses DbGeometry-Wert räumlich innerhalb des angegebenen DbGeometry-Arguments ist.</summary>
      <returns>true, wenn sich dieser Geometriewert in other befindet; andernfalls false.</returns>
      <param name="other">Der Geometriewert, der mit diesem Geometriewert bezüglich der Umschließung verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> hat den Wert null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>Ruft die x-Koordinate dieses DbGeometry-Werts ab, wenn sie einen Punkt darstellt.</summary>
      <returns>Der X-Koordinate-Wert dieses Geometriewerts, wenn er einen Punkt darstellt, andernfalls null.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>Ruft die y-Koordinate dieses DbGeometry-Werts ab, wenn sie einen Punkt darstellt.</summary>
      <returns>Der Y-Koordinate-Wert dieses Geometriewerts, wenn er einen Punkt darstellt, andernfalls null.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>Eine serialisierbare Darstellung des Datenvertrags eines <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>Ruft den Koordinatensystembezeichner (SRID) dieses Werts ab oder legt ihn fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>Ruft die bekannte binäre Darstellung dieses Werts ab oder legt diese fest.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>Ruft die bekannte Textdarstellung dieses Werts ab oder legt diese fest.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>Eine anbieterunabhängige Dienst-API zur Unterstützung des räumlichen (Geografie/Geometrie)-Typs.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>Bei Implementierung in abgeleiteten Typen wird eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeography" /> aus der Spalte an der angegebenen Ordnungszahl der Spalte gelesen.</summary>
      <returns>Die Instanz von DbGeography am angegebenen Spaltenwert</returns>
      <param name="ordinal">Die Ordnungszahl der Spalte, die den Geografiewert enthält</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Liest asynchron eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeography" /> aus der Spalte an der angegebenen Spaltenordnungszahl.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeography" /> am angegebenen Spaltenwert.</returns>
      <param name="ordinal">Die Ordnungszahl der Spalte, die den Geografiewert enthält.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>Bei Implementierung in abgeleiteten Typen wird eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> aus der Spalte an der angegebenen Ordnungszahl der Spalte gelesen.</summary>
      <returns>Die Instanz von DbGeometry am angegebenen Spaltenwert</returns>
      <param name="ordinal">Die Ordnungszahl der Datensatzspalte, die die anbieterspezifischen Geometriedaten enthält</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Liest asynchron eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> aus der Spalte an der angegebenen Spaltenordnungszahl.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.Das Aufgabeergebnis enthält die Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> am angegebenen Spaltenwert.</returns>
      <param name="ordinal">Die Ordnungszahl der Datensatzspalte, die die anbieterspezifischen Geometriedaten enthält.</param>
      <param name="cancellationToken">Ein <see cref="T:System.Threading.CancellationToken" />, das beim Warten auf den Abschluss der Aufgabe überwacht werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>Gibt zurück, ob die Spalte an der angegebenen Spaltenordnungszahl vom Typ Geografie ist.</summary>
      <returns>true, wenn die Spalte an der angegebenen Spaltenordnungszahl vom Typ Geografie ist, andernfalls false.</returns>
      <param name="ordinal">Die Ordnungszahl der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>Gibt zurück, ob die Spalte an der angegebenen Spaltenordnungszahl vom Typ Geometrie ist.</summary>
      <returns>true, wenn die Spalte an der angegebenen Spaltenordnungszahl vom Typ Geometrie ist, andernfalls false.</returns>
      <param name="ordinal">Die Ordnungszahl der Spalte.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>Eine anbieterunabhängige Dienst-API zur Unterstützung des räumlichen (Geografie/Geometrie)-Typs.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>Ruft die bekannte binäre Darstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts ab.</summary>
      <returns>Die bekannte binäre Darstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, für den das WKB-Format (well-known binary) generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Ruft die bekannte binäre Darstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts ab.</summary>
      <returns>Die bekannte binäre Darstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, für den das WKB-Format (well-known binary) generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>Generiert die Darstellung in der GML (Geography Markup Language) dieses <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</summary>
      <returns>Eine Zeichenfolge, die die GML-Darstellung dieses DbGeography-Werts enthält.</returns>
      <param name="geographyValue">Der Geografiewert, für den die GML generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Generiert die Darstellung in der GML (Geography Markup Language) dieses <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</summary>
      <returns>Eine Zeichenfolge, die die GML-Darstellung dieses DbGeometry-Werts enthält.</returns>
      <param name="geometryValue">Der Geometriewert, für den die GML generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>Ruft die bekannte binäre Darstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts ab.Dieser Wert sollte nur die Länge und Breite von Punkten enthalten.</summary>
      <returns>Eine Zeichenfolge, die die bekannte Textdarstellung von geographyValue enthält.</returns>
      <param name="geographyValue">Der Geografiewert, für den das WKT-Format (well-known text) generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Ruft die bekannte Textdarstellung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts ab und schließt nur die X- und Y-Koordinaten für Punkte ein.</summary>
      <returns>Eine Zeichenfolge, die die bekannte Textdarstellung von geometryValue enthält.</returns>
      <param name="geometryValue">Der Geometriewert, für den das WKT-Format (well-known text) generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt eine Textdarstellung der <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> mit Erhebung und Maßeinheiten zurück.</summary>
      <returns>Eine Textdarstellung von <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt eine Textdarstellung der <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> mit Erhebung und Maßeinheiten zurück.</summary>
      <returns>Eine Textdarstellung der <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> mit Erhebung und Maßeinheiten.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>Erstellt einen Geografiewert, der alle Punkte darstellt, die kleiner oder gleich dem Abstand zum angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert sind.</summary>
      <returns>Erstellt einen neuen DbGeography-Wert, der alle Punkte darstellt, die kleiner oder gleich dem Abstand zu geographyValue sind.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <param name="distance">Ein double-Wert, der angibt, in welcher Entfernung von geographyValue gepuffert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>Erstellt einen Geometriewert, der alle Punkte darstellt, die kleiner oder gleich dem Abstand zum angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert sind.</summary>
      <returns>Ein neuer DbGeometry-Wert, der alle Punkte darstellt, die kleiner oder gleich dem Abstand zu geometryValue sind.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <param name="distance">Ein double-Wert, der angibt, in welcher Entfernung von geometryValue gepuffert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob ein <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert räumlich den anderen Wert enthält.</summary>
      <returns>true, wenn geometryValue otherGeometry enthält; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Diese Methode kann von abgeleiteten Implementierungen von <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> verwendet werden, nachdem eine geeignete Validierung des angegebenen Anbieterwerts durchgeführt wurde, um sicherzustellen, dass er für die Verwendung mit der abgeleiteten Implementierung geeignet ist.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Instanz, die den angegebenen providerValue enthält und die angegebenen spatialServices als räumliche Implementierung verwendet.</returns>
      <param name="spatialServices">Die räumliche Dienstinstanz, von der der zurückgegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert für die Implementierung der räumlichen Funktionen abhängt.</param>
      <param name="providerValue">Der Anbieterwert.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Diese Methode kann von abgeleiteten Implementierungen von <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> verwendet werden, nachdem eine geeignete Validierung des angegebenen Anbieterwerts durchgeführt wurde, um sicherzustellen, dass er für die Verwendung mit der abgeleiteten Implementierung geeignet ist.</summary>
      <returns>Eine neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Instanz, die den angegebenen providerValue enthält und die angegebenen spatialServices als räumliche Implementierung verwendet.</returns>
      <param name="spatialServices">Die räumliche Dienstinstanz, von der der zurückgegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert für die Implementierung der räumlichen Funktionen abhängt.</param>
      <param name="providerValue">Ein Anbieterwert.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>Erstellt einen anbieterspezifischen Wert, der mit dieser räumlichen Dienstimplementierung auf Grundlage der angegebenen bekannten <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Darstellung kompatibel ist.</summary>
      <returns>Ein anbieterspezifischer Wert, der die Informationen in wellKnownValue in einer Weise kodiert, die mit dieser räumlichen Dienstimplementierung kompatibel ist.</returns>
      <param name="wellKnownValue">Eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />, die die bekannte Darstellung eines Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>Erstellt einen anbieterspezifischen Wert, der mit dieser räumlichen Dienstimplementierung auf Grundlage der angegebenen bekannten <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Darstellung kompatibel ist.</summary>
      <returns>Ein anbieterspezifischer Wert, der die Informationen in wellKnownValue in einer Weise kodiert, die mit dieser räumlichen Dienstimplementierung kompatibel ist.</returns>
      <param name="wellKnownValue">Eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />, die die bekannte Darstellung eines Geometriewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />, die den angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert mithilfe eines oder der beiden bekannten räumlichen Standardformate darstellt.</summary>
      <returns>Die bekannte Darstellung von geographyValue als neuer <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />, die den angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert mithilfe eines oder der beiden bekannten räumlichen Standardformate darstellt.</summary>
      <returns>Die bekannte Darstellung von geometryValue als neuer <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte räumlich überschneiden.</summary>
      <returns>true, wenn geometryValue otherGeometry kreuzt; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>Ruft die standardmäßigen Dienste für <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> ab.</summary>
      <returns>Die Standarddienste.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet den Unterschied zwischen zwei <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werten.</summary>
      <returns>Ein neuer DbGeography-Wert, der den Unterschied zwischen geographyValue und otherGeography darstellt.</returns>
      <param name="geographyValue">Der erste Geografiewert.</param>
      <param name="otherGeography">Der zweite Geografie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet den Unterschied zwischen zwei <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werten.</summary>
      <returns>Ein neuer DbGeometry-Wert, der den Unterschied zwischen geometryValue und otherGeometry darstellt.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werte räumlich disjunkt sind.</summary>
      <returns>true, wenn geographyValue von otherGeography disjunkt ist; andernfalls false.</returns>
      <param name="geographyValue">Der erste auf Disjunktheit zu vergleichende Geografiewert.</param>
      <param name="otherGeography">Der zweite auf Disjunktheit zu vergleichende Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte räumlich disjunkt sind.</summary>
      <returns>true, wenn geometryValue von otherGeometry disjunkt ist; andernfalls false.</returns>
      <param name="geometryValue">Der erste auf Disjunktheit zu vergleichende Geometriewert.</param>
      <param name="otherGeometry">Der zweite auf Disjunktheit zu vergleichende Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Entfernung zwischen den nächsten Punkten in zwei <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werten.</summary>
      <returns>Ein double-Wert, der den Abstand zwischen den beiden nächsten Punkten in geographyValue und otherGeography angibt.</returns>
      <param name="geographyValue">Der erste Geografiewert.</param>
      <param name="otherGeography">Der zweite Geografie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet die Entfernung zwischen den nächsten Punkten in zwei <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werten.</summary>
      <returns>Ein double-Wert, der den Abstand zwischen den beiden nächsten Punkten in geometryValue und otherGeometry angibt.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Gibt ein Element des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er eine Geografiesammlung darstellt.</summary>
      <returns>Das Element in geographyValue am Positionsindex, wenn es eine Auflistung von anderen Geografiewerten darstellt; andernfalls null.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Geografieauflistung darzustellen braucht.</param>
      <param name="index">Die Position innerhalb des Geografiewerts, an der das Element abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Gibt ein Element des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er eine Geometriesammlung darstellt.</summary>
      <returns>Das Element in geometryValue am Positionsindex, wenn es eine Auflistung von anderen Geometriewerten darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Geometrieauflistung darzustellen braucht.</param>
      <param name="index">Die Position innerhalb des Geometriewerts, an der das Element abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Sammlungswert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geographyCollectionWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Sammlungswert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geographyCollectionWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Binärwert.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den GML-Wert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geographyMarkup">Eine Zeichenfolge, die eine Darstellung der Geometry-Markupsprache (GML) des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language) und Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den GML-Wert mit der angegebenen Koordinatensystem-ID (SRID) definiert.</returns>
      <param name="geographyMarkup">Eine Zeichenfolge, die eine Darstellung der Geometry-Markupsprache (GML) des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage eines anbieterspezifischen Werts, der mit dieser räumlichen Dienstimplementierung kompatibel ist.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, unterstützt durch diese räumliche Dienstimplementierung und den angegebenen Anbieterwert.</returns>
      <param name="providerValue">Ein anbieterspezifischer Wert, den die räumliche Dienstimplementierung zum Interpretieren als Geografiewert nutzt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Textwerts.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Zeilenwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="lineWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Zeilenwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="lineWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiLine-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiLine-Wert.</returns>
      <param name="multiLineWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiLine-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiLine-Wert.</returns>
      <param name="multiLineWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPoint-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPoint-Wert.</returns>
      <param name="multiPointWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPoint-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPoint-Wert.</returns>
      <param name="multiPointWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPolygon-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPolygon-Wert.</returns>
      <param name="multiPolygonWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPolygon-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-MultiPolygon-Wert.</returns>
      <param name="multiPolygonKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Punktwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="pointWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Punktwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="pointWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Polygonwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="polygonWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Polygonwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="polygonWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geografiewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Sammlungswert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geometryCollectionWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Sammlungswert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geometryCollectionWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Binärwert.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den GML-Wert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="geometryMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geometriewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen GML-Werts (Geography Markup Language) und Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den GML-Wert mit der angegebenen Koordinatensystem-ID (SRID) definiert.</returns>
      <param name="geometryMarkup">Eine Zeichenfolge, die eine Darstellung der Geografie-Markupsprache (GML) des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage eines anbieterspezifischen Werts, der mit dieser räumlichen Dienstimplementierung kompatibel ist.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, unterstützt durch diese räumliche Dienstimplementierung und den angegebenen Anbieterwert.</returns>
      <param name="providerValue">Ein anbieterspezifischer Wert, den die räumliche Dienstimplementierung zum Interpretieren als Geometriewert nutzt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Textwerts.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der standardmäßigen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="wellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Zeilenwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="lineWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Zeilenwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="lineWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiLine-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiLine-Wert.</returns>
      <param name="multiLineWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiLine-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiLine-Wert.</returns>
      <param name="multiLineWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPoint-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPoint-Wert.</returns>
      <param name="multiPointWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPoint-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPoint-Wert.</returns>
      <param name="multiPointWellKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPolygon-Wert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPolygon-Wert.</returns>
      <param name="multiPolygonWellKnownBinary">Der bekannte Binärwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPolygon-Wert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-MultiPolygon-Wert.</returns>
      <param name="multiPolygonKnownText">Der bekannte Textwert.</param>
      <param name="coordinateSystemId">Die Koordinatensystem-ID.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Punktwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="pointWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Punktwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="pointWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Polygonwert auf Grundlage des angegebenen bekannten Binärwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Binärwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="polygonWellKnownBinary">Ein Bytearray, das eine bekannte binäre Darstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>Erstellt einen neuen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Polygonwert auf Grundlage des angegebenen bekannten Textwerts und der Koordinatensystem-ID (SRID).</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, wie durch den bekannten Textwert mit der angegebenen Koordinatensystem-ID (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) definiert.</returns>
      <param name="polygonWellKnownText">Eine Zeichenfolge, die die bekannte Textdarstellung des Geometriewerts enthält.</param>
      <param name="coordinateSystemId">Der Bezeichner des Koordinatensystems, das der neue <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert verwenden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der den Bereich des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt. Kann null sein, wenn der Wert keine Oberfläche darstellt.</summary>
      <returns>Ein double-Wert, der Nullwerte zulässt und der den Bereich des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Oberfläche darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der den Bereich des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts angibt. Kann null sein, wenn der Wert keine Oberfläche darstellt.</summary>
      <returns>Ein double-Wert, der Nullwerte zulässt und der den Bereich des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts angibt.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Oberfläche darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der die Grenze des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt.</summary>
      <returns>Die Begrenzung des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, der den Schwerpunkt des angegebenen DbGeometry-Werts darstellt. Kann null sein, wenn der Wert keine Oberfläche darstellt.</summary>
      <returns>Der Schwerpunkt von geometryValue, wenn er eine Oberfläche darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Oberfläche darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der die konvexe Hülle des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt.</summary>
      <returns>Die konvexe Hülle des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt den Bezeichner des Koordinatensystems des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück.</summary>
      <returns>Der Koordinatensystem-Bezeichner des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt den Bezeichner des Koordinatensystems des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück.</summary>
      <returns>Der Koordinatensystem-Bezeichner des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>Ruft die Dimension des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts ab, oder die größte Elementdimension, wenn der Wert eine Auflistung ist.</summary>
      <returns>Die Dimension von geographyValue oder die größte Elementdimension, wenn <see cref="T:System.Data.Entity.Spatial.DbGeography" /> eine Auflistung ist.</returns>
      <param name="geographyValue">Der Geografiewert, für den der Dimensionswert abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Ruft die Dimension des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts ab, oder die größte Elementdimension, wenn der Wert eine Auflistung ist.</summary>
      <returns>Die Dimension von geometryValue oder die größte Elementdimension, wenn <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> eine Auflistung ist.</returns>
      <param name="geometryValue">Der Geometriewert, für den der Dimensionswert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die Anzahl der Elemente im angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert zurück, wenn er eine Geografiesammlung darstellt.</summary>
      <returns>Die Anzahl an Elementen in geographyValue, wenn der Wert eine Auflistung anderer Geografiewerte darstellt; andernfalls null.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Geografieauflistung darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die Anzahl der Elemente im angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, wenn er eine Geometriesammlung darstellt.</summary>
      <returns>Die Anzahl an Elementen in geometryValue, wenn der Wert eine Auflistung anderer Geometriewerte darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Geometrieauflistung darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die Erhöhung (Z-Koordinate) des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die Höhe (Z-Koordinate) von geographyValue, wenn der Wert einen Punkt darstellt; andernfalls null.</returns>
      <param name="geographyValue">Der Geografiewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die Erhöhung (Z) des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die Höhe (Z) von geometryValue, wenn der Wert einen Punkt darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert zurück, der den Endpunkt des gegebenen DbGeography-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Der Endpunkt von geographyValue, wenn er eine Kurve darstellt; andernfalls null.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, der den Endpunkt des gegebenen DbGeometry-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Der Endpunkt von geometryValue, wenn er eine Kurve darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Ruft den Umschlag (minimaler Begrenzungsrahmen) des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts als Geometriewert ab.</summary>
      <returns>Der Umschlag von geometryValue als <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert.</returns>
      <param name="geometryValue">Der Geometriewert, für den der Enveloppenwert abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, der den äußeren Ring des angegebenen DbGeometry-Werts darstellt. Kann null sein, wenn der Wert kein Polygon darstellt.</summary>
      <returns>Ein DbGeometry-Wert, der den Außenring von geometryValue darstellt, wenn er ein Polygon darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der kein Polygon darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die Anzahl der inneren Ringe im angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, wenn er ein Polygon darstellt.</summary>
      <returns>Die Anzahl an Elementen in geometryValue, wenn der Wert ein Polygon darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der kein Polygon darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert geschlossen ist. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>true, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert geschlossen ist, andernfalls false.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert geschlossen ist. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>true, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert geschlossen ist, andernfalls false.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert leer ist.</summary>
      <returns>Gibt TRUE zurück, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert leer ist; andernfalls FALSE.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert leer ist.</summary>
      <returns>Gibt TRUE zurück, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert leer ist; andernfalls FALSE.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert ein Ring ist. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>true, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert ein Ring ist, andernfalls false.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert einfach ist.</summary>
      <returns>Gibt TRUE zurück, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert einfach ist; andernfalls FALSE.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen booleschen Wert zurück, der Nullwerte zulässt und der angibt, ob der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert gültig ist.</summary>
      <returns>Gibt TRUE zurück, wenn der gegebene <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert gültig ist; andernfalls FALSE.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die Breitenkoordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die Breitenkoordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der die Länge des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Die Länge des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen double-Wert zurück, der Nullwerte zulässt und der die Länge des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Die Länge des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die Längenkoordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die Längenkoordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die M (Measure) -Koordinate des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die M (Measure)-Koordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die M (Measure) -Koordinate des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Die M (Measure)-Koordinate des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt die Anzahl von Punkten im angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert zurück, wenn er einen Linestring oder einen linearen Ring darstellt.</summary>
      <returns>Die Anzahl der Punkte im gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert.</returns>
      <param name="geographyValue">Der Geografiewert, die keinen LineString oder LinearRing darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die Anzahl von Punkten im angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, wenn er einen Linestring oder einen linearen Ring darstellt.</summary>
      <returns>Die Anzahl der Punkte im gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert.</returns>
      <param name="geometryValue">Der Geometriewert, die keinen LineString oder LinearRing darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, der einen Punkt auf der Oberfläche des gegebenen DbGeometry-Werts darstellt. Kann null sein, wenn der Wert keine Oberfläche darstellt.</summary>
      <returns>Ein <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der einen Punkt auf der Oberfläche des gegebenen DbGeometry-Werts darstellt.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Oberfläche darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen Wert zurück, der den räumlichen Typnamen des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts angibt.</summary>
      <returns>Der räumliche Typenname des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen Wert zurück, der den räumlichen Typnamen des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts angibt.</summary>
      <returns>Der räumliche Typenname des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert zurück, der den Startpunkt des gegebenen DbGeography-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Der Startpunkt des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts.</returns>
      <param name="geographyValue">Der Geografiewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt einen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, der den Startpunkt des gegebenen DbGeometry-Werts angibt. Kann null sein, wenn der Wert keine Kurve darstellt.</summary>
      <returns>Der Startpunkt des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, der keine Kurve darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die X-Koordinate des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Der x-Koordinatenwert des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Gibt die Y-Koordinate des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er einen Punkt darstellt.</summary>
      <returns>Der y-Koordinatenwert des gegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts.</returns>
      <param name="geometryValue">Der Geometriewert, der keinen Punkt darzustellen braucht.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Gibt einen inneren Ring aus dem angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert zurück, wenn er ein Polygon darstellt.</summary>
      <returns>Der innere Ring in geometryValue am Positionsindex, wenn er ein Polygon darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, der kein Polygon darzustellen braucht.</param>
      <param name="index">Die Position innerhalb des Geometriewerts, an der das Element abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Schnittmenge von zwei <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werten.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der die Schnittmenge von geographyValue und otherGeography darstellt.</returns>
      <param name="geographyValue">Der erste Geografiewert.</param>
      <param name="otherGeography">Der zweite Geografie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet die Schnittmenge von zwei <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werten.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der die Schnittmenge von geometryValue und otherGeometry darstellt.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werte räumlich überschneiden.</summary>
      <returns>true, wenn geographyValue otherGeography schneidet; andernfalls false.</returns>
      <param name="geographyValue">Der erste auf Überschneidung zu vergleichende Geografiewert.</param>
      <param name="otherGeography">Der zweite auf Schnittmenge zu vergleichende Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte räumlich überschneiden.</summary>
      <returns>true, wenn geometryValue otherGeometry schneidet; andernfalls false.</returns>
      <param name="geometryValue">Der erste auf Überschneidung zu vergleichende Geometriewert.</param>
      <param name="otherGeometry">Der zweite auf Schnittmenge zu vergleichende Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>Ruft einen Wert ab, der angibt, ob EF unter der Annahme fortgesetzt wird, dass dem Anbieter die notwendigen Typen/Ressourcen zur Verfügung stehen und er nicht sofort scheitert.Der Standardwert ist true.</summary>
      <returns>true, wenn EF unter der Annahme fortgesetzt wird, dass dem Anbieter die notwendigen Typen/Ressourcen zur Verfügung stehen und er nicht sofort scheitert; andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte überlappen.</summary>
      <returns>true, wenn geometryValue otherGeometry überlappt; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Gibt ein Punktelement des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werts zurück, wenn er ein Linestring oder einen linearen Ring darstellt.</summary>
      <returns>Der Punkt in geographyValue am Positionsindex, wenn er ein Linestring oder einen linearen Ring darstellt; andernfalls null.</returns>
      <param name="geographyValue">Der Geografiewert, die keinen LineString oder LinearRing darzustellen braucht.</param>
      <param name="index">Die Position innerhalb des Geografiewerts, an der das Element abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Gibt ein Punktelement des angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werts zurück, wenn er ein Linestring oder einen linearen Ring darstellt.</summary>
      <returns>Der Punkt in geometryValue am Positionsindex, wenn er ein Linestring oder einen linearen Ring darstellt; andernfalls null.</returns>
      <param name="geometryValue">Der Geometriewert, die keinen LineString oder LinearRing darzustellen braucht.</param>
      <param name="index">Die Position innerhalb des Geometriewerts, an der das Element abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> hat den Wert null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte sich räumlich entsprechend auf das angegebene dimensional erweiterte Neun-Schnittmenge Modell (DE-9IM) Schnittmengenmuster beziehen.</summary>
      <returns>true, wenn sich dieser geometryValue nach der angegebenen Schnittmengenmustermatrix auf otherGeometry bezieht; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der Geometriewert, der mit dem ersten Geometriewert bezüglich der Relation verglichen werden soll.</param>
      <param name="matrix">Eine Zeichenfolge, die die Textdarstellung des (DE-9IM) Schnittmengenmusters enthält, das die Verbindung definiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />, <paramref name="otherGeometry" /> or <paramref name="matrix" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werte räumlich gleich sind.</summary>
      <returns>true, wenn geographyValue räumlich gleich otherGeography ist; andernfalls false.</returns>
      <param name="geographyValue">Der erste auf Gleichheit zu vergleichende Geografiewert.</param>
      <param name="otherGeography">Der zweite auf Gleichheit zu vergleichende Geografiewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte räumlich gleich sind.</summary>
      <returns>true, wenn geometryValue räumlich gleich otherGeometry ist; andernfalls false.</returns>
      <param name="geometryValue">Der erste auf Gleichheit zu vergleichende Geometriewert.</param>
      <param name="otherGeometry">Der zweite auf Gleichheit zu vergleichende Geometriewert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die symmetrische Differenz zweier <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werte.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der den symmetrischen Unterschied zwischen geographyValue und otherGeography darstellt.</returns>
      <param name="geographyValue">Der erste Geografiewert.</param>
      <param name="otherGeography">Der zweite Geografie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet den symmetrischen Unterschied zwischen zwei <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werten.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der den symmetrischen Unterschied zwischen geometryValue und otherGeometry darstellt.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob sich die beiden angegebenen <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werte berühren.</summary>
      <returns>true, wenn geometryValue otherGeometry berührt; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Berechnet die Gesamtmenge von zwei <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Werten.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeography" />-Wert, der die Gesamtmenge von geographyValue und otherGeography darstellt.</returns>
      <param name="geographyValue">Der erste Geografiewert.</param>
      <param name="otherGeography">Der zweite Geografie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> oder <paramref name="otherGeography" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Berechnet die Gesamtmenge von zwei <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Werten.</summary>
      <returns>Ein neuer <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert, der die Gesamtmenge von geometryValue und otherGeometry darstellt.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Bestimmt, ob ein <see cref="T:System.Data.Entity.Spatial.DbGeometry" />-Wert räumlich im anderen ist.</summary>
      <returns>true, wenn sich geometryValue innerhalb von otherGeometry befindet; andernfalls false.</returns>
      <param name="geometryValue">Der erste Geometriewert.</param>
      <param name="otherGeometry">Der zweite Geometrie-Wert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> oder <paramref name="otherGeometry" /> ist nicht mit dieser räumlichen Dienstimplementierung kompatibel.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>Enthält Erweiterungsmethoden für die <see cref="T:System.Threading.Tasks.Task" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>Konfiguriert einen Awaiter, der für Await von <see cref="T:System.Threading.Tasks.Task" /> verwendet wird, um Marshalling der Fortsetzung zurück zum Originalkontext zu vermeiden, aber die aktuelle Kultur und UI-Kultur erhält.</summary>
      <returns>Ein Objekt, das für Await dieser Aufgabe verwendet wird.</returns>
      <param name="task">Die Aufgabe für Await.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>Konfiguriert einen Awaiter, der für Await von <see cref="T:System.Threading.Tasks.Task`1" /> verwendet wird, um Marshalling der Fortsetzung zurück zum Originalkontext zu vermeiden, aber die aktuelle Kultur und UI-Kultur erhält.</summary>
      <returns>Ein Objekt, das für Await dieser Aufgabe verwendet wird.</returns>
      <param name="task">Die Aufgabe für Await.</param>
      <typeparam name="T">Der Typ des von <see cref="T:System.Threading.Tasks.Task`1" /> erstellten Ergebnisses.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>Stellt ein Awaitable-Objekt dar, das Awaits auf <see cref="T:System.Threading.Tasks.Task" /> ermöglicht, was die Kultur erhält.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>Erstellt eine neue Instanz der <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" />-Klasse.</summary>
      <param name="task">Die Aufgabe für Await.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>Ruft einen Awaiter auf, der für Await von <see cref="T:System.Threading.Tasks.Task" /> verwendet wird.</summary>
      <returns>Eine Awaiter-Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>Beendet await der abgeschlossenen <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <exception cref="T:System.NullReferenceException">Der Awaiter wurde nicht korrekt initialisiert.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Die Aufgabe wurde abgebrochen.</exception>
      <exception cref="T:System.Exception">Die Aufgabe wurde in einem fehlerhaften Status abgeschlossen.</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>Ruft ab, ob diese <see cref="T:System.Threading.Tasks.Task" /> abgeschlossen wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>Diese Methode ist nicht implementiert und sollte nicht aufgerufen werden.</summary>
      <param name="continuation">Die aufzurufende Aktion, wenn der Await-Vorgang abgeschlossen ist.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Plant die Fortsetzung der <see cref="T:System.Threading.Tasks.Task" />, die dieser <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> zugeordnet ist.</summary>
      <param name="continuation">Die aufzurufende Aktion, wenn der Await-Vorgang abgeschlossen ist.</param>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="continuation" />-Argument ist NULL (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Der Awaiter wurde nicht korrekt initialisiert.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>Stellt ein Awaitable-Objekt dar, das Awaits auf <see cref="T:System.Threading.Tasks.Task`1" /> ermöglicht, was die Kultur erhält.</summary>
      <typeparam name="T">Der Typ des von <see cref="T:System.Threading.Tasks.Task`1" /> erstellten Ergebnisses.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>Erstellt eine neue Instanz der <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" />-Klasse.</summary>
      <param name="task">Die Aufgabe für Await.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>Ruft einen Awaiter auf, der für Await von <see cref="T:System.Threading.Tasks.Task`1" /> verwendet wird.</summary>
      <returns>Eine Awaiter-Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>Beendet await der abgeschlossenen <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Das Ergebnis der abgeschlossenen <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.NullReferenceException">Der Awaiter wurde nicht korrekt initialisiert.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Die Aufgabe wurde abgebrochen.</exception>
      <exception cref="T:System.Exception">Die Aufgabe wurde in einem fehlerhaften Status abgeschlossen.</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>Ruft ab, ob diese <see cref="T:System.Threading.Tasks.Task" /> abgeschlossen wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>Diese Methode ist nicht implementiert und sollte nicht aufgerufen werden.</summary>
      <param name="continuation">Die aufzurufende Aktion, wenn der Await-Vorgang abgeschlossen ist.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Plant die Fortsetzung der <see cref="T:System.Threading.Tasks.Task`1" />, die dieser <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> zugeordnet ist.</summary>
      <param name="continuation">Die aufzurufende Aktion, wenn der Await-Vorgang abgeschlossen ist.</param>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="continuation" />-Argument ist NULL (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Der Awaiter wurde nicht korrekt initialisiert.</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Stellt eine Ausnahme dar, die von <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> ausgelöst wird, wenn die Überprüfung von Entitäten fehlschlägt.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse mit den Standardwerten.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse unter Verwendung der angegebenen Fehlermeldung und der Validierungsergebnisse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="entityValidationResults">Die Validierungsergebnisse.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse mit der angegebenen Fehlermeldung, den Validierungsergebnissen und der internen Ausnahme.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="entityValidationResults">Die Validierungsergebnisse.</param>
      <param name="innerException">Der Fehler, der die Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse mit der angegebenen Fehlermeldung und der angegebenen internen Ausnahme.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Der Fehler, der die Ausnahme verursacht hat.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Ruft die Validierungsfehler ab, die der Entität zugeordnet sind.</summary>
      <returns>Die Validierungsfehler, die der Entität zugeordnet sind.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Stellt Validierungsergebnisse für eine einzelne Entität dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Erstellt eine Instanz einer <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />-Klasse.</summary>
      <param name="entry">Entitätseintrag, auf den sich die Ergebnisse beziehen.Nie NULL.</param>
      <param name="validationErrors">Liste von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Instanzen.Nie NULL.Kann leer sein und bedeuten, dass die Entität gültig ist.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Ruft eine Instanz von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> ab, auf die sich die Ergebnisse beziehen.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Ruft einen Indikator ab, der angibt, ob die Entität gültig ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Ruft Validierungsfehler ab.Nie NULL.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Eine Ausnahme wird von <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> ausgelöst, wenn eine Ausnahme vom Validierungscode ausgelöst wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Initialisiert eine neue Instanz von DbUnexpectedValidationException.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz von DbUnexpectedValidationException mit den angegebenen Serialisierungsinformationen und dem angegebenen Kontext.</summary>
      <param name="info">Die Serialisierungsinformationen.</param>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz von DbUnexpectedValidationException.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz von DbUnexpectedValidationException.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die interne Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Validierungsfehler.Dies kann ein Validierungsfehler auf Entitäts- oder Eigenschaftenebene sein.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Name der ungültigen Eigenschaft.Kann NULL sein.</param>
      <param name="errorMessage">Validierungsfehlermeldung.Kann NULL sein.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Ruft die Validierungsfehlermeldung ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Ruft den Namen der ungültigen Eigenschaft ab.</summary>
    </member>
  </members>
</doc>